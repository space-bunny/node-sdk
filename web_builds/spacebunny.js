/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.Client = __webpack_require__(1);
	exports.AmqpClient = __webpack_require__(1);
	exports.MqttClient = __webpack_require__(113);
	exports.StompClient = __webpack_require__(159);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {/**
	 * A module that exports an AmqpClient client
	 * which inherits from the SpaceBunny base client
	 * @module AmqpClient
	 */

	'use strict';

	// Import some helpers modules
	var merge = __webpack_require__(7);
	var Promise = __webpack_require__(9);
	// Import amqplib
	var amqp = __webpack_require__(11);

	// Import SpaceBunny main module from which AmqpClient inherits
	var SpaceBunny = __webpack_require__(98);
	var inherits = __webpack_require__(27).inherits;

	/**
	 * @constructor
	 * @param {Object} opts - constructor options may contain api-key or connection options
	 */
	var AmqpClient = function (opts) {
	  SpaceBunny.call(this,opts);
	  this._conn = undefined;
	  this._inputChannel = undefined;
	  this._outputChannel = undefined;
	  this._inputQueueArgs = { durable: true };
	  this._deviceExchangeArgs = { durable: true };
	  this._subscribeArgs = { noAck: true };
	  this._publishArgs = {};
	  this.connection();
	};
	inherits(AmqpClient, SpaceBunny);

	/**
	 * Subscribe to input channel
	 *
	 * @param {function} callback - function called every time a message is receviced
	 * passing the current message as argument
	 * @param {Object} options - subscription options
	 * @return promise containing the result of the subscription
	 */
	AmqpClient.prototype.onReceive = function (callback, opts) {
	  var parent = this;
	  // Receive messages from imput queue
	  return new Promise(function (resolve, reject) {
	    parent._createChannel('input').then(function(channel) {
	      parent._inputChannel = channel;
	      return parent._inputChannel.assertQueue(parent.deviceId() + '.input', parent._inputQueueArgs);
	    }).then(function(queueOk) {
	      return parent._inputChannel.consume(parent.deviceId() + '.input', function(message) {
	        callback(message);
	      }, merge(parent._subscribeArgs, opts) );
	    }).then(function(res) {
	      resolve(true);
	    }).catch(function(reason) {
	      reject(reason);
	    });
	  });
	};

	/**
	 * Publish a message on a specific channel
	 *
	 * @param {String} channel - channel name on which you want to publish a message
	 * @param {Object} message - the message payload
	 * @param {Object} message - the message payload
	 * @return promise containing true if the
	 */
	AmqpClient.prototype.publish = function (channel, message, opts) {
	  var parent = this;
	  return new Promise(function (resolve, reject) {
	    parent._createChannel('output').then(function(channel) {
	      parent._outputChannel = channel;
	      return parent._outputChannel.assertExchange(parent.deviceId(), 'direct', parent._deviceExchangeArgs);
	    }).then(function(exOk) {
	      return parent._outputChannel.publish(parent.deviceId(), parent.routingKeyFor(channel) , new Buffer(message),
	        merge(parent._publishArgs, opts));
	    }).then(function(res) {
	      resolve(true);
	    }).catch(function(reason) {
	      reject(reason);
	    });
	  });
	};

	/**
	 * @private
	 * Destroy the connection between the amqp client and broker
	 *
	 * @return a promise containing the result of the operation
	 */
	AmqpClient.prototype.disconnect = function () {
	  var parent = this;
	  return new Promise(function (resolve, reject) {
	    if(parent._conn === undefined)
	      reject('Not Connected');
	    else {
	      parent._conn.close().then(function (res) {
	        resolve(true);
	      }).catch(function(reason) {
	        reject(reason);
	      });
	    }
	  });
	};

	// ------------ PRIVATE METHODS -------------------

	/**
	 * @private
	 * Establish an amqp connection with the broker
	 * using configurations retrieved from the endpoint
	 *
	 * @param {Object} opts - connection options
	 * @return a promise containing current connection
	 */
	AmqpClient.prototype._connect = function (opts) {
	  var connectionParams = this._connectionParams;
	  var parent = this;
	  var connection_string = 'amqp://'.concat(connectionParams.username, ':', connectionParams.password,'@',
	    connectionParams.host, ':', connectionParams.protocols.amqp.port, '/', connectionParams.vhost.replace('/', '%2f'));

	  return new Promise(function (resolve, reject) {
	    if (parent._conn !== undefined)
	      resolve(parent._conn);
	    else {
	      amqp.connect(connection_string).then(function(conn) {
	        process.once('SIGINT', function() { conn.close(); });
	        parent._conn = conn;
	        resolve(conn);
	      }).catch( function (reason) {
	        reject(reason);
	      });
	    }
	  });
	};

	/**
	 * @private
	 * Create a channel on current connection, if connection does not
	 * exists creates a new one. If channel already exists return
	 * instance of that channel
	 *
	 * @param {String} channelType - indicates if the channel is input or output
	 * @return a promise containing the current channel
	 */
	AmqpClient.prototype._createChannel = function (channelType) {
	  var parent = this;
	  return new Promise(function (resolve, reject) {
	    parent._connect().then(function(conn) {
	        return conn.createChannel();
	    }).then(function(ch) {
	      parent[ '_'.concat(channelType,'Channel')] = ch;
	      resolve(ch);
	    }).catch(function(reason) {
	      reject(reason);
	    });
	  });
	};

	/**
	 * @private
	 * Close a channel on current connection, if connection does not
	 * exists creates a new one.
	 *
	 * @param {String} channelType - indicates if the channel is input or output
	 * @return a promise containing the result of the operation
	 */
	AmqpClient.prototype._closeChannel = function (channelType) {
	  var ch = this[ '_'.concat(channelType,'Channel')];
	  return new Promise(function (resolve, reject) {
	    if(ch === undefined)
	      reject('Invalid Channel Object');
	    else {
	      ch.close().then(function() {
	        resolve(true);
	      }).catch(function(reason) {
	        reject(reason);
	      });
	    }
	  });
	};

	/**
	 * @private
	 * Generate the routing key for a specific channel
	 *
	 * @param {String} channel - channel name on which you want to publish a message
	 * @return a string that represents the routing key for that channel
	 */
	AmqpClient.prototype.routingKeyFor = function (channel) {
	  return this.deviceId().concat('.',channel);
	};

	module.exports = AmqpClient;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer, __webpack_require__(6)))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = __webpack_require__(3)
	var ieee754 = __webpack_require__(4)
	var isArray = __webpack_require__(5)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var kMaxLength = 0x3fffffff
	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
	    return fromTypedArray(that, object)
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength.toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = String(string)

	  if (string.length === 0) return 0

	  switch (encoding || 'utf8') {
	    case 'ascii':
	    case 'binary':
	    case 'raw':
	      return string.length
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return string.length * 2
	    case 'hex':
	      return string.length >>> 1
	    case 'utf8':
	    case 'utf-8':
	      return utf8ToBytes(string).length
	    case 'base64':
	      return base64ToBytes(string).length
	    default:
	      return string.length
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	// toString(encoding, start=0, end=buffer.length)
	Buffer.prototype.toString = function toString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }

	  return res + decodeUtf8Char(tmp)
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start

	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	  var i = 0

	  for (; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (leadSurrogate) {
	        // 2 leads in a row
	        if (codePoint < 0xDC00) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          leadSurrogate = codePoint
	          continue
	        } else {
	          // valid surrogate pair
	          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	          leadSurrogate = null
	        }
	      } else {
	        // no lead yet

	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else {
	          // valid lead
	          leadSurrogate = codePoint
	          continue
	        }
	      }
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	      leadSurrogate = null
	    }

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x200000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}(false ? (this.base64js = {}) : exports))


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isLE ? (nBytes - 1) : 0,
	      d = isLE ? -1 : 1,
	      s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = isLE ? 0 : (nBytes - 1),
	      d = isLE ? 1 : -1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/*!
	 * @name JavaScript/NodeJS Merge v1.2.0
	 * @author yeikos
	 * @repository https://github.com/yeikos/js.merge

	 * Copyright 2014 yeikos - MIT license
	 * https://raw.github.com/yeikos/js.merge/master/LICENSE
	 */

	;(function(isNode) {

		/**
		 * Merge one or more objects 
		 * @param bool? clone
		 * @param mixed,... arguments
		 * @return object
		 */

		var Public = function(clone) {

			return merge(clone === true, false, arguments);

		}, publicName = 'merge';

		/**
		 * Merge two or more objects recursively 
		 * @param bool? clone
		 * @param mixed,... arguments
		 * @return object
		 */

		Public.recursive = function(clone) {

			return merge(clone === true, true, arguments);

		};

		/**
		 * Clone the input removing any reference
		 * @param mixed input
		 * @return mixed
		 */

		Public.clone = function(input) {

			var output = input,
				type = typeOf(input),
				index, size;

			if (type === 'array') {

				output = [];
				size = input.length;

				for (index=0;index<size;++index)

					output[index] = Public.clone(input[index]);

			} else if (type === 'object') {

				output = {};

				for (index in input)

					output[index] = Public.clone(input[index]);

			}

			return output;

		};

		/**
		 * Merge two objects recursively
		 * @param mixed input
		 * @param mixed extend
		 * @return mixed
		 */

		function merge_recursive(base, extend) {

			if (typeOf(base) !== 'object')

				return extend;

			for (var key in extend) {

				if (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {

					base[key] = merge_recursive(base[key], extend[key]);

				} else {

					base[key] = extend[key];

				}

			}

			return base;

		}

		/**
		 * Merge two or more objects
		 * @param bool clone
		 * @param bool recursive
		 * @param array argv
		 * @return object
		 */

		function merge(clone, recursive, argv) {

			var result = argv[0],
				size = argv.length;

			if (clone || typeOf(result) !== 'object')

				result = {};

			for (var index=0;index<size;++index) {

				var item = argv[index],

					type = typeOf(item);

				if (type !== 'object') continue;

				for (var key in item) {

					var sitem = clone ? Public.clone(item[key]) : item[key];

					if (recursive) {

						result[key] = merge_recursive(result[key], sitem);

					} else {

						result[key] = sitem;

					}

				}

			}

			return result;

		}

		/**
		 * Get type of variable
		 * @param mixed input
		 * @return string
		 *
		 * @see http://jsperf.com/typeofvar
		 */

		function typeOf(input) {

			return ({}).toString.call(input).slice(8, -1).toLowerCase();

		}

		if (isNode) {

			module.exports = Public;

		} else {

			window[publicName] = Public;

		}

	})(typeof module === 'object' && module && typeof module.exports === 'object' && module.exports);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)(module)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global, setImmediate) {/* @preserve
	 * The MIT License (MIT)
	 * 
	 * Copyright (c) 2014 Petka Antonov
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:</p>
	 * 
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 * 
	 */
	/**
	 * bluebird build version 2.9.25
	 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, cancel, using, filter, any, each, timers
	*/
	!function(e){if(true)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	var SomePromiseArray = Promise._SomePromiseArray;
	function any(promises) {
	    var ret = new SomePromiseArray(promises);
	    var promise = ret.promise();
	    ret.setHowMany(1);
	    ret.setUnwrap();
	    ret.init();
	    return promise;
	}

	Promise.any = function (promises) {
	    return any(promises);
	};

	Promise.prototype.any = function () {
	    return any(this);
	};

	};

	},{}],2:[function(_dereq_,module,exports){
	"use strict";
	var firstLineError;
	try {throw new Error(); } catch (e) {firstLineError = e;}
	var schedule = _dereq_("./schedule.js");
	var Queue = _dereq_("./queue.js");
	var util = _dereq_("./util.js");

	function Async() {
	    this._isTickUsed = false;
	    this._lateQueue = new Queue(16);
	    this._normalQueue = new Queue(16);
	    this._trampolineEnabled = true;
	    var self = this;
	    this.drainQueues = function () {
	        self._drainQueues();
	    };
	    this._schedule =
	        schedule.isStatic ? schedule(this.drainQueues) : schedule;
	}

	Async.prototype.disableTrampolineIfNecessary = function() {
	    if (util.hasDevTools) {
	        this._trampolineEnabled = false;
	    }
	};

	Async.prototype.enableTrampoline = function() {
	    if (!this._trampolineEnabled) {
	        this._trampolineEnabled = true;
	        this._schedule = function(fn) {
	            setTimeout(fn, 0);
	        };
	    }
	};

	Async.prototype.haveItemsQueued = function () {
	    return this._normalQueue.length() > 0;
	};

	Async.prototype.throwLater = function(fn, arg) {
	    if (arguments.length === 1) {
	        arg = fn;
	        fn = function () { throw arg; };
	    }
	    var domain = this._getDomain();
	    if (domain !== undefined) fn = domain.bind(fn);
	    if (typeof setTimeout !== "undefined") {
	        setTimeout(function() {
	            fn(arg);
	        }, 0);
	    } else try {
	        this._schedule(function() {
	            fn(arg);
	        });
	    } catch (e) {
	        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
	    }
	};

	Async.prototype._getDomain = function() {};

	if (false) {
	if (util.isNode) {
	    var EventsModule = _dereq_("events");

	    var domainGetter = function() {
	        var domain = process.domain;
	        if (domain === null) return undefined;
	        return domain;
	    };

	    if (EventsModule.usingDomains) {
	        Async.prototype._getDomain = domainGetter;
	    } else {
	        var descriptor =
	            Object.getOwnPropertyDescriptor(EventsModule, "usingDomains");

	        if (descriptor) {
	            if (!descriptor.configurable) {
	                process.on("domainsActivated", function() {
	                    Async.prototype._getDomain = domainGetter;
	                });
	            } else {
	                var usingDomains = false;
	                Object.defineProperty(EventsModule, "usingDomains", {
	                    configurable: false,
	                    enumerable: true,
	                    get: function() {
	                        return usingDomains;
	                    },
	                    set: function(value) {
	                        if (usingDomains || !value) return;
	                        usingDomains = true;
	                        Async.prototype._getDomain = domainGetter;
	                        util.toFastProperties(process);
	                        process.emit("domainsActivated");
	                    }
	                });
	            }
	        }
	    }
	}
	}

	function AsyncInvokeLater(fn, receiver, arg) {
	    var domain = this._getDomain();
	    if (domain !== undefined) fn = domain.bind(fn);
	    this._lateQueue.push(fn, receiver, arg);
	    this._queueTick();
	}

	function AsyncInvoke(fn, receiver, arg) {
	    var domain = this._getDomain();
	    if (domain !== undefined) fn = domain.bind(fn);
	    this._normalQueue.push(fn, receiver, arg);
	    this._queueTick();
	}

	function AsyncSettlePromises(promise) {
	    var domain = this._getDomain();
	    if (domain !== undefined) {
	        var fn = domain.bind(promise._settlePromises);
	        this._normalQueue.push(fn, promise, undefined);
	    } else {
	        this._normalQueue._pushOne(promise);
	    }
	    this._queueTick();
	}

	if (!util.hasDevTools) {
	    Async.prototype.invokeLater = AsyncInvokeLater;
	    Async.prototype.invoke = AsyncInvoke;
	    Async.prototype.settlePromises = AsyncSettlePromises;
	} else {
	    Async.prototype.invokeLater = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvokeLater.call(this, fn, receiver, arg);
	        } else {
	            setTimeout(function() {
	                fn.call(receiver, arg);
	            }, 100);
	        }
	    };

	    Async.prototype.invoke = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvoke.call(this, fn, receiver, arg);
	        } else {
	            setTimeout(function() {
	                fn.call(receiver, arg);
	            }, 0);
	        }
	    };

	    Async.prototype.settlePromises = function(promise) {
	        if (this._trampolineEnabled) {
	            AsyncSettlePromises.call(this, promise);
	        } else {
	            setTimeout(function() {
	                promise._settlePromises();
	            }, 0);
	        }
	    };
	}

	Async.prototype.invokeFirst = function (fn, receiver, arg) {
	    var domain = this._getDomain();
	    if (domain !== undefined) fn = domain.bind(fn);
	    this._normalQueue.unshift(fn, receiver, arg);
	    this._queueTick();
	};

	Async.prototype._drainQueue = function(queue) {
	    while (queue.length() > 0) {
	        var fn = queue.shift();
	        if (typeof fn !== "function") {
	            fn._settlePromises();
	            continue;
	        }
	        var receiver = queue.shift();
	        var arg = queue.shift();
	        fn.call(receiver, arg);
	    }
	};

	Async.prototype._drainQueues = function () {
	    this._drainQueue(this._normalQueue);
	    this._reset();
	    this._drainQueue(this._lateQueue);
	};

	Async.prototype._queueTick = function () {
	    if (!this._isTickUsed) {
	        this._isTickUsed = true;
	        this._schedule(this.drainQueues);
	    }
	};

	Async.prototype._reset = function () {
	    this._isTickUsed = false;
	};

	module.exports = new Async();
	module.exports.firstLineError = firstLineError;

	},{"./queue.js":28,"./schedule.js":31,"./util.js":38,"events":39}],3:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL, tryConvertToPromise) {
	var rejectThis = function(_, e) {
	    this._reject(e);
	};

	var targetRejected = function(e, context) {
	    context.promiseRejectionQueued = true;
	    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
	};

	var bindingResolved = function(thisArg, context) {
	    this._setBoundTo(thisArg);
	    if (this._isPending()) {
	        this._resolveCallback(context.target);
	    }
	};

	var bindingRejected = function(e, context) {
	    if (!context.promiseRejectionQueued) this._reject(e);
	};

	Promise.prototype.bind = function (thisArg) {
	    var maybePromise = tryConvertToPromise(thisArg);
	    var ret = new Promise(INTERNAL);
	    ret._propagateFrom(this, 1);
	    var target = this._target();
	    if (maybePromise instanceof Promise) {
	        var context = {
	            promiseRejectionQueued: false,
	            promise: ret,
	            target: target,
	            bindingPromise: maybePromise
	        };
	        target._then(INTERNAL, targetRejected, ret._progress, ret, context);
	        maybePromise._then(
	            bindingResolved, bindingRejected, ret._progress, ret, context);
	    } else {
	        ret._setBoundTo(thisArg);
	        ret._resolveCallback(target);
	    }
	    return ret;
	};

	Promise.prototype._setBoundTo = function (obj) {
	    if (obj !== undefined) {
	        this._bitField = this._bitField | 131072;
	        this._boundTo = obj;
	    } else {
	        this._bitField = this._bitField & (~131072);
	    }
	};

	Promise.prototype._isBound = function () {
	    return (this._bitField & 131072) === 131072;
	};

	Promise.bind = function (thisArg, value) {
	    var maybePromise = tryConvertToPromise(thisArg);
	    var ret = new Promise(INTERNAL);

	    if (maybePromise instanceof Promise) {
	        maybePromise._then(function(thisArg) {
	            ret._setBoundTo(thisArg);
	            ret._resolveCallback(value);
	        }, ret._reject, ret._progress, ret, null);
	    } else {
	        ret._setBoundTo(thisArg);
	        ret._resolveCallback(value);
	    }
	    return ret;
	};
	};

	},{}],4:[function(_dereq_,module,exports){
	"use strict";
	var old;
	if (typeof Promise !== "undefined") old = Promise;
	function noConflict() {
	    try { if (Promise === bluebird) Promise = old; }
	    catch (e) {}
	    return bluebird;
	}
	var bluebird = _dereq_("./promise.js")();
	bluebird.noConflict = noConflict;
	module.exports = bluebird;

	},{"./promise.js":23}],5:[function(_dereq_,module,exports){
	"use strict";
	var cr = Object.create;
	if (cr) {
	    var callerCache = cr(null);
	    var getterCache = cr(null);
	    callerCache[" size"] = getterCache[" size"] = 0;
	}

	module.exports = function(Promise) {
	var util = _dereq_("./util.js");
	var canEvaluate = util.canEvaluate;
	var isIdentifier = util.isIdentifier;

	var getMethodCaller;
	var getGetter;
	if (false) {
	var makeMethodCaller = function (methodName) {
	    return new Function("ensureMethod", "                                    \n\
	        return function(obj) {                                               \n\
	            'use strict'                                                     \n\
	            var len = this.length;                                           \n\
	            ensureMethod(obj, 'methodName');                                 \n\
	            switch(len) {                                                    \n\
	                case 1: return obj.methodName(this[0]);                      \n\
	                case 2: return obj.methodName(this[0], this[1]);             \n\
	                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
	                case 0: return obj.methodName();                             \n\
	                default:                                                     \n\
	                    return obj.methodName.apply(obj, this);                  \n\
	            }                                                                \n\
	        };                                                                   \n\
	        ".replace(/methodName/g, methodName))(ensureMethod);
	};

	var makeGetter = function (propertyName) {
	    return new Function("obj", "                                             \n\
	        'use strict';                                                        \n\
	        return obj.propertyName;                                             \n\
	        ".replace("propertyName", propertyName));
	};

	var getCompiled = function(name, compiler, cache) {
	    var ret = cache[name];
	    if (typeof ret !== "function") {
	        if (!isIdentifier(name)) {
	            return null;
	        }
	        ret = compiler(name);
	        cache[name] = ret;
	        cache[" size"]++;
	        if (cache[" size"] > 512) {
	            var keys = Object.keys(cache);
	            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
	            cache[" size"] = keys.length - 256;
	        }
	    }
	    return ret;
	};

	getMethodCaller = function(name) {
	    return getCompiled(name, makeMethodCaller, callerCache);
	};

	getGetter = function(name) {
	    return getCompiled(name, makeGetter, getterCache);
	};
	}

	function ensureMethod(obj, methodName) {
	    var fn;
	    if (obj != null) fn = obj[methodName];
	    if (typeof fn !== "function") {
	        var message = "Object " + util.classString(obj) + " has no method '" +
	            util.toString(methodName) + "'";
	        throw new Promise.TypeError(message);
	    }
	    return fn;
	}

	function caller(obj) {
	    var methodName = this.pop();
	    var fn = ensureMethod(obj, methodName);
	    return fn.apply(obj, this);
	}
	Promise.prototype.call = function (methodName) {
	    var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
	    if (false) {
	        if (canEvaluate) {
	            var maybeCaller = getMethodCaller(methodName);
	            if (maybeCaller !== null) {
	                return this._then(
	                    maybeCaller, undefined, undefined, args, undefined);
	            }
	        }
	    }
	    args.push(methodName);
	    return this._then(caller, undefined, undefined, args, undefined);
	};

	function namedGetter(obj) {
	    return obj[this];
	}
	function indexedGetter(obj) {
	    var index = +this;
	    if (index < 0) index = Math.max(0, index + obj.length);
	    return obj[index];
	}
	Promise.prototype.get = function (propertyName) {
	    var isIndex = (typeof propertyName === "number");
	    var getter;
	    if (!isIndex) {
	        if (canEvaluate) {
	            var maybeGetter = getGetter(propertyName);
	            getter = maybeGetter !== null ? maybeGetter : namedGetter;
	        } else {
	            getter = namedGetter;
	        }
	    } else {
	        getter = indexedGetter;
	    }
	    return this._then(getter, undefined, undefined, propertyName, undefined);
	};
	};

	},{"./util.js":38}],6:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	var errors = _dereq_("./errors.js");
	var async = _dereq_("./async.js");
	var CancellationError = errors.CancellationError;

	Promise.prototype._cancel = function (reason) {
	    if (!this.isCancellable()) return this;
	    var parent;
	    var promiseToReject = this;
	    while ((parent = promiseToReject._cancellationParent) !== undefined &&
	        parent.isCancellable()) {
	        promiseToReject = parent;
	    }
	    this._unsetCancellable();
	    promiseToReject._target()._rejectCallback(reason, false, true);
	};

	Promise.prototype.cancel = function (reason) {
	    if (!this.isCancellable()) return this;
	    if (reason === undefined) reason = new CancellationError();
	    async.invokeLater(this._cancel, this, reason);
	    return this;
	};

	Promise.prototype.cancellable = function () {
	    if (this._cancellable()) return this;
	    async.enableTrampoline();
	    this._setCancellable();
	    this._cancellationParent = undefined;
	    return this;
	};

	Promise.prototype.uncancellable = function () {
	    var ret = this.then();
	    ret._unsetCancellable();
	    return ret;
	};

	Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
	    var ret = this._then(didFulfill, didReject, didProgress,
	                         undefined, undefined);

	    ret._setCancellable();
	    ret._cancellationParent = undefined;
	    return ret;
	};
	};

	},{"./async.js":2,"./errors.js":13}],7:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function() {
	var async = _dereq_("./async.js");
	var util = _dereq_("./util.js");
	var bluebirdFramePattern =
	    /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
	var stackFramePattern = null;
	var formatStack = null;
	var indentStackFrames = false;
	var warn;

	function CapturedTrace(parent) {
	    this._parent = parent;
	    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
	    captureStackTrace(this, CapturedTrace);
	    if (length > 32) this.uncycle();
	}
	util.inherits(CapturedTrace, Error);

	CapturedTrace.prototype.uncycle = function() {
	    var length = this._length;
	    if (length < 2) return;
	    var nodes = [];
	    var stackToIndex = {};

	    for (var i = 0, node = this; node !== undefined; ++i) {
	        nodes.push(node);
	        node = node._parent;
	    }
	    length = this._length = i;
	    for (var i = length - 1; i >= 0; --i) {
	        var stack = nodes[i].stack;
	        if (stackToIndex[stack] === undefined) {
	            stackToIndex[stack] = i;
	        }
	    }
	    for (var i = 0; i < length; ++i) {
	        var currentStack = nodes[i].stack;
	        var index = stackToIndex[currentStack];
	        if (index !== undefined && index !== i) {
	            if (index > 0) {
	                nodes[index - 1]._parent = undefined;
	                nodes[index - 1]._length = 1;
	            }
	            nodes[i]._parent = undefined;
	            nodes[i]._length = 1;
	            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

	            if (index < length - 1) {
	                cycleEdgeNode._parent = nodes[index + 1];
	                cycleEdgeNode._parent.uncycle();
	                cycleEdgeNode._length =
	                    cycleEdgeNode._parent._length + 1;
	            } else {
	                cycleEdgeNode._parent = undefined;
	                cycleEdgeNode._length = 1;
	            }
	            var currentChildLength = cycleEdgeNode._length + 1;
	            for (var j = i - 2; j >= 0; --j) {
	                nodes[j]._length = currentChildLength;
	                currentChildLength++;
	            }
	            return;
	        }
	    }
	};

	CapturedTrace.prototype.parent = function() {
	    return this._parent;
	};

	CapturedTrace.prototype.hasParent = function() {
	    return this._parent !== undefined;
	};

	CapturedTrace.prototype.attachExtraTrace = function(error) {
	    if (error.__stackCleaned__) return;
	    this.uncycle();
	    var parsed = CapturedTrace.parseStackAndMessage(error);
	    var message = parsed.message;
	    var stacks = [parsed.stack];

	    var trace = this;
	    while (trace !== undefined) {
	        stacks.push(cleanStack(trace.stack.split("\n")));
	        trace = trace._parent;
	    }
	    removeCommonRoots(stacks);
	    removeDuplicateOrEmptyJumps(stacks);
	    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
	    util.notEnumerableProp(error, "__stackCleaned__", true);
	};

	function reconstructStack(message, stacks) {
	    for (var i = 0; i < stacks.length - 1; ++i) {
	        stacks[i].push("From previous event:");
	        stacks[i] = stacks[i].join("\n");
	    }
	    if (i < stacks.length) {
	        stacks[i] = stacks[i].join("\n");
	    }
	    return message + "\n" + stacks.join("\n");
	}

	function removeDuplicateOrEmptyJumps(stacks) {
	    for (var i = 0; i < stacks.length; ++i) {
	        if (stacks[i].length === 0 ||
	            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
	            stacks.splice(i, 1);
	            i--;
	        }
	    }
	}

	function removeCommonRoots(stacks) {
	    var current = stacks[0];
	    for (var i = 1; i < stacks.length; ++i) {
	        var prev = stacks[i];
	        var currentLastIndex = current.length - 1;
	        var currentLastLine = current[currentLastIndex];
	        var commonRootMeetPoint = -1;

	        for (var j = prev.length - 1; j >= 0; --j) {
	            if (prev[j] === currentLastLine) {
	                commonRootMeetPoint = j;
	                break;
	            }
	        }

	        for (var j = commonRootMeetPoint; j >= 0; --j) {
	            var line = prev[j];
	            if (current[currentLastIndex] === line) {
	                current.pop();
	                currentLastIndex--;
	            } else {
	                break;
	            }
	        }
	        current = prev;
	    }
	}

	function cleanStack(stack) {
	    var ret = [];
	    for (var i = 0; i < stack.length; ++i) {
	        var line = stack[i];
	        var isTraceLine = stackFramePattern.test(line) ||
	            "    (No stack trace)" === line;
	        var isInternalFrame = isTraceLine && shouldIgnore(line);
	        if (isTraceLine && !isInternalFrame) {
	            if (indentStackFrames && line.charAt(0) !== " ") {
	                line = "    " + line;
	            }
	            ret.push(line);
	        }
	    }
	    return ret;
	}

	function stackFramesAsArray(error) {
	    var stack = error.stack.replace(/\s+$/g, "").split("\n");
	    for (var i = 0; i < stack.length; ++i) {
	        var line = stack[i];
	        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
	            break;
	        }
	    }
	    if (i > 0) {
	        stack = stack.slice(i);
	    }
	    return stack;
	}

	CapturedTrace.parseStackAndMessage = function(error) {
	    var stack = error.stack;
	    var message = error.toString();
	    stack = typeof stack === "string" && stack.length > 0
	                ? stackFramesAsArray(error) : ["    (No stack trace)"];
	    return {
	        message: message,
	        stack: cleanStack(stack)
	    };
	};

	CapturedTrace.formatAndLogError = function(error, title) {
	    if (typeof console !== "undefined") {
	        var message;
	        if (typeof error === "object" || typeof error === "function") {
	            var stack = error.stack;
	            message = title + formatStack(stack, error);
	        } else {
	            message = title + String(error);
	        }
	        if (typeof warn === "function") {
	            warn(message);
	        } else if (typeof console.log === "function" ||
	            typeof console.log === "object") {
	            console.log(message);
	        }
	    }
	};

	CapturedTrace.unhandledRejection = function (reason) {
	    CapturedTrace.formatAndLogError(reason, "^--- With additional stack trace: ");
	};

	CapturedTrace.isSupported = function () {
	    return typeof captureStackTrace === "function";
	};

	CapturedTrace.fireRejectionEvent =
	function(name, localHandler, reason, promise) {
	    var localEventFired = false;
	    try {
	        if (typeof localHandler === "function") {
	            localEventFired = true;
	            if (name === "rejectionHandled") {
	                localHandler(promise);
	            } else {
	                localHandler(reason, promise);
	            }
	        }
	    } catch (e) {
	        async.throwLater(e);
	    }

	    var globalEventFired = false;
	    try {
	        globalEventFired = fireGlobalEvent(name, reason, promise);
	    } catch (e) {
	        globalEventFired = true;
	        async.throwLater(e);
	    }

	    var domEventFired = false;
	    if (fireDomEvent) {
	        try {
	            domEventFired = fireDomEvent(name.toLowerCase(), {
	                reason: reason,
	                promise: promise
	            });
	        } catch (e) {
	            domEventFired = true;
	            async.throwLater(e);
	        }
	    }

	    if (!globalEventFired && !localEventFired && !domEventFired &&
	        name === "unhandledRejection") {
	        CapturedTrace.formatAndLogError(reason, "Unhandled rejection ");
	    }
	};

	function formatNonError(obj) {
	    var str;
	    if (typeof obj === "function") {
	        str = "[function " +
	            (obj.name || "anonymous") +
	            "]";
	    } else {
	        str = obj.toString();
	        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
	        if (ruselessToString.test(str)) {
	            try {
	                var newStr = JSON.stringify(obj);
	                str = newStr;
	            }
	            catch(e) {

	            }
	        }
	        if (str.length === 0) {
	            str = "(empty array)";
	        }
	    }
	    return ("(<" + snip(str) + ">, no stack trace)");
	}

	function snip(str) {
	    var maxChars = 41;
	    if (str.length < maxChars) {
	        return str;
	    }
	    return str.substr(0, maxChars - 3) + "...";
	}

	var shouldIgnore = function() { return false; };
	var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
	function parseLineInfo(line) {
	    var matches = line.match(parseLineInfoRegex);
	    if (matches) {
	        return {
	            fileName: matches[1],
	            line: parseInt(matches[2], 10)
	        };
	    }
	}
	CapturedTrace.setBounds = function(firstLineError, lastLineError) {
	    if (!CapturedTrace.isSupported()) return;
	    var firstStackLines = firstLineError.stack.split("\n");
	    var lastStackLines = lastLineError.stack.split("\n");
	    var firstIndex = -1;
	    var lastIndex = -1;
	    var firstFileName;
	    var lastFileName;
	    for (var i = 0; i < firstStackLines.length; ++i) {
	        var result = parseLineInfo(firstStackLines[i]);
	        if (result) {
	            firstFileName = result.fileName;
	            firstIndex = result.line;
	            break;
	        }
	    }
	    for (var i = 0; i < lastStackLines.length; ++i) {
	        var result = parseLineInfo(lastStackLines[i]);
	        if (result) {
	            lastFileName = result.fileName;
	            lastIndex = result.line;
	            break;
	        }
	    }
	    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
	        firstFileName !== lastFileName || firstIndex >= lastIndex) {
	        return;
	    }

	    shouldIgnore = function(line) {
	        if (bluebirdFramePattern.test(line)) return true;
	        var info = parseLineInfo(line);
	        if (info) {
	            if (info.fileName === firstFileName &&
	                (firstIndex <= info.line && info.line <= lastIndex)) {
	                return true;
	            }
	        }
	        return false;
	    };
	};

	var captureStackTrace = (function stackDetection() {
	    var v8stackFramePattern = /^\s*at\s*/;
	    var v8stackFormatter = function(stack, error) {
	        if (typeof stack === "string") return stack;

	        if (error.name !== undefined &&
	            error.message !== undefined) {
	            return error.toString();
	        }
	        return formatNonError(error);
	    };

	    if (typeof Error.stackTraceLimit === "number" &&
	        typeof Error.captureStackTrace === "function") {
	        Error.stackTraceLimit = Error.stackTraceLimit + 6;
	        stackFramePattern = v8stackFramePattern;
	        formatStack = v8stackFormatter;
	        var captureStackTrace = Error.captureStackTrace;

	        shouldIgnore = function(line) {
	            return bluebirdFramePattern.test(line);
	        };
	        return function(receiver, ignoreUntil) {
	            Error.stackTraceLimit = Error.stackTraceLimit + 6;
	            captureStackTrace(receiver, ignoreUntil);
	            Error.stackTraceLimit = Error.stackTraceLimit - 6;
	        };
	    }
	    var err = new Error();

	    if (typeof err.stack === "string" &&
	        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
	        stackFramePattern = /@/;
	        formatStack = v8stackFormatter;
	        indentStackFrames = true;
	        return function captureStackTrace(o) {
	            o.stack = new Error().stack;
	        };
	    }

	    var hasStackAfterThrow;
	    try { throw new Error(); }
	    catch(e) {
	        hasStackAfterThrow = ("stack" in e);
	    }
	    if (!("stack" in err) && hasStackAfterThrow) {
	        stackFramePattern = v8stackFramePattern;
	        formatStack = v8stackFormatter;
	        return function captureStackTrace(o) {
	            Error.stackTraceLimit = Error.stackTraceLimit + 6;
	            try { throw new Error(); }
	            catch(e) { o.stack = e.stack; }
	            Error.stackTraceLimit = Error.stackTraceLimit - 6;
	        };
	    }

	    formatStack = function(stack, error) {
	        if (typeof stack === "string") return stack;

	        if ((typeof error === "object" ||
	            typeof error === "function") &&
	            error.name !== undefined &&
	            error.message !== undefined) {
	            return error.toString();
	        }
	        return formatNonError(error);
	    };

	    return null;

	})([]);

	var fireDomEvent;
	var fireGlobalEvent = (function() {
	    if (util.isNode) {
	        return function(name, reason, promise) {
	            if (name === "rejectionHandled") {
	                return process.emit(name, promise);
	            } else {
	                return process.emit(name, reason, promise);
	            }
	        };
	    } else {
	        var customEventWorks = false;
	        var anyEventWorks = true;
	        try {
	            var ev = new self.CustomEvent("test");
	            customEventWorks = ev instanceof CustomEvent;
	        } catch (e) {}
	        if (!customEventWorks) {
	            try {
	                var event = document.createEvent("CustomEvent");
	                event.initCustomEvent("testingtheevent", false, true, {});
	                self.dispatchEvent(event);
	            } catch (e) {
	                anyEventWorks = false;
	            }
	        }
	        if (anyEventWorks) {
	            fireDomEvent = function(type, detail) {
	                var event;
	                if (customEventWorks) {
	                    event = new self.CustomEvent(type, {
	                        detail: detail,
	                        bubbles: false,
	                        cancelable: true
	                    });
	                } else if (self.dispatchEvent) {
	                    event = document.createEvent("CustomEvent");
	                    event.initCustomEvent(type, false, true, detail);
	                }

	                return event ? !self.dispatchEvent(event) : false;
	            };
	        }

	        var toWindowMethodNameMap = {};
	        toWindowMethodNameMap["unhandledRejection"] = ("on" +
	            "unhandledRejection").toLowerCase();
	        toWindowMethodNameMap["rejectionHandled"] = ("on" +
	            "rejectionHandled").toLowerCase();

	        return function(name, reason, promise) {
	            var methodName = toWindowMethodNameMap[name];
	            var method = self[methodName];
	            if (!method) return false;
	            if (name === "rejectionHandled") {
	                method.call(self, promise);
	            } else {
	                method.call(self, reason, promise);
	            }
	            return true;
	        };
	    }
	})();

	if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
	    warn = function (message) {
	        console.warn(message);
	    };
	    if (util.isNode && process.stderr.isTTY) {
	        warn = function(message) {
	            process.stderr.write("\u001b[31m" + message + "\u001b[39m\n");
	        };
	    } else if (!util.isNode && typeof (new Error().stack) === "string") {
	        warn = function(message) {
	            console.warn("%c" + message, "color: red");
	        };
	    }
	}

	return CapturedTrace;
	};

	},{"./async.js":2,"./util.js":38}],8:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(NEXT_FILTER) {
	var util = _dereq_("./util.js");
	var errors = _dereq_("./errors.js");
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var keys = _dereq_("./es5.js").keys;
	var TypeError = errors.TypeError;

	function CatchFilter(instances, callback, promise) {
	    this._instances = instances;
	    this._callback = callback;
	    this._promise = promise;
	}

	function safePredicate(predicate, e) {
	    var safeObject = {};
	    var retfilter = tryCatch(predicate).call(safeObject, e);

	    if (retfilter === errorObj) return retfilter;

	    var safeKeys = keys(safeObject);
	    if (safeKeys.length) {
	        errorObj.e = new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a");
	        return errorObj;
	    }
	    return retfilter;
	}

	CatchFilter.prototype.doFilter = function (e) {
	    var cb = this._callback;
	    var promise = this._promise;
	    var boundTo = promise._boundTo;
	    for (var i = 0, len = this._instances.length; i < len; ++i) {
	        var item = this._instances[i];
	        var itemIsErrorType = item === Error ||
	            (item != null && item.prototype instanceof Error);

	        if (itemIsErrorType && e instanceof item) {
	            var ret = tryCatch(cb).call(boundTo, e);
	            if (ret === errorObj) {
	                NEXT_FILTER.e = ret.e;
	                return NEXT_FILTER;
	            }
	            return ret;
	        } else if (typeof item === "function" && !itemIsErrorType) {
	            var shouldHandle = safePredicate(item, e);
	            if (shouldHandle === errorObj) {
	                e = errorObj.e;
	                break;
	            } else if (shouldHandle) {
	                var ret = tryCatch(cb).call(boundTo, e);
	                if (ret === errorObj) {
	                    NEXT_FILTER.e = ret.e;
	                    return NEXT_FILTER;
	                }
	                return ret;
	            }
	        }
	    }
	    NEXT_FILTER.e = e;
	    return NEXT_FILTER;
	};

	return CatchFilter;
	};

	},{"./errors.js":13,"./es5.js":14,"./util.js":38}],9:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, CapturedTrace, isDebugging) {
	var contextStack = [];
	function Context() {
	    this._trace = new CapturedTrace(peekContext());
	}
	Context.prototype._pushContext = function () {
	    if (!isDebugging()) return;
	    if (this._trace !== undefined) {
	        contextStack.push(this._trace);
	    }
	};

	Context.prototype._popContext = function () {
	    if (!isDebugging()) return;
	    if (this._trace !== undefined) {
	        contextStack.pop();
	    }
	};

	function createContext() {
	    if (isDebugging()) return new Context();
	}

	function peekContext() {
	    var lastIndex = contextStack.length - 1;
	    if (lastIndex >= 0) {
	        return contextStack[lastIndex];
	    }
	    return undefined;
	}

	Promise.prototype._peekContext = peekContext;
	Promise.prototype._pushContext = Context.prototype._pushContext;
	Promise.prototype._popContext = Context.prototype._popContext;

	return createContext;
	};

	},{}],10:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, CapturedTrace) {
	var async = _dereq_("./async.js");
	var Warning = _dereq_("./errors.js").Warning;
	var util = _dereq_("./util.js");
	var canAttachTrace = util.canAttachTrace;
	var unhandledRejectionHandled;
	var possiblyUnhandledRejection;
	var debugging = false || (util.isNode &&
	                    (!!process.env["BLUEBIRD_DEBUG"] ||
	                     process.env["NODE_ENV"] === "development"));

	if (debugging) {
	    async.disableTrampolineIfNecessary();
	}

	Promise.prototype._ensurePossibleRejectionHandled = function () {
	    this._setRejectionIsUnhandled();
	    async.invokeLater(this._notifyUnhandledRejection, this, undefined);
	};

	Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
	    CapturedTrace.fireRejectionEvent("rejectionHandled",
	                                  unhandledRejectionHandled, undefined, this);
	};

	Promise.prototype._notifyUnhandledRejection = function () {
	    if (this._isRejectionUnhandled()) {
	        var reason = this._getCarriedStackTrace() || this._settledValue;
	        this._setUnhandledRejectionIsNotified();
	        CapturedTrace.fireRejectionEvent("unhandledRejection",
	                                      possiblyUnhandledRejection, reason, this);
	    }
	};

	Promise.prototype._setUnhandledRejectionIsNotified = function () {
	    this._bitField = this._bitField | 524288;
	};

	Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
	    this._bitField = this._bitField & (~524288);
	};

	Promise.prototype._isUnhandledRejectionNotified = function () {
	    return (this._bitField & 524288) > 0;
	};

	Promise.prototype._setRejectionIsUnhandled = function () {
	    this._bitField = this._bitField | 2097152;
	};

	Promise.prototype._unsetRejectionIsUnhandled = function () {
	    this._bitField = this._bitField & (~2097152);
	    if (this._isUnhandledRejectionNotified()) {
	        this._unsetUnhandledRejectionIsNotified();
	        this._notifyUnhandledRejectionIsHandled();
	    }
	};

	Promise.prototype._isRejectionUnhandled = function () {
	    return (this._bitField & 2097152) > 0;
	};

	Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
	    this._bitField = this._bitField | 1048576;
	    this._fulfillmentHandler0 = capturedTrace;
	};

	Promise.prototype._isCarryingStackTrace = function () {
	    return (this._bitField & 1048576) > 0;
	};

	Promise.prototype._getCarriedStackTrace = function () {
	    return this._isCarryingStackTrace()
	        ? this._fulfillmentHandler0
	        : undefined;
	};

	Promise.prototype._captureStackTrace = function () {
	    if (debugging) {
	        this._trace = new CapturedTrace(this._peekContext());
	    }
	    return this;
	};

	Promise.prototype._attachExtraTrace = function (error, ignoreSelf) {
	    if (debugging && canAttachTrace(error)) {
	        var trace = this._trace;
	        if (trace !== undefined) {
	            if (ignoreSelf) trace = trace._parent;
	        }
	        if (trace !== undefined) {
	            trace.attachExtraTrace(error);
	        } else if (!error.__stackCleaned__) {
	            var parsed = CapturedTrace.parseStackAndMessage(error);
	            util.notEnumerableProp(error, "stack",
	                parsed.message + "\n" + parsed.stack.join("\n"));
	            util.notEnumerableProp(error, "__stackCleaned__", true);
	        }
	    }
	};

	Promise.prototype._warn = function(message) {
	    var warning = new Warning(message);
	    var ctx = this._peekContext();
	    if (ctx) {
	        ctx.attachExtraTrace(warning);
	    } else {
	        var parsed = CapturedTrace.parseStackAndMessage(warning);
	        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
	    }
	    CapturedTrace.formatAndLogError(warning, "");
	};

	Promise.onPossiblyUnhandledRejection = function (fn) {
	    possiblyUnhandledRejection = typeof fn === "function" ? fn : undefined;
	};

	Promise.onUnhandledRejectionHandled = function (fn) {
	    unhandledRejectionHandled = typeof fn === "function" ? fn : undefined;
	};

	Promise.longStackTraces = function () {
	    if (async.haveItemsQueued() &&
	        debugging === false
	   ) {
	        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/DT1qyG\u000a");
	    }
	    debugging = CapturedTrace.isSupported();
	    if (debugging) {
	        async.disableTrampolineIfNecessary();
	    }
	};

	Promise.hasLongStackTraces = function () {
	    return debugging && CapturedTrace.isSupported();
	};

	if (!CapturedTrace.isSupported()) {
	    Promise.longStackTraces = function(){};
	    debugging = false;
	}

	return function() {
	    return debugging;
	};
	};

	},{"./async.js":2,"./errors.js":13,"./util.js":38}],11:[function(_dereq_,module,exports){
	"use strict";
	var util = _dereq_("./util.js");
	var isPrimitive = util.isPrimitive;
	var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;

	module.exports = function(Promise) {
	var returner = function () {
	    return this;
	};
	var thrower = function () {
	    throw this;
	};

	var wrapper = function (value, action) {
	    if (action === 1) {
	        return function () {
	            throw value;
	        };
	    } else if (action === 2) {
	        return function () {
	            return value;
	        };
	    }
	};


	Promise.prototype["return"] =
	Promise.prototype.thenReturn = function (value) {
	    if (wrapsPrimitiveReceiver && isPrimitive(value)) {
	        return this._then(
	            wrapper(value, 2),
	            undefined,
	            undefined,
	            undefined,
	            undefined
	       );
	    }
	    return this._then(returner, undefined, undefined, value, undefined);
	};

	Promise.prototype["throw"] =
	Promise.prototype.thenThrow = function (reason) {
	    if (wrapsPrimitiveReceiver && isPrimitive(reason)) {
	        return this._then(
	            wrapper(reason, 1),
	            undefined,
	            undefined,
	            undefined,
	            undefined
	       );
	    }
	    return this._then(thrower, undefined, undefined, reason, undefined);
	};
	};

	},{"./util.js":38}],12:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var PromiseReduce = Promise.reduce;

	Promise.prototype.each = function (fn) {
	    return PromiseReduce(this, fn, null, INTERNAL);
	};

	Promise.each = function (promises, fn) {
	    return PromiseReduce(promises, fn, null, INTERNAL);
	};
	};

	},{}],13:[function(_dereq_,module,exports){
	"use strict";
	var es5 = _dereq_("./es5.js");
	var Objectfreeze = es5.freeze;
	var util = _dereq_("./util.js");
	var inherits = util.inherits;
	var notEnumerableProp = util.notEnumerableProp;

	function subError(nameProperty, defaultMessage) {
	    function SubError(message) {
	        if (!(this instanceof SubError)) return new SubError(message);
	        notEnumerableProp(this, "message",
	            typeof message === "string" ? message : defaultMessage);
	        notEnumerableProp(this, "name", nameProperty);
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        } else {
	            Error.call(this);
	        }
	    }
	    inherits(SubError, Error);
	    return SubError;
	}

	var _TypeError, _RangeError;
	var Warning = subError("Warning", "warning");
	var CancellationError = subError("CancellationError", "cancellation error");
	var TimeoutError = subError("TimeoutError", "timeout error");
	var AggregateError = subError("AggregateError", "aggregate error");
	try {
	    _TypeError = TypeError;
	    _RangeError = RangeError;
	} catch(e) {
	    _TypeError = subError("TypeError", "type error");
	    _RangeError = subError("RangeError", "range error");
	}

	var methods = ("join pop push shift unshift slice filter forEach some " +
	    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

	for (var i = 0; i < methods.length; ++i) {
	    if (typeof Array.prototype[methods[i]] === "function") {
	        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
	    }
	}

	es5.defineProperty(AggregateError.prototype, "length", {
	    value: 0,
	    configurable: false,
	    writable: true,
	    enumerable: true
	});
	AggregateError.prototype["isOperational"] = true;
	var level = 0;
	AggregateError.prototype.toString = function() {
	    var indent = Array(level * 4 + 1).join(" ");
	    var ret = "\n" + indent + "AggregateError of:" + "\n";
	    level++;
	    indent = Array(level * 4 + 1).join(" ");
	    for (var i = 0; i < this.length; ++i) {
	        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
	        var lines = str.split("\n");
	        for (var j = 0; j < lines.length; ++j) {
	            lines[j] = indent + lines[j];
	        }
	        str = lines.join("\n");
	        ret += str + "\n";
	    }
	    level--;
	    return ret;
	};

	function OperationalError(message) {
	    if (!(this instanceof OperationalError))
	        return new OperationalError(message);
	    notEnumerableProp(this, "name", "OperationalError");
	    notEnumerableProp(this, "message", message);
	    this.cause = message;
	    this["isOperational"] = true;

	    if (message instanceof Error) {
	        notEnumerableProp(this, "message", message.message);
	        notEnumerableProp(this, "stack", message.stack);
	    } else if (Error.captureStackTrace) {
	        Error.captureStackTrace(this, this.constructor);
	    }

	}
	inherits(OperationalError, Error);

	var errorTypes = Error["__BluebirdErrorTypes__"];
	if (!errorTypes) {
	    errorTypes = Objectfreeze({
	        CancellationError: CancellationError,
	        TimeoutError: TimeoutError,
	        OperationalError: OperationalError,
	        RejectionError: OperationalError,
	        AggregateError: AggregateError
	    });
	    notEnumerableProp(Error, "__BluebirdErrorTypes__", errorTypes);
	}

	module.exports = {
	    Error: Error,
	    TypeError: _TypeError,
	    RangeError: _RangeError,
	    CancellationError: errorTypes.CancellationError,
	    OperationalError: errorTypes.OperationalError,
	    TimeoutError: errorTypes.TimeoutError,
	    AggregateError: errorTypes.AggregateError,
	    Warning: Warning
	};

	},{"./es5.js":14,"./util.js":38}],14:[function(_dereq_,module,exports){
	var isES5 = (function(){
	    "use strict";
	    return this === undefined;
	})();

	if (isES5) {
	    module.exports = {
	        freeze: Object.freeze,
	        defineProperty: Object.defineProperty,
	        getDescriptor: Object.getOwnPropertyDescriptor,
	        keys: Object.keys,
	        names: Object.getOwnPropertyNames,
	        getPrototypeOf: Object.getPrototypeOf,
	        isArray: Array.isArray,
	        isES5: isES5,
	        propertyIsWritable: function(obj, prop) {
	            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	            return !!(!descriptor || descriptor.writable || descriptor.set);
	        }
	    };
	} else {
	    var has = {}.hasOwnProperty;
	    var str = {}.toString;
	    var proto = {}.constructor.prototype;

	    var ObjectKeys = function (o) {
	        var ret = [];
	        for (var key in o) {
	            if (has.call(o, key)) {
	                ret.push(key);
	            }
	        }
	        return ret;
	    };

	    var ObjectGetDescriptor = function(o, key) {
	        return {value: o[key]};
	    };

	    var ObjectDefineProperty = function (o, key, desc) {
	        o[key] = desc.value;
	        return o;
	    };

	    var ObjectFreeze = function (obj) {
	        return obj;
	    };

	    var ObjectGetPrototypeOf = function (obj) {
	        try {
	            return Object(obj).constructor.prototype;
	        }
	        catch (e) {
	            return proto;
	        }
	    };

	    var ArrayIsArray = function (obj) {
	        try {
	            return str.call(obj) === "[object Array]";
	        }
	        catch(e) {
	            return false;
	        }
	    };

	    module.exports = {
	        isArray: ArrayIsArray,
	        keys: ObjectKeys,
	        names: ObjectKeys,
	        defineProperty: ObjectDefineProperty,
	        getDescriptor: ObjectGetDescriptor,
	        freeze: ObjectFreeze,
	        getPrototypeOf: ObjectGetPrototypeOf,
	        isES5: isES5,
	        propertyIsWritable: function() {
	            return true;
	        }
	    };
	}

	},{}],15:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var PromiseMap = Promise.map;

	Promise.prototype.filter = function (fn, options) {
	    return PromiseMap(this, fn, options, INTERNAL);
	};

	Promise.filter = function (promises, fn, options) {
	    return PromiseMap(promises, fn, options, INTERNAL);
	};
	};

	},{}],16:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, NEXT_FILTER, tryConvertToPromise) {
	var util = _dereq_("./util.js");
	var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;
	var isPrimitive = util.isPrimitive;
	var thrower = util.thrower;

	function returnThis() {
	    return this;
	}
	function throwThis() {
	    throw this;
	}
	function return$(r) {
	    return function() {
	        return r;
	    };
	}
	function throw$(r) {
	    return function() {
	        throw r;
	    };
	}
	function promisedFinally(ret, reasonOrValue, isFulfilled) {
	    var then;
	    if (wrapsPrimitiveReceiver && isPrimitive(reasonOrValue)) {
	        then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
	    } else {
	        then = isFulfilled ? returnThis : throwThis;
	    }
	    return ret._then(then, thrower, undefined, reasonOrValue, undefined);
	}

	function finallyHandler(reasonOrValue) {
	    var promise = this.promise;
	    var handler = this.handler;

	    var ret = promise._isBound()
	                    ? handler.call(promise._boundTo)
	                    : handler();

	    if (ret !== undefined) {
	        var maybePromise = tryConvertToPromise(ret, promise);
	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            return promisedFinally(maybePromise, reasonOrValue,
	                                    promise.isFulfilled());
	        }
	    }

	    if (promise.isRejected()) {
	        NEXT_FILTER.e = reasonOrValue;
	        return NEXT_FILTER;
	    } else {
	        return reasonOrValue;
	    }
	}

	function tapHandler(value) {
	    var promise = this.promise;
	    var handler = this.handler;

	    var ret = promise._isBound()
	                    ? handler.call(promise._boundTo, value)
	                    : handler(value);

	    if (ret !== undefined) {
	        var maybePromise = tryConvertToPromise(ret, promise);
	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            return promisedFinally(maybePromise, value, true);
	        }
	    }
	    return value;
	}

	Promise.prototype._passThroughHandler = function (handler, isFinally) {
	    if (typeof handler !== "function") return this.then();

	    var promiseAndHandler = {
	        promise: this,
	        handler: handler
	    };

	    return this._then(
	            isFinally ? finallyHandler : tapHandler,
	            isFinally ? finallyHandler : undefined, undefined,
	            promiseAndHandler, undefined);
	};

	Promise.prototype.lastly =
	Promise.prototype["finally"] = function (handler) {
	    return this._passThroughHandler(handler, true);
	};

	Promise.prototype.tap = function (handler) {
	    return this._passThroughHandler(handler, false);
	};
	};

	},{"./util.js":38}],17:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise,
	                          apiRejection,
	                          INTERNAL,
	                          tryConvertToPromise) {
	var errors = _dereq_("./errors.js");
	var TypeError = errors.TypeError;
	var util = _dereq_("./util.js");
	var errorObj = util.errorObj;
	var tryCatch = util.tryCatch;
	var yieldHandlers = [];

	function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
	    for (var i = 0; i < yieldHandlers.length; ++i) {
	        traceParent._pushContext();
	        var result = tryCatch(yieldHandlers[i])(value);
	        traceParent._popContext();
	        if (result === errorObj) {
	            traceParent._pushContext();
	            var ret = Promise.reject(errorObj.e);
	            traceParent._popContext();
	            return ret;
	        }
	        var maybePromise = tryConvertToPromise(result, traceParent);
	        if (maybePromise instanceof Promise) return maybePromise;
	    }
	    return null;
	}

	function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
	    var promise = this._promise = new Promise(INTERNAL);
	    promise._captureStackTrace();
	    this._stack = stack;
	    this._generatorFunction = generatorFunction;
	    this._receiver = receiver;
	    this._generator = undefined;
	    this._yieldHandlers = typeof yieldHandler === "function"
	        ? [yieldHandler].concat(yieldHandlers)
	        : yieldHandlers;
	}

	PromiseSpawn.prototype.promise = function () {
	    return this._promise;
	};

	PromiseSpawn.prototype._run = function () {
	    this._generator = this._generatorFunction.call(this._receiver);
	    this._receiver =
	        this._generatorFunction = undefined;
	    this._next(undefined);
	};

	PromiseSpawn.prototype._continue = function (result) {
	    if (result === errorObj) {
	        return this._promise._rejectCallback(result.e, false, true);
	    }

	    var value = result.value;
	    if (result.done === true) {
	        this._promise._resolveCallback(value);
	    } else {
	        var maybePromise = tryConvertToPromise(value, this._promise);
	        if (!(maybePromise instanceof Promise)) {
	            maybePromise =
	                promiseFromYieldHandler(maybePromise,
	                                        this._yieldHandlers,
	                                        this._promise);
	            if (maybePromise === null) {
	                this._throw(
	                    new TypeError(
	                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/4Y4pDk\u000a\u000a".replace("%s", value) +
	                        "From coroutine:\u000a" +
	                        this._stack.split("\n").slice(1, -7).join("\n")
	                    )
	                );
	                return;
	            }
	        }
	        maybePromise._then(
	            this._next,
	            this._throw,
	            undefined,
	            this,
	            null
	       );
	    }
	};

	PromiseSpawn.prototype._throw = function (reason) {
	    this._promise._attachExtraTrace(reason);
	    this._promise._pushContext();
	    var result = tryCatch(this._generator["throw"])
	        .call(this._generator, reason);
	    this._promise._popContext();
	    this._continue(result);
	};

	PromiseSpawn.prototype._next = function (value) {
	    this._promise._pushContext();
	    var result = tryCatch(this._generator.next).call(this._generator, value);
	    this._promise._popContext();
	    this._continue(result);
	};

	Promise.coroutine = function (generatorFunction, options) {
	    if (typeof generatorFunction !== "function") {
	        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
	    }
	    var yieldHandler = Object(options).yieldHandler;
	    var PromiseSpawn$ = PromiseSpawn;
	    var stack = new Error().stack;
	    return function () {
	        var generator = generatorFunction.apply(this, arguments);
	        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
	                                      stack);
	        spawn._generator = generator;
	        spawn._next(undefined);
	        return spawn.promise();
	    };
	};

	Promise.coroutine.addYieldHandler = function(fn) {
	    if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	    yieldHandlers.push(fn);
	};

	Promise.spawn = function (generatorFunction) {
	    if (typeof generatorFunction !== "function") {
	        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
	    }
	    var spawn = new PromiseSpawn(generatorFunction, this);
	    var ret = spawn.promise();
	    spawn._run(Promise.spawn);
	    return ret;
	};
	};

	},{"./errors.js":13,"./util.js":38}],18:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
	var util = _dereq_("./util.js");
	var canEvaluate = util.canEvaluate;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var reject;

	if (false) {
	if (canEvaluate) {
	    var thenCallback = function(i) {
	        return new Function("value", "holder", "                             \n\
	            'use strict';                                                    \n\
	            holder.pIndex = value;                                           \n\
	            holder.checkFulfillment(this);                                   \n\
	            ".replace(/Index/g, i));
	    };

	    var caller = function(count) {
	        var values = [];
	        for (var i = 1; i <= count; ++i) values.push("holder.p" + i);
	        return new Function("holder", "                                      \n\
	            'use strict';                                                    \n\
	            var callback = holder.fn;                                        \n\
	            return callback(values);                                         \n\
	            ".replace(/values/g, values.join(", ")));
	    };
	    var thenCallbacks = [];
	    var callers = [undefined];
	    for (var i = 1; i <= 5; ++i) {
	        thenCallbacks.push(thenCallback(i));
	        callers.push(caller(i));
	    }

	    var Holder = function(total, fn) {
	        this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
	        this.fn = fn;
	        this.total = total;
	        this.now = 0;
	    };

	    Holder.prototype.callers = callers;
	    Holder.prototype.checkFulfillment = function(promise) {
	        var now = this.now;
	        now++;
	        var total = this.total;
	        if (now >= total) {
	            var handler = this.callers[total];
	            promise._pushContext();
	            var ret = tryCatch(handler)(this);
	            promise._popContext();
	            if (ret === errorObj) {
	                promise._rejectCallback(ret.e, false, true);
	            } else {
	                promise._resolveCallback(ret);
	            }
	        } else {
	            this.now = now;
	        }
	    };

	    var reject = function (reason) {
	        this._reject(reason);
	    };
	}
	}

	Promise.join = function () {
	    var last = arguments.length - 1;
	    var fn;
	    if (last > 0 && typeof arguments[last] === "function") {
	        fn = arguments[last];
	        if (false) {
	            if (last < 6 && canEvaluate) {
	                var ret = new Promise(INTERNAL);
	                ret._captureStackTrace();
	                var holder = new Holder(last, fn);
	                var callbacks = thenCallbacks;
	                for (var i = 0; i < last; ++i) {
	                    var maybePromise = tryConvertToPromise(arguments[i], ret);
	                    if (maybePromise instanceof Promise) {
	                        maybePromise = maybePromise._target();
	                        if (maybePromise._isPending()) {
	                            maybePromise._then(callbacks[i], reject,
	                                               undefined, ret, holder);
	                        } else if (maybePromise._isFulfilled()) {
	                            callbacks[i].call(ret,
	                                              maybePromise._value(), holder);
	                        } else {
	                            ret._reject(maybePromise._reason());
	                        }
	                    } else {
	                        callbacks[i].call(ret, maybePromise, holder);
	                    }
	                }
	                return ret;
	            }
	        }
	    }
	    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];}
	    if (fn) args.pop();
	    var ret = new PromiseArray(args).promise();
	    return fn !== undefined ? ret.spread(fn) : ret;
	};

	};

	},{"./util.js":38}],19:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise,
	                          PromiseArray,
	                          apiRejection,
	                          tryConvertToPromise,
	                          INTERNAL) {
	var async = _dereq_("./async.js");
	var util = _dereq_("./util.js");
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var PENDING = {};
	var EMPTY_ARRAY = [];

	function MappingPromiseArray(promises, fn, limit, _filter) {
	    this.constructor$(promises);
	    this._promise._captureStackTrace();
	    this._callback = fn;
	    this._preservedValues = _filter === INTERNAL
	        ? new Array(this.length())
	        : null;
	    this._limit = limit;
	    this._inFlight = 0;
	    this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
	    async.invoke(init, this, undefined);
	}
	util.inherits(MappingPromiseArray, PromiseArray);
	function init() {this._init$(undefined, -2);}

	MappingPromiseArray.prototype._init = function () {};

	MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    var values = this._values;
	    var length = this.length();
	    var preservedValues = this._preservedValues;
	    var limit = this._limit;
	    if (values[index] === PENDING) {
	        values[index] = value;
	        if (limit >= 1) {
	            this._inFlight--;
	            this._drainQueue();
	            if (this._isResolved()) return;
	        }
	    } else {
	        if (limit >= 1 && this._inFlight >= limit) {
	            values[index] = value;
	            this._queue.push(index);
	            return;
	        }
	        if (preservedValues !== null) preservedValues[index] = value;

	        var callback = this._callback;
	        var receiver = this._promise._boundTo;
	        this._promise._pushContext();
	        var ret = tryCatch(callback).call(receiver, value, index, length);
	        this._promise._popContext();
	        if (ret === errorObj) return this._reject(ret.e);

	        var maybePromise = tryConvertToPromise(ret, this._promise);
	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            if (maybePromise._isPending()) {
	                if (limit >= 1) this._inFlight++;
	                values[index] = PENDING;
	                return maybePromise._proxyPromiseArray(this, index);
	            } else if (maybePromise._isFulfilled()) {
	                ret = maybePromise._value();
	            } else {
	                return this._reject(maybePromise._reason());
	            }
	        }
	        values[index] = ret;
	    }
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= length) {
	        if (preservedValues !== null) {
	            this._filter(values, preservedValues);
	        } else {
	            this._resolve(values);
	        }

	    }
	};

	MappingPromiseArray.prototype._drainQueue = function () {
	    var queue = this._queue;
	    var limit = this._limit;
	    var values = this._values;
	    while (queue.length > 0 && this._inFlight < limit) {
	        if (this._isResolved()) return;
	        var index = queue.pop();
	        this._promiseFulfilled(values[index], index);
	    }
	};

	MappingPromiseArray.prototype._filter = function (booleans, values) {
	    var len = values.length;
	    var ret = new Array(len);
	    var j = 0;
	    for (var i = 0; i < len; ++i) {
	        if (booleans[i]) ret[j++] = values[i];
	    }
	    ret.length = j;
	    this._resolve(ret);
	};

	MappingPromiseArray.prototype.preservedValues = function () {
	    return this._preservedValues;
	};

	function map(promises, fn, options, _filter) {
	    var limit = typeof options === "object" && options !== null
	        ? options.concurrency
	        : 0;
	    limit = typeof limit === "number" &&
	        isFinite(limit) && limit >= 1 ? limit : 0;
	    return new MappingPromiseArray(promises, fn, limit, _filter);
	}

	Promise.prototype.map = function (fn, options) {
	    if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");

	    return map(this, fn, options, null).promise();
	};

	Promise.map = function (promises, fn, options, _filter) {
	    if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	    return map(promises, fn, options, _filter).promise();
	};


	};

	},{"./async.js":2,"./util.js":38}],20:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
	var util = _dereq_("./util.js");
	var tryCatch = util.tryCatch;

	Promise.method = function (fn) {
	    if (typeof fn !== "function") {
	        throw new Promise.TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	    }
	    return function () {
	        var ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        ret._pushContext();
	        var value = tryCatch(fn).apply(this, arguments);
	        ret._popContext();
	        ret._resolveFromSyncValue(value);
	        return ret;
	    };
	};

	Promise.attempt = Promise["try"] = function (fn, args, ctx) {
	    if (typeof fn !== "function") {
	        return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	    }
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    ret._pushContext();
	    var value = util.isArray(args)
	        ? tryCatch(fn).apply(ctx, args)
	        : tryCatch(fn).call(ctx, args);
	    ret._popContext();
	    ret._resolveFromSyncValue(value);
	    return ret;
	};

	Promise.prototype._resolveFromSyncValue = function (value) {
	    if (value === util.errorObj) {
	        this._rejectCallback(value.e, false, true);
	    } else {
	        this._resolveCallback(value, true);
	    }
	};
	};

	},{"./util.js":38}],21:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	var util = _dereq_("./util.js");
	var async = _dereq_("./async.js");
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;

	function spreadAdapter(val, nodeback) {
	    var promise = this;
	    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
	    var ret = tryCatch(nodeback).apply(promise._boundTo, [null].concat(val));
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}

	function successAdapter(val, nodeback) {
	    var promise = this;
	    var receiver = promise._boundTo;
	    var ret = val === undefined
	        ? tryCatch(nodeback).call(receiver, null)
	        : tryCatch(nodeback).call(receiver, null, val);
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}
	function errorAdapter(reason, nodeback) {
	    var promise = this;
	    if (!reason) {
	        var target = promise._target();
	        var newReason = target._getCarriedStackTrace();
	        newReason.cause = reason;
	        reason = newReason;
	    }
	    var ret = tryCatch(nodeback).call(promise._boundTo, reason);
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}

	Promise.prototype.asCallback = 
	Promise.prototype.nodeify = function (nodeback, options) {
	    if (typeof nodeback == "function") {
	        var adapter = successAdapter;
	        if (options !== undefined && Object(options).spread) {
	            adapter = spreadAdapter;
	        }
	        this._then(
	            adapter,
	            errorAdapter,
	            undefined,
	            this,
	            nodeback
	        );
	    }
	    return this;
	};
	};

	},{"./async.js":2,"./util.js":38}],22:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, PromiseArray) {
	var util = _dereq_("./util.js");
	var async = _dereq_("./async.js");
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;

	Promise.prototype.progressed = function (handler) {
	    return this._then(undefined, undefined, handler, undefined, undefined);
	};

	Promise.prototype._progress = function (progressValue) {
	    if (this._isFollowingOrFulfilledOrRejected()) return;
	    this._target()._progressUnchecked(progressValue);

	};

	Promise.prototype._progressHandlerAt = function (index) {
	    return index === 0
	        ? this._progressHandler0
	        : this[(index << 2) + index - 5 + 2];
	};

	Promise.prototype._doProgressWith = function (progression) {
	    var progressValue = progression.value;
	    var handler = progression.handler;
	    var promise = progression.promise;
	    var receiver = progression.receiver;

	    var ret = tryCatch(handler).call(receiver, progressValue);
	    if (ret === errorObj) {
	        if (ret.e != null &&
	            ret.e.name !== "StopProgressPropagation") {
	            var trace = util.canAttachTrace(ret.e)
	                ? ret.e : new Error(util.toString(ret.e));
	            promise._attachExtraTrace(trace);
	            promise._progress(ret.e);
	        }
	    } else if (ret instanceof Promise) {
	        ret._then(promise._progress, null, null, promise, undefined);
	    } else {
	        promise._progress(ret);
	    }
	};


	Promise.prototype._progressUnchecked = function (progressValue) {
	    var len = this._length();
	    var progress = this._progress;
	    for (var i = 0; i < len; i++) {
	        var handler = this._progressHandlerAt(i);
	        var promise = this._promiseAt(i);
	        if (!(promise instanceof Promise)) {
	            var receiver = this._receiverAt(i);
	            if (typeof handler === "function") {
	                handler.call(receiver, progressValue, promise);
	            } else if (receiver instanceof PromiseArray &&
	                       !receiver._isResolved()) {
	                receiver._promiseProgressed(progressValue, promise);
	            }
	            continue;
	        }

	        if (typeof handler === "function") {
	            async.invoke(this._doProgressWith, this, {
	                handler: handler,
	                promise: promise,
	                receiver: this._receiverAt(i),
	                value: progressValue
	            });
	        } else {
	            async.invoke(progress, promise, progressValue);
	        }
	    }
	};
	};

	},{"./async.js":2,"./util.js":38}],23:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function() {
	var makeSelfResolutionError = function () {
	    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/LhFpo0\u000a");
	};
	var reflect = function() {
	    return new Promise.PromiseInspection(this._target());
	};
	var apiRejection = function(msg) {
	    return Promise.reject(new TypeError(msg));
	};
	var util = _dereq_("./util.js");
	var async = _dereq_("./async.js");
	var errors = _dereq_("./errors.js");
	var TypeError = Promise.TypeError = errors.TypeError;
	Promise.RangeError = errors.RangeError;
	Promise.CancellationError = errors.CancellationError;
	Promise.TimeoutError = errors.TimeoutError;
	Promise.OperationalError = errors.OperationalError;
	Promise.RejectionError = errors.OperationalError;
	Promise.AggregateError = errors.AggregateError;
	var INTERNAL = function(){};
	var APPLY = {};
	var NEXT_FILTER = {e: null};
	var tryConvertToPromise = _dereq_("./thenables.js")(Promise, INTERNAL);
	var PromiseArray =
	    _dereq_("./promise_array.js")(Promise, INTERNAL,
	                                    tryConvertToPromise, apiRejection);
	var CapturedTrace = _dereq_("./captured_trace.js")();
	var isDebugging = _dereq_("./debuggability.js")(Promise, CapturedTrace);
	 /*jshint unused:false*/
	var createContext =
	    _dereq_("./context.js")(Promise, CapturedTrace, isDebugging);
	var CatchFilter = _dereq_("./catch_filter.js")(NEXT_FILTER);
	var PromiseResolver = _dereq_("./promise_resolver.js");
	var nodebackForPromise = PromiseResolver._nodebackForPromise;
	var errorObj = util.errorObj;
	var tryCatch = util.tryCatch;
	function Promise(resolver) {
	    if (typeof resolver !== "function") {
	        throw new TypeError("the promise constructor requires a resolver function\u000a\u000a    See http://goo.gl/EC22Yn\u000a");
	    }
	    if (this.constructor !== Promise) {
	        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/KsIlge\u000a");
	    }
	    this._bitField = 0;
	    this._fulfillmentHandler0 = undefined;
	    this._rejectionHandler0 = undefined;
	    this._progressHandler0 = undefined;
	    this._promise0 = undefined;
	    this._receiver0 = undefined;
	    this._settledValue = undefined;
	    if (resolver !== INTERNAL) this._resolveFromResolver(resolver);
	}

	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};

	Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
	    var len = arguments.length;
	    if (len > 1) {
	        var catchInstances = new Array(len - 1),
	            j = 0, i;
	        for (i = 0; i < len - 1; ++i) {
	            var item = arguments[i];
	            if (typeof item === "function") {
	                catchInstances[j++] = item;
	            } else {
	                return Promise.reject(
	                    new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a"));
	            }
	        }
	        catchInstances.length = j;
	        fn = arguments[i];
	        var catchFilter = new CatchFilter(catchInstances, fn, this);
	        return this._then(undefined, catchFilter.doFilter, undefined,
	            catchFilter, undefined);
	    }
	    return this._then(undefined, fn, undefined, undefined, undefined);
	};

	Promise.prototype.reflect = function () {
	    return this._then(reflect, reflect, undefined, this, undefined);
	};

	Promise.prototype.then = function (didFulfill, didReject, didProgress) {
	    if (isDebugging() && arguments.length > 0 &&
	        typeof didFulfill !== "function" &&
	        typeof didReject !== "function") {
	        var msg = ".then() only accepts functions but was passed: " +
	                util.classString(didFulfill);
	        if (arguments.length > 1) {
	            msg += ", " + util.classString(didReject);
	        }
	        this._warn(msg);
	    }
	    return this._then(didFulfill, didReject, didProgress,
	        undefined, undefined);
	};

	Promise.prototype.done = function (didFulfill, didReject, didProgress) {
	    var promise = this._then(didFulfill, didReject, didProgress,
	        undefined, undefined);
	    promise._setIsFinal();
	};

	Promise.prototype.spread = function (didFulfill, didReject) {
	    return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined);
	};

	Promise.prototype.isCancellable = function () {
	    return !this.isResolved() &&
	        this._cancellable();
	};

	Promise.prototype.toJSON = function () {
	    var ret = {
	        isFulfilled: false,
	        isRejected: false,
	        fulfillmentValue: undefined,
	        rejectionReason: undefined
	    };
	    if (this.isFulfilled()) {
	        ret.fulfillmentValue = this.value();
	        ret.isFulfilled = true;
	    } else if (this.isRejected()) {
	        ret.rejectionReason = this.reason();
	        ret.isRejected = true;
	    }
	    return ret;
	};

	Promise.prototype.all = function () {
	    return new PromiseArray(this).promise();
	};

	Promise.prototype.error = function (fn) {
	    return this.caught(util.originatesFromRejection, fn);
	};

	Promise.is = function (val) {
	    return val instanceof Promise;
	};

	Promise.fromNode = function(fn) {
	    var ret = new Promise(INTERNAL);
	    var result = tryCatch(fn)(nodebackForPromise(ret));
	    if (result === errorObj) {
	        ret._rejectCallback(result.e, true, true);
	    }
	    return ret;
	};

	Promise.all = function (promises) {
	    return new PromiseArray(promises).promise();
	};

	Promise.defer = Promise.pending = function () {
	    var promise = new Promise(INTERNAL);
	    return new PromiseResolver(promise);
	};

	Promise.cast = function (obj) {
	    var ret = tryConvertToPromise(obj);
	    if (!(ret instanceof Promise)) {
	        var val = ret;
	        ret = new Promise(INTERNAL);
	        ret._fulfillUnchecked(val);
	    }
	    return ret;
	};

	Promise.resolve = Promise.fulfilled = Promise.cast;

	Promise.reject = Promise.rejected = function (reason) {
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    ret._rejectCallback(reason, true);
	    return ret;
	};

	Promise.setScheduler = function(fn) {
	    if (typeof fn !== "function") throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	    var prev = async._schedule;
	    async._schedule = fn;
	    return prev;
	};

	Promise.prototype._then = function (
	    didFulfill,
	    didReject,
	    didProgress,
	    receiver,
	    internalData
	) {
	    var haveInternalData = internalData !== undefined;
	    var ret = haveInternalData ? internalData : new Promise(INTERNAL);

	    if (!haveInternalData) {
	        ret._propagateFrom(this, 4 | 1);
	        ret._captureStackTrace();
	    }

	    var target = this._target();
	    if (target !== this) {
	        if (receiver === undefined) receiver = this._boundTo;
	        if (!haveInternalData) ret._setIsMigrated();
	    }

	    var callbackIndex =
	        target._addCallbacks(didFulfill, didReject, didProgress, ret, receiver);

	    if (target._isResolved() && !target._isSettlePromisesQueued()) {
	        async.invoke(
	            target._settlePromiseAtPostResolution, target, callbackIndex);
	    }

	    return ret;
	};

	Promise.prototype._settlePromiseAtPostResolution = function (index) {
	    if (this._isRejectionUnhandled()) this._unsetRejectionIsUnhandled();
	    this._settlePromiseAt(index);
	};

	Promise.prototype._length = function () {
	    return this._bitField & 131071;
	};

	Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
	    return (this._bitField & 939524096) > 0;
	};

	Promise.prototype._isFollowing = function () {
	    return (this._bitField & 536870912) === 536870912;
	};

	Promise.prototype._setLength = function (len) {
	    this._bitField = (this._bitField & -131072) |
	        (len & 131071);
	};

	Promise.prototype._setFulfilled = function () {
	    this._bitField = this._bitField | 268435456;
	};

	Promise.prototype._setRejected = function () {
	    this._bitField = this._bitField | 134217728;
	};

	Promise.prototype._setFollowing = function () {
	    this._bitField = this._bitField | 536870912;
	};

	Promise.prototype._setIsFinal = function () {
	    this._bitField = this._bitField | 33554432;
	};

	Promise.prototype._isFinal = function () {
	    return (this._bitField & 33554432) > 0;
	};

	Promise.prototype._cancellable = function () {
	    return (this._bitField & 67108864) > 0;
	};

	Promise.prototype._setCancellable = function () {
	    this._bitField = this._bitField | 67108864;
	};

	Promise.prototype._unsetCancellable = function () {
	    this._bitField = this._bitField & (~67108864);
	};

	Promise.prototype._setIsMigrated = function () {
	    this._bitField = this._bitField | 4194304;
	};

	Promise.prototype._unsetIsMigrated = function () {
	    this._bitField = this._bitField & (~4194304);
	};

	Promise.prototype._isMigrated = function () {
	    return (this._bitField & 4194304) > 0;
	};

	Promise.prototype._receiverAt = function (index) {
	    var ret = index === 0
	        ? this._receiver0
	        : this[
	            index * 5 - 5 + 4];
	    if (ret === undefined && this._isBound()) {
	        return this._boundTo;
	    }
	    return ret;
	};

	Promise.prototype._promiseAt = function (index) {
	    return index === 0
	        ? this._promise0
	        : this[index * 5 - 5 + 3];
	};

	Promise.prototype._fulfillmentHandlerAt = function (index) {
	    return index === 0
	        ? this._fulfillmentHandler0
	        : this[index * 5 - 5 + 0];
	};

	Promise.prototype._rejectionHandlerAt = function (index) {
	    return index === 0
	        ? this._rejectionHandler0
	        : this[index * 5 - 5 + 1];
	};

	Promise.prototype._migrateCallbacks = function (follower, index) {
	    var fulfill = follower._fulfillmentHandlerAt(index);
	    var reject = follower._rejectionHandlerAt(index);
	    var progress = follower._progressHandlerAt(index);
	    var promise = follower._promiseAt(index);
	    var receiver = follower._receiverAt(index);
	    if (promise instanceof Promise) promise._setIsMigrated();
	    this._addCallbacks(fulfill, reject, progress, promise, receiver);
	};

	Promise.prototype._addCallbacks = function (
	    fulfill,
	    reject,
	    progress,
	    promise,
	    receiver
	) {
	    var index = this._length();

	    if (index >= 131071 - 5) {
	        index = 0;
	        this._setLength(0);
	    }

	    if (index === 0) {
	        this._promise0 = promise;
	        if (receiver !== undefined) this._receiver0 = receiver;
	        if (typeof fulfill === "function" && !this._isCarryingStackTrace())
	            this._fulfillmentHandler0 = fulfill;
	        if (typeof reject === "function") this._rejectionHandler0 = reject;
	        if (typeof progress === "function") this._progressHandler0 = progress;
	    } else {
	        var base = index * 5 - 5;
	        this[base + 3] = promise;
	        this[base + 4] = receiver;
	        if (typeof fulfill === "function")
	            this[base + 0] = fulfill;
	        if (typeof reject === "function")
	            this[base + 1] = reject;
	        if (typeof progress === "function")
	            this[base + 2] = progress;
	    }
	    this._setLength(index + 1);
	    return index;
	};

	Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
	    var index = this._length();

	    if (index >= 131071 - 5) {
	        index = 0;
	        this._setLength(0);
	    }
	    if (index === 0) {
	        this._promise0 = promiseSlotValue;
	        this._receiver0 = receiver;
	    } else {
	        var base = index * 5 - 5;
	        this[base + 3] = promiseSlotValue;
	        this[base + 4] = receiver;
	    }
	    this._setLength(index + 1);
	};

	Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
	    this._setProxyHandlers(promiseArray, index);
	};

	Promise.prototype._resolveCallback = function(value, shouldBind) {
	    if (this._isFollowingOrFulfilledOrRejected()) return;
	    if (value === this)
	        return this._rejectCallback(makeSelfResolutionError(), false, true);
	    var maybePromise = tryConvertToPromise(value, this);
	    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

	    var propagationFlags = 1 | (shouldBind ? 4 : 0);
	    this._propagateFrom(maybePromise, propagationFlags);
	    var promise = maybePromise._target();
	    if (promise._isPending()) {
	        var len = this._length();
	        for (var i = 0; i < len; ++i) {
	            promise._migrateCallbacks(this, i);
	        }
	        this._setFollowing();
	        this._setLength(0);
	        this._setFollowee(promise);
	    } else if (promise._isFulfilled()) {
	        this._fulfillUnchecked(promise._value());
	    } else {
	        this._rejectUnchecked(promise._reason(),
	            promise._getCarriedStackTrace());
	    }
	};

	Promise.prototype._rejectCallback =
	function(reason, synchronous, shouldNotMarkOriginatingFromRejection) {
	    if (!shouldNotMarkOriginatingFromRejection) {
	        util.markAsOriginatingFromRejection(reason);
	    }
	    var trace = util.ensureErrorObject(reason);
	    var hasStack = trace === reason;
	    this._attachExtraTrace(trace, synchronous ? hasStack : false);
	    this._reject(reason, hasStack ? undefined : trace);
	};

	Promise.prototype._resolveFromResolver = function (resolver) {
	    var promise = this;
	    this._captureStackTrace();
	    this._pushContext();
	    var synchronous = true;
	    var r = tryCatch(resolver)(function(value) {
	        if (promise === null) return;
	        promise._resolveCallback(value);
	        promise = null;
	    }, function (reason) {
	        if (promise === null) return;
	        promise._rejectCallback(reason, synchronous);
	        promise = null;
	    });
	    synchronous = false;
	    this._popContext();

	    if (r !== undefined && r === errorObj && promise !== null) {
	        promise._rejectCallback(r.e, true, true);
	        promise = null;
	    }
	};

	Promise.prototype._settlePromiseFromHandler = function (
	    handler, receiver, value, promise
	) {
	    if (promise._isRejected()) return;
	    promise._pushContext();
	    var x;
	    if (receiver === APPLY && !this._isRejected()) {
	        x = tryCatch(handler).apply(this._boundTo, value);
	    } else {
	        x = tryCatch(handler).call(receiver, value);
	    }
	    promise._popContext();

	    if (x === errorObj || x === promise || x === NEXT_FILTER) {
	        var err = x === promise ? makeSelfResolutionError() : x.e;
	        promise._rejectCallback(err, false, true);
	    } else {
	        promise._resolveCallback(x);
	    }
	};

	Promise.prototype._target = function() {
	    var ret = this;
	    while (ret._isFollowing()) ret = ret._followee();
	    return ret;
	};

	Promise.prototype._followee = function() {
	    return this._rejectionHandler0;
	};

	Promise.prototype._setFollowee = function(promise) {
	    this._rejectionHandler0 = promise;
	};

	Promise.prototype._cleanValues = function () {
	    if (this._cancellable()) {
	        this._cancellationParent = undefined;
	    }
	};

	Promise.prototype._propagateFrom = function (parent, flags) {
	    if ((flags & 1) > 0 && parent._cancellable()) {
	        this._setCancellable();
	        this._cancellationParent = parent;
	    }
	    if ((flags & 4) > 0 && parent._isBound()) {
	        this._setBoundTo(parent._boundTo);
	    }
	};

	Promise.prototype._fulfill = function (value) {
	    if (this._isFollowingOrFulfilledOrRejected()) return;
	    this._fulfillUnchecked(value);
	};

	Promise.prototype._reject = function (reason, carriedStackTrace) {
	    if (this._isFollowingOrFulfilledOrRejected()) return;
	    this._rejectUnchecked(reason, carriedStackTrace);
	};

	Promise.prototype._settlePromiseAt = function (index) {
	    var promise = this._promiseAt(index);
	    var isPromise = promise instanceof Promise;

	    if (isPromise && promise._isMigrated()) {
	        promise._unsetIsMigrated();
	        return async.invoke(this._settlePromiseAt, this, index);
	    }
	    var handler = this._isFulfilled()
	        ? this._fulfillmentHandlerAt(index)
	        : this._rejectionHandlerAt(index);

	    var carriedStackTrace =
	        this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
	    var value = this._settledValue;
	    var receiver = this._receiverAt(index);


	    this._clearCallbackDataAtIndex(index);

	    if (typeof handler === "function") {
	        if (!isPromise) {
	            handler.call(receiver, value, promise);
	        } else {
	            this._settlePromiseFromHandler(handler, receiver, value, promise);
	        }
	    } else if (receiver instanceof PromiseArray) {
	        if (!receiver._isResolved()) {
	            if (this._isFulfilled()) {
	                receiver._promiseFulfilled(value, promise);
	            }
	            else {
	                receiver._promiseRejected(value, promise);
	            }
	        }
	    } else if (isPromise) {
	        if (this._isFulfilled()) {
	            promise._fulfill(value);
	        } else {
	            promise._reject(value, carriedStackTrace);
	        }
	    }

	    if (index >= 4 && (index & 31) === 4)
	        async.invokeLater(this._setLength, this, 0);
	};

	Promise.prototype._clearCallbackDataAtIndex = function(index) {
	    if (index === 0) {
	        if (!this._isCarryingStackTrace()) {
	            this._fulfillmentHandler0 = undefined;
	        }
	        this._rejectionHandler0 =
	        this._progressHandler0 =
	        this._receiver0 =
	        this._promise0 = undefined;
	    } else {
	        var base = index * 5 - 5;
	        this[base + 3] =
	        this[base + 4] =
	        this[base + 0] =
	        this[base + 1] =
	        this[base + 2] = undefined;
	    }
	};

	Promise.prototype._isSettlePromisesQueued = function () {
	    return (this._bitField &
	            -1073741824) === -1073741824;
	};

	Promise.prototype._setSettlePromisesQueued = function () {
	    this._bitField = this._bitField | -1073741824;
	};

	Promise.prototype._unsetSettlePromisesQueued = function () {
	    this._bitField = this._bitField & (~-1073741824);
	};

	Promise.prototype._queueSettlePromises = function() {
	    async.settlePromises(this);
	    this._setSettlePromisesQueued();
	};

	Promise.prototype._fulfillUnchecked = function (value) {
	    if (value === this) {
	        var err = makeSelfResolutionError();
	        this._attachExtraTrace(err);
	        return this._rejectUnchecked(err, undefined);
	    }
	    this._setFulfilled();
	    this._settledValue = value;
	    this._cleanValues();

	    if (this._length() > 0) {
	        this._queueSettlePromises();
	    }
	};

	Promise.prototype._rejectUncheckedCheckError = function (reason) {
	    var trace = util.ensureErrorObject(reason);
	    this._rejectUnchecked(reason, trace === reason ? undefined : trace);
	};

	Promise.prototype._rejectUnchecked = function (reason, trace) {
	    if (reason === this) {
	        var err = makeSelfResolutionError();
	        this._attachExtraTrace(err);
	        return this._rejectUnchecked(err);
	    }
	    this._setRejected();
	    this._settledValue = reason;
	    this._cleanValues();

	    if (this._isFinal()) {
	        async.throwLater(function(e) {
	            if ("stack" in e) {
	                async.invokeFirst(
	                    CapturedTrace.unhandledRejection, undefined, e);
	            }
	            throw e;
	        }, trace === undefined ? reason : trace);
	        return;
	    }

	    if (trace !== undefined && trace !== reason) {
	        this._setCarriedStackTrace(trace);
	    }

	    if (this._length() > 0) {
	        this._queueSettlePromises();
	    } else {
	        this._ensurePossibleRejectionHandled();
	    }
	};

	Promise.prototype._settlePromises = function () {
	    this._unsetSettlePromisesQueued();
	    var len = this._length();
	    for (var i = 0; i < len; i++) {
	        this._settlePromiseAt(i);
	    }
	};

	Promise._makeSelfResolutionError = makeSelfResolutionError;
	_dereq_("./progress.js")(Promise, PromiseArray);
	_dereq_("./method.js")(Promise, INTERNAL, tryConvertToPromise, apiRejection);
	_dereq_("./bind.js")(Promise, INTERNAL, tryConvertToPromise);
	_dereq_("./finally.js")(Promise, NEXT_FILTER, tryConvertToPromise);
	_dereq_("./direct_resolve.js")(Promise);
	_dereq_("./synchronous_inspection.js")(Promise);
	_dereq_("./join.js")(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
	Promise.Promise = Promise;
	_dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
	_dereq_('./cancel.js')(Promise);
	_dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext);
	_dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise);
	_dereq_('./nodeify.js')(Promise);
	_dereq_('./call_get.js')(Promise);
	_dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
	_dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
	_dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
	_dereq_('./settle.js')(Promise, PromiseArray);
	_dereq_('./some.js')(Promise, PromiseArray, apiRejection);
	_dereq_('./promisify.js')(Promise, INTERNAL);
	_dereq_('./any.js')(Promise);
	_dereq_('./each.js')(Promise, INTERNAL);
	_dereq_('./timers.js')(Promise, INTERNAL);
	_dereq_('./filter.js')(Promise, INTERNAL);
	                                                         
	    util.toFastProperties(Promise);                                          
	    util.toFastProperties(Promise.prototype);                                
	    function fillTypes(value) {                                              
	        var p = new Promise(INTERNAL);                                       
	        p._fulfillmentHandler0 = value;                                      
	        p._rejectionHandler0 = value;                                        
	        p._progressHandler0 = value;                                         
	        p._promise0 = value;                                                 
	        p._receiver0 = value;                                                
	        p._settledValue = value;                                             
	    }                                                                        
	    // Complete slack tracking, opt out of field-type tracking and           
	    // stabilize map                                                         
	    fillTypes({a: 1});                                                       
	    fillTypes({b: 2});                                                       
	    fillTypes({c: 3});                                                       
	    fillTypes(1);                                                            
	    fillTypes(function(){});                                                 
	    fillTypes(undefined);                                                    
	    fillTypes(false);                                                        
	    fillTypes(new Promise(INTERNAL));                                        
	    CapturedTrace.setBounds(async.firstLineError, util.lastLineError);       
	    return Promise;                                                          

	};

	},{"./any.js":1,"./async.js":2,"./bind.js":3,"./call_get.js":5,"./cancel.js":6,"./captured_trace.js":7,"./catch_filter.js":8,"./context.js":9,"./debuggability.js":10,"./direct_resolve.js":11,"./each.js":12,"./errors.js":13,"./filter.js":15,"./finally.js":16,"./generators.js":17,"./join.js":18,"./map.js":19,"./method.js":20,"./nodeify.js":21,"./progress.js":22,"./promise_array.js":24,"./promise_resolver.js":25,"./promisify.js":26,"./props.js":27,"./race.js":29,"./reduce.js":30,"./settle.js":32,"./some.js":33,"./synchronous_inspection.js":34,"./thenables.js":35,"./timers.js":36,"./using.js":37,"./util.js":38}],24:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL, tryConvertToPromise,
	    apiRejection) {
	var util = _dereq_("./util.js");
	var isArray = util.isArray;

	function toResolutionValue(val) {
	    switch(val) {
	    case -2: return [];
	    case -3: return {};
	    }
	}

	function PromiseArray(values) {
	    var promise = this._promise = new Promise(INTERNAL);
	    var parent;
	    if (values instanceof Promise) {
	        parent = values;
	        promise._propagateFrom(parent, 1 | 4);
	    }
	    this._values = values;
	    this._length = 0;
	    this._totalResolved = 0;
	    this._init(undefined, -2);
	}
	PromiseArray.prototype.length = function () {
	    return this._length;
	};

	PromiseArray.prototype.promise = function () {
	    return this._promise;
	};

	PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
	    var values = tryConvertToPromise(this._values, this._promise);
	    if (values instanceof Promise) {
	        values = values._target();
	        this._values = values;
	        if (values._isFulfilled()) {
	            values = values._value();
	            if (!isArray(values)) {
	                var err = new Promise.TypeError("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
	                this.__hardReject__(err);
	                return;
	            }
	        } else if (values._isPending()) {
	            values._then(
	                init,
	                this._reject,
	                undefined,
	                this,
	                resolveValueIfEmpty
	           );
	            return;
	        } else {
	            this._reject(values._reason());
	            return;
	        }
	    } else if (!isArray(values)) {
	        this._promise._reject(apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a")._reason());
	        return;
	    }

	    if (values.length === 0) {
	        if (resolveValueIfEmpty === -5) {
	            this._resolveEmptyArray();
	        }
	        else {
	            this._resolve(toResolutionValue(resolveValueIfEmpty));
	        }
	        return;
	    }
	    var len = this.getActualLength(values.length);
	    this._length = len;
	    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
	    var promise = this._promise;
	    for (var i = 0; i < len; ++i) {
	        var isResolved = this._isResolved();
	        var maybePromise = tryConvertToPromise(values[i], promise);
	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            if (isResolved) {
	                maybePromise._unsetRejectionIsUnhandled();
	            } else if (maybePromise._isPending()) {
	                maybePromise._proxyPromiseArray(this, i);
	            } else if (maybePromise._isFulfilled()) {
	                this._promiseFulfilled(maybePromise._value(), i);
	            } else {
	                this._promiseRejected(maybePromise._reason(), i);
	            }
	        } else if (!isResolved) {
	            this._promiseFulfilled(maybePromise, i);
	        }
	    }
	};

	PromiseArray.prototype._isResolved = function () {
	    return this._values === null;
	};

	PromiseArray.prototype._resolve = function (value) {
	    this._values = null;
	    this._promise._fulfill(value);
	};

	PromiseArray.prototype.__hardReject__ =
	PromiseArray.prototype._reject = function (reason) {
	    this._values = null;
	    this._promise._rejectCallback(reason, false, true);
	};

	PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
	    this._promise._progress({
	        index: index,
	        value: progressValue
	    });
	};


	PromiseArray.prototype._promiseFulfilled = function (value, index) {
	    this._values[index] = value;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        this._resolve(this._values);
	    }
	};

	PromiseArray.prototype._promiseRejected = function (reason, index) {
	    this._totalResolved++;
	    this._reject(reason);
	};

	PromiseArray.prototype.shouldCopyValues = function () {
	    return true;
	};

	PromiseArray.prototype.getActualLength = function (len) {
	    return len;
	};

	return PromiseArray;
	};

	},{"./util.js":38}],25:[function(_dereq_,module,exports){
	"use strict";
	var util = _dereq_("./util.js");
	var maybeWrapAsError = util.maybeWrapAsError;
	var errors = _dereq_("./errors.js");
	var TimeoutError = errors.TimeoutError;
	var OperationalError = errors.OperationalError;
	var haveGetters = util.haveGetters;
	var es5 = _dereq_("./es5.js");

	function isUntypedError(obj) {
	    return obj instanceof Error &&
	        es5.getPrototypeOf(obj) === Error.prototype;
	}

	var rErrorKey = /^(?:name|message|stack|cause)$/;
	function wrapAsOperationalError(obj) {
	    var ret;
	    if (isUntypedError(obj)) {
	        ret = new OperationalError(obj);
	        ret.name = obj.name;
	        ret.message = obj.message;
	        ret.stack = obj.stack;
	        var keys = es5.keys(obj);
	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!rErrorKey.test(key)) {
	                ret[key] = obj[key];
	            }
	        }
	        return ret;
	    }
	    util.markAsOriginatingFromRejection(obj);
	    return obj;
	}

	function nodebackForPromise(promise) {
	    return function(err, value) {
	        if (promise === null) return;

	        if (err) {
	            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
	            promise._attachExtraTrace(wrapped);
	            promise._reject(wrapped);
	        } else if (arguments.length > 2) {
	            var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];}
	            promise._fulfill(args);
	        } else {
	            promise._fulfill(value);
	        }

	        promise = null;
	    };
	}


	var PromiseResolver;
	if (!haveGetters) {
	    PromiseResolver = function (promise) {
	        this.promise = promise;
	        this.asCallback = nodebackForPromise(promise);
	        this.callback = this.asCallback;
	    };
	}
	else {
	    PromiseResolver = function (promise) {
	        this.promise = promise;
	    };
	}
	if (haveGetters) {
	    var prop = {
	        get: function() {
	            return nodebackForPromise(this.promise);
	        }
	    };
	    es5.defineProperty(PromiseResolver.prototype, "asCallback", prop);
	    es5.defineProperty(PromiseResolver.prototype, "callback", prop);
	}

	PromiseResolver._nodebackForPromise = nodebackForPromise;

	PromiseResolver.prototype.toString = function () {
	    return "[object PromiseResolver]";
	};

	PromiseResolver.prototype.resolve =
	PromiseResolver.prototype.fulfill = function (value) {
	    if (!(this instanceof PromiseResolver)) {
	        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
	    }
	    this.promise._resolveCallback(value);
	};

	PromiseResolver.prototype.reject = function (reason) {
	    if (!(this instanceof PromiseResolver)) {
	        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
	    }
	    this.promise._rejectCallback(reason);
	};

	PromiseResolver.prototype.progress = function (value) {
	    if (!(this instanceof PromiseResolver)) {
	        throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
	    }
	    this.promise._progress(value);
	};

	PromiseResolver.prototype.cancel = function (err) {
	    this.promise.cancel(err);
	};

	PromiseResolver.prototype.timeout = function () {
	    this.reject(new TimeoutError("timeout"));
	};

	PromiseResolver.prototype.isResolved = function () {
	    return this.promise.isResolved();
	};

	PromiseResolver.prototype.toJSON = function () {
	    return this.promise.toJSON();
	};

	module.exports = PromiseResolver;

	},{"./errors.js":13,"./es5.js":14,"./util.js":38}],26:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var THIS = {};
	var util = _dereq_("./util.js");
	var nodebackForPromise = _dereq_("./promise_resolver.js")
	    ._nodebackForPromise;
	var withAppended = util.withAppended;
	var maybeWrapAsError = util.maybeWrapAsError;
	var canEvaluate = util.canEvaluate;
	var TypeError = _dereq_("./errors").TypeError;
	var defaultSuffix = "Async";
	var defaultPromisified = {__isPromisified__: true};
	var noCopyPropsPattern =
	    /^(?:length|name|arguments|caller|callee|prototype|__isPromisified__)$/;
	var defaultFilter = function(name, func) {
	    return util.isIdentifier(name) &&
	        name.charAt(0) !== "_" &&
	        !util.isClass(func);
	};

	function propsFilter(key) {
	    return !noCopyPropsPattern.test(key);
	}

	function isPromisified(fn) {
	    try {
	        return fn.__isPromisified__ === true;
	    }
	    catch (e) {
	        return false;
	    }
	}

	function hasPromisified(obj, key, suffix) {
	    var val = util.getDataPropertyOrDefault(obj, key + suffix,
	                                            defaultPromisified);
	    return val ? isPromisified(val) : false;
	}
	function checkValid(ret, suffix, suffixRegexp) {
	    for (var i = 0; i < ret.length; i += 2) {
	        var key = ret[i];
	        if (suffixRegexp.test(key)) {
	            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
	            for (var j = 0; j < ret.length; j += 2) {
	                if (ret[j] === keyWithoutAsyncSuffix) {
	                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/iWrZbw\u000a"
	                        .replace("%s", suffix));
	                }
	            }
	        }
	    }
	}

	function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
	    var keys = util.inheritedDataKeys(obj);
	    var ret = [];
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var value = obj[key];
	        var passesDefaultFilter = filter === defaultFilter
	            ? true : defaultFilter(key, value, obj);
	        if (typeof value === "function" &&
	            !isPromisified(value) &&
	            !hasPromisified(obj, key, suffix) &&
	            filter(key, value, obj, passesDefaultFilter)) {
	            ret.push(key, value);
	        }
	    }
	    checkValid(ret, suffix, suffixRegexp);
	    return ret;
	}

	var escapeIdentRegex = function(str) {
	    return str.replace(/([$])/, "\\$");
	};

	var makeNodePromisifiedEval;
	if (false) {
	var switchCaseArgumentOrder = function(likelyArgumentCount) {
	    var ret = [likelyArgumentCount];
	    var min = Math.max(0, likelyArgumentCount - 1 - 3);
	    for(var i = likelyArgumentCount - 1; i >= min; --i) {
	        ret.push(i);
	    }
	    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
	        ret.push(i);
	    }
	    return ret;
	};

	var argumentSequence = function(argumentCount) {
	    return util.filledRange(argumentCount, "_arg", "");
	};

	var parameterDeclaration = function(parameterCount) {
	    return util.filledRange(
	        Math.max(parameterCount, 3), "_arg", "");
	};

	var parameterCount = function(fn) {
	    if (typeof fn.length === "number") {
	        return Math.max(Math.min(fn.length, 1023 + 1), 0);
	    }
	    return 0;
	};

	makeNodePromisifiedEval =
	function(callback, receiver, originalName, fn) {
	    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
	    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
	    var shouldProxyThis = typeof callback === "string" || receiver === THIS;

	    function generateCallForArgumentCount(count) {
	        var args = argumentSequence(count).join(", ");
	        var comma = count > 0 ? ", " : "";
	        var ret;
	        if (shouldProxyThis) {
	            ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
	        } else {
	            ret = receiver === undefined
	                ? "ret = callback({{args}}, nodeback); break;\n"
	                : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
	        }
	        return ret.replace("{{args}}", args).replace(", ", comma);
	    }

	    function generateArgumentSwitchCase() {
	        var ret = "";
	        for (var i = 0; i < argumentOrder.length; ++i) {
	            ret += "case " + argumentOrder[i] +":" +
	                generateCallForArgumentCount(argumentOrder[i]);
	        }

	        ret += "                                                             \n\
	        default:                                                             \n\
	            var args = new Array(len + 1);                                   \n\
	            var i = 0;                                                       \n\
	            for (var i = 0; i < len; ++i) {                                  \n\
	               args[i] = arguments[i];                                       \n\
	            }                                                                \n\
	            args[i] = nodeback;                                              \n\
	            [CodeForCall]                                                    \n\
	            break;                                                           \n\
	        ".replace("[CodeForCall]", (shouldProxyThis
	                                ? "ret = callback.apply(this, args);\n"
	                                : "ret = callback.apply(receiver, args);\n"));
	        return ret;
	    }

	    var getFunctionCode = typeof callback === "string"
	                                ? ("this != null ? this['"+callback+"'] : fn")
	                                : "fn";

	    return new Function("Promise",
	                        "fn",
	                        "receiver",
	                        "withAppended",
	                        "maybeWrapAsError",
	                        "nodebackForPromise",
	                        "tryCatch",
	                        "errorObj",
	                        "INTERNAL","'use strict';                            \n\
	        var ret = function (Parameters) {                                    \n\
	            'use strict';                                                    \n\
	            var len = arguments.length;                                      \n\
	            var promise = new Promise(INTERNAL);                             \n\
	            promise._captureStackTrace();                                    \n\
	            var nodeback = nodebackForPromise(promise);                      \n\
	            var ret;                                                         \n\
	            var callback = tryCatch([GetFunctionCode]);                      \n\
	            switch(len) {                                                    \n\
	                [CodeForSwitchCase]                                          \n\
	            }                                                                \n\
	            if (ret === errorObj) {                                          \n\
	                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
	            }                                                                \n\
	            return promise;                                                  \n\
	        };                                                                   \n\
	        ret.__isPromisified__ = true;                                        \n\
	        return ret;                                                          \n\
	        "
	        .replace("Parameters", parameterDeclaration(newParameterCount))
	        .replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
	        .replace("[GetFunctionCode]", getFunctionCode))(
	            Promise,
	            fn,
	            receiver,
	            withAppended,
	            maybeWrapAsError,
	            nodebackForPromise,
	            util.tryCatch,
	            util.errorObj,
	            INTERNAL
	        );
	};
	}

	function makeNodePromisifiedClosure(callback, receiver, _, fn) {
	    var defaultThis = (function() {return this;})();
	    var method = callback;
	    if (typeof method === "string") {
	        callback = fn;
	    }
	    function promisified() {
	        var _receiver = receiver;
	        if (receiver === THIS) _receiver = this;
	        var promise = new Promise(INTERNAL);
	        promise._captureStackTrace();
	        var cb = typeof method === "string" && this !== defaultThis
	            ? this[method] : callback;
	        var fn = nodebackForPromise(promise);
	        try {
	            cb.apply(_receiver, withAppended(arguments, fn));
	        } catch(e) {
	            promise._rejectCallback(maybeWrapAsError(e), true, true);
	        }
	        return promise;
	    }
	    promisified.__isPromisified__ = true;
	    return promisified;
	}

	var makeNodePromisified = canEvaluate
	    ? makeNodePromisifiedEval
	    : makeNodePromisifiedClosure;

	function promisifyAll(obj, suffix, filter, promisifier) {
	    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
	    var methods =
	        promisifiableMethods(obj, suffix, suffixRegexp, filter);

	    for (var i = 0, len = methods.length; i < len; i+= 2) {
	        var key = methods[i];
	        var fn = methods[i+1];
	        var promisifiedKey = key + suffix;
	        obj[promisifiedKey] = promisifier === makeNodePromisified
	                ? makeNodePromisified(key, THIS, key, fn, suffix)
	                : promisifier(fn, function() {
	                    return makeNodePromisified(key, THIS, key, fn, suffix);
	                });
	    }
	    util.toFastProperties(obj);
	    return obj;
	}

	function promisify(callback, receiver) {
	    return makeNodePromisified(callback, receiver, undefined, callback);
	}

	Promise.promisify = function (fn, receiver) {
	    if (typeof fn !== "function") {
	        throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	    }
	    if (isPromisified(fn)) {
	        return fn;
	    }
	    var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
	    util.copyDescriptors(fn, ret, propsFilter);
	    return ret;
	};

	Promise.promisifyAll = function (target, options) {
	    if (typeof target !== "function" && typeof target !== "object") {
	        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/9ITlV0\u000a");
	    }
	    options = Object(options);
	    var suffix = options.suffix;
	    if (typeof suffix !== "string") suffix = defaultSuffix;
	    var filter = options.filter;
	    if (typeof filter !== "function") filter = defaultFilter;
	    var promisifier = options.promisifier;
	    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

	    if (!util.isIdentifier(suffix)) {
	        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/8FZo5V\u000a");
	    }

	    var keys = util.inheritedDataKeys(target);
	    for (var i = 0; i < keys.length; ++i) {
	        var value = target[keys[i]];
	        if (keys[i] !== "constructor" &&
	            util.isClass(value)) {
	            promisifyAll(value.prototype, suffix, filter, promisifier);
	            promisifyAll(value, suffix, filter, promisifier);
	        }
	    }

	    return promisifyAll(target, suffix, filter, promisifier);
	};
	};


	},{"./errors":13,"./promise_resolver.js":25,"./util.js":38}],27:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(
	    Promise, PromiseArray, tryConvertToPromise, apiRejection) {
	var util = _dereq_("./util.js");
	var isObject = util.isObject;
	var es5 = _dereq_("./es5.js");

	function PropertiesPromiseArray(obj) {
	    var keys = es5.keys(obj);
	    var len = keys.length;
	    var values = new Array(len * 2);
	    for (var i = 0; i < len; ++i) {
	        var key = keys[i];
	        values[i] = obj[key];
	        values[i + len] = key;
	    }
	    this.constructor$(values);
	}
	util.inherits(PropertiesPromiseArray, PromiseArray);

	PropertiesPromiseArray.prototype._init = function () {
	    this._init$(undefined, -3) ;
	};

	PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    this._values[index] = value;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        var val = {};
	        var keyOffset = this.length();
	        for (var i = 0, len = this.length(); i < len; ++i) {
	            val[this._values[i + keyOffset]] = this._values[i];
	        }
	        this._resolve(val);
	    }
	};

	PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
	    this._promise._progress({
	        key: this._values[index + this.length()],
	        value: value
	    });
	};

	PropertiesPromiseArray.prototype.shouldCopyValues = function () {
	    return false;
	};

	PropertiesPromiseArray.prototype.getActualLength = function (len) {
	    return len >> 1;
	};

	function props(promises) {
	    var ret;
	    var castValue = tryConvertToPromise(promises);

	    if (!isObject(castValue)) {
	        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/OsFKC8\u000a");
	    } else if (castValue instanceof Promise) {
	        ret = castValue._then(
	            Promise.props, undefined, undefined, undefined, undefined);
	    } else {
	        ret = new PropertiesPromiseArray(castValue).promise();
	    }

	    if (castValue instanceof Promise) {
	        ret._propagateFrom(castValue, 4);
	    }
	    return ret;
	}

	Promise.prototype.props = function () {
	    return props(this);
	};

	Promise.props = function (promises) {
	    return props(promises);
	};
	};

	},{"./es5.js":14,"./util.js":38}],28:[function(_dereq_,module,exports){
	"use strict";
	function arrayMove(src, srcIndex, dst, dstIndex, len) {
	    for (var j = 0; j < len; ++j) {
	        dst[j + dstIndex] = src[j + srcIndex];
	        src[j + srcIndex] = void 0;
	    }
	}

	function Queue(capacity) {
	    this._capacity = capacity;
	    this._length = 0;
	    this._front = 0;
	}

	Queue.prototype._willBeOverCapacity = function (size) {
	    return this._capacity < size;
	};

	Queue.prototype._pushOne = function (arg) {
	    var length = this.length();
	    this._checkCapacity(length + 1);
	    var i = (this._front + length) & (this._capacity - 1);
	    this[i] = arg;
	    this._length = length + 1;
	};

	Queue.prototype._unshiftOne = function(value) {
	    var capacity = this._capacity;
	    this._checkCapacity(this.length() + 1);
	    var front = this._front;
	    var i = (((( front - 1 ) &
	                    ( capacity - 1) ) ^ capacity ) - capacity );
	    this[i] = value;
	    this._front = i;
	    this._length = this.length() + 1;
	};

	Queue.prototype.unshift = function(fn, receiver, arg) {
	    this._unshiftOne(arg);
	    this._unshiftOne(receiver);
	    this._unshiftOne(fn);
	};

	Queue.prototype.push = function (fn, receiver, arg) {
	    var length = this.length() + 3;
	    if (this._willBeOverCapacity(length)) {
	        this._pushOne(fn);
	        this._pushOne(receiver);
	        this._pushOne(arg);
	        return;
	    }
	    var j = this._front + length - 3;
	    this._checkCapacity(length);
	    var wrapMask = this._capacity - 1;
	    this[(j + 0) & wrapMask] = fn;
	    this[(j + 1) & wrapMask] = receiver;
	    this[(j + 2) & wrapMask] = arg;
	    this._length = length;
	};

	Queue.prototype.shift = function () {
	    var front = this._front,
	        ret = this[front];

	    this[front] = undefined;
	    this._front = (front + 1) & (this._capacity - 1);
	    this._length--;
	    return ret;
	};

	Queue.prototype.length = function () {
	    return this._length;
	};

	Queue.prototype._checkCapacity = function (size) {
	    if (this._capacity < size) {
	        this._resizeTo(this._capacity << 1);
	    }
	};

	Queue.prototype._resizeTo = function (capacity) {
	    var oldCapacity = this._capacity;
	    this._capacity = capacity;
	    var front = this._front;
	    var length = this._length;
	    var moveItemsCount = (front + length) & (oldCapacity - 1);
	    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
	};

	module.exports = Queue;

	},{}],29:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(
	    Promise, INTERNAL, tryConvertToPromise, apiRejection) {
	var isArray = _dereq_("./util.js").isArray;

	var raceLater = function (promise) {
	    return promise.then(function(array) {
	        return race(array, promise);
	    });
	};

	function race(promises, parent) {
	    var maybePromise = tryConvertToPromise(promises);

	    if (maybePromise instanceof Promise) {
	        return raceLater(maybePromise);
	    } else if (!isArray(promises)) {
	        return apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
	    }

	    var ret = new Promise(INTERNAL);
	    if (parent !== undefined) {
	        ret._propagateFrom(parent, 4 | 1);
	    }
	    var fulfill = ret._fulfill;
	    var reject = ret._reject;
	    for (var i = 0, len = promises.length; i < len; ++i) {
	        var val = promises[i];

	        if (val === undefined && !(i in promises)) {
	            continue;
	        }

	        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
	    }
	    return ret;
	}

	Promise.race = function (promises) {
	    return race(promises, undefined);
	};

	Promise.prototype.race = function () {
	    return race(this, undefined);
	};

	};

	},{"./util.js":38}],30:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise,
	                          PromiseArray,
	                          apiRejection,
	                          tryConvertToPromise,
	                          INTERNAL) {
	var async = _dereq_("./async.js");
	var util = _dereq_("./util.js");
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	function ReductionPromiseArray(promises, fn, accum, _each) {
	    this.constructor$(promises);
	    this._promise._captureStackTrace();
	    this._preservedValues = _each === INTERNAL ? [] : null;
	    this._zerothIsAccum = (accum === undefined);
	    this._gotAccum = false;
	    this._reducingIndex = (this._zerothIsAccum ? 1 : 0);
	    this._valuesPhase = undefined;
	    var maybePromise = tryConvertToPromise(accum, this._promise);
	    var rejected = false;
	    var isPromise = maybePromise instanceof Promise;
	    if (isPromise) {
	        maybePromise = maybePromise._target();
	        if (maybePromise._isPending()) {
	            maybePromise._proxyPromiseArray(this, -1);
	        } else if (maybePromise._isFulfilled()) {
	            accum = maybePromise._value();
	            this._gotAccum = true;
	        } else {
	            this._reject(maybePromise._reason());
	            rejected = true;
	        }
	    }
	    if (!(isPromise || this._zerothIsAccum)) this._gotAccum = true;
	    this._callback = fn;
	    this._accum = accum;
	    if (!rejected) async.invoke(init, this, undefined);
	}
	function init() {
	    this._init$(undefined, -5);
	}
	util.inherits(ReductionPromiseArray, PromiseArray);

	ReductionPromiseArray.prototype._init = function () {};

	ReductionPromiseArray.prototype._resolveEmptyArray = function () {
	    if (this._gotAccum || this._zerothIsAccum) {
	        this._resolve(this._preservedValues !== null
	                        ? [] : this._accum);
	    }
	};

	ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    var values = this._values;
	    values[index] = value;
	    var length = this.length();
	    var preservedValues = this._preservedValues;
	    var isEach = preservedValues !== null;
	    var gotAccum = this._gotAccum;
	    var valuesPhase = this._valuesPhase;
	    var valuesPhaseIndex;
	    if (!valuesPhase) {
	        valuesPhase = this._valuesPhase = new Array(length);
	        for (valuesPhaseIndex=0; valuesPhaseIndex<length; ++valuesPhaseIndex) {
	            valuesPhase[valuesPhaseIndex] = 0;
	        }
	    }
	    valuesPhaseIndex = valuesPhase[index];

	    if (index === 0 && this._zerothIsAccum) {
	        this._accum = value;
	        this._gotAccum = gotAccum = true;
	        valuesPhase[index] = ((valuesPhaseIndex === 0)
	            ? 1 : 2);
	    } else if (index === -1) {
	        this._accum = value;
	        this._gotAccum = gotAccum = true;
	    } else {
	        if (valuesPhaseIndex === 0) {
	            valuesPhase[index] = 1;
	        } else {
	            valuesPhase[index] = 2;
	            this._accum = value;
	        }
	    }
	    if (!gotAccum) return;

	    var callback = this._callback;
	    var receiver = this._promise._boundTo;
	    var ret;

	    for (var i = this._reducingIndex; i < length; ++i) {
	        valuesPhaseIndex = valuesPhase[i];
	        if (valuesPhaseIndex === 2) {
	            this._reducingIndex = i + 1;
	            continue;
	        }
	        if (valuesPhaseIndex !== 1) return;
	        value = values[i];
	        this._promise._pushContext();
	        if (isEach) {
	            preservedValues.push(value);
	            ret = tryCatch(callback).call(receiver, value, i, length);
	        }
	        else {
	            ret = tryCatch(callback)
	                .call(receiver, this._accum, value, i, length);
	        }
	        this._promise._popContext();

	        if (ret === errorObj) return this._reject(ret.e);

	        var maybePromise = tryConvertToPromise(ret, this._promise);
	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            if (maybePromise._isPending()) {
	                valuesPhase[i] = 4;
	                return maybePromise._proxyPromiseArray(this, i);
	            } else if (maybePromise._isFulfilled()) {
	                ret = maybePromise._value();
	            } else {
	                return this._reject(maybePromise._reason());
	            }
	        }

	        this._reducingIndex = i + 1;
	        this._accum = ret;
	    }

	    this._resolve(isEach ? preservedValues : this._accum);
	};

	function reduce(promises, fn, initialValue, _each) {
	    if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
	    return array.promise();
	}

	Promise.prototype.reduce = function (fn, initialValue) {
	    return reduce(this, fn, initialValue, null);
	};

	Promise.reduce = function (promises, fn, initialValue, _each) {
	    return reduce(promises, fn, initialValue, _each);
	};
	};

	},{"./async.js":2,"./util.js":38}],31:[function(_dereq_,module,exports){
	"use strict";
	var schedule;
	var noAsyncScheduler = function() {
	    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
	};
	if (_dereq_("./util.js").isNode) {
	    var version = process.versions.node.split(".").map(Number);
	    schedule = (version[0] === 0 && version[1] > 10) || (version[0] > 0)
	        ? global.setImmediate : process.nextTick;

	    if (!schedule) {
	        if (typeof setImmediate !== "undefined") {
	            schedule = setImmediate;
	        } else if (typeof setTimeout !== "undefined") {
	            schedule = setTimeout;
	        } else {
	            schedule = noAsyncScheduler;
	        }
	    }
	} else if (typeof MutationObserver !== "undefined") {
	    schedule = function(fn) {
	        var div = document.createElement("div");
	        var observer = new MutationObserver(fn);
	        observer.observe(div, {attributes: true});
	        return function() { div.classList.toggle("foo"); };
	    };
	    schedule.isStatic = true;
	} else if (typeof setImmediate !== "undefined") {
	    schedule = function (fn) {
	        setImmediate(fn);
	    };
	} else if (typeof setTimeout !== "undefined") {
	    schedule = function (fn) {
	        setTimeout(fn, 0);
	    };
	} else {
	    schedule = noAsyncScheduler;
	}
	module.exports = schedule;

	},{"./util.js":38}],32:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	    function(Promise, PromiseArray) {
	var PromiseInspection = Promise.PromiseInspection;
	var util = _dereq_("./util.js");

	function SettledPromiseArray(values) {
	    this.constructor$(values);
	}
	util.inherits(SettledPromiseArray, PromiseArray);

	SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
	    this._values[index] = inspection;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        this._resolve(this._values);
	    }
	};

	SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    var ret = new PromiseInspection();
	    ret._bitField = 268435456;
	    ret._settledValue = value;
	    this._promiseResolved(index, ret);
	};
	SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
	    var ret = new PromiseInspection();
	    ret._bitField = 134217728;
	    ret._settledValue = reason;
	    this._promiseResolved(index, ret);
	};

	Promise.settle = function (promises) {
	    return new SettledPromiseArray(promises).promise();
	};

	Promise.prototype.settle = function () {
	    return new SettledPromiseArray(this).promise();
	};
	};

	},{"./util.js":38}],33:[function(_dereq_,module,exports){
	"use strict";
	module.exports =
	function(Promise, PromiseArray, apiRejection) {
	var util = _dereq_("./util.js");
	var RangeError = _dereq_("./errors.js").RangeError;
	var AggregateError = _dereq_("./errors.js").AggregateError;
	var isArray = util.isArray;


	function SomePromiseArray(values) {
	    this.constructor$(values);
	    this._howMany = 0;
	    this._unwrap = false;
	    this._initialized = false;
	}
	util.inherits(SomePromiseArray, PromiseArray);

	SomePromiseArray.prototype._init = function () {
	    if (!this._initialized) {
	        return;
	    }
	    if (this._howMany === 0) {
	        this._resolve([]);
	        return;
	    }
	    this._init$(undefined, -5);
	    var isArrayResolved = isArray(this._values);
	    if (!this._isResolved() &&
	        isArrayResolved &&
	        this._howMany > this._canPossiblyFulfill()) {
	        this._reject(this._getRangeError(this.length()));
	    }
	};

	SomePromiseArray.prototype.init = function () {
	    this._initialized = true;
	    this._init();
	};

	SomePromiseArray.prototype.setUnwrap = function () {
	    this._unwrap = true;
	};

	SomePromiseArray.prototype.howMany = function () {
	    return this._howMany;
	};

	SomePromiseArray.prototype.setHowMany = function (count) {
	    this._howMany = count;
	};

	SomePromiseArray.prototype._promiseFulfilled = function (value) {
	    this._addFulfilled(value);
	    if (this._fulfilled() === this.howMany()) {
	        this._values.length = this.howMany();
	        if (this.howMany() === 1 && this._unwrap) {
	            this._resolve(this._values[0]);
	        } else {
	            this._resolve(this._values);
	        }
	    }

	};
	SomePromiseArray.prototype._promiseRejected = function (reason) {
	    this._addRejected(reason);
	    if (this.howMany() > this._canPossiblyFulfill()) {
	        var e = new AggregateError();
	        for (var i = this.length(); i < this._values.length; ++i) {
	            e.push(this._values[i]);
	        }
	        this._reject(e);
	    }
	};

	SomePromiseArray.prototype._fulfilled = function () {
	    return this._totalResolved;
	};

	SomePromiseArray.prototype._rejected = function () {
	    return this._values.length - this.length();
	};

	SomePromiseArray.prototype._addRejected = function (reason) {
	    this._values.push(reason);
	};

	SomePromiseArray.prototype._addFulfilled = function (value) {
	    this._values[this._totalResolved++] = value;
	};

	SomePromiseArray.prototype._canPossiblyFulfill = function () {
	    return this.length() - this._rejected();
	};

	SomePromiseArray.prototype._getRangeError = function (count) {
	    var message = "Input array must contain at least " +
	            this._howMany + " items but contains only " + count + " items";
	    return new RangeError(message);
	};

	SomePromiseArray.prototype._resolveEmptyArray = function () {
	    this._reject(this._getRangeError(0));
	};

	function some(promises, howMany) {
	    if ((howMany | 0) !== howMany || howMany < 0) {
	        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/1wAmHx\u000a");
	    }
	    var ret = new SomePromiseArray(promises);
	    var promise = ret.promise();
	    ret.setHowMany(howMany);
	    ret.init();
	    return promise;
	}

	Promise.some = function (promises, howMany) {
	    return some(promises, howMany);
	};

	Promise.prototype.some = function (howMany) {
	    return some(this, howMany);
	};

	Promise._SomePromiseArray = SomePromiseArray;
	};

	},{"./errors.js":13,"./util.js":38}],34:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise) {
	function PromiseInspection(promise) {
	    if (promise !== undefined) {
	        promise = promise._target();
	        this._bitField = promise._bitField;
	        this._settledValue = promise._settledValue;
	    }
	    else {
	        this._bitField = 0;
	        this._settledValue = undefined;
	    }
	}

	PromiseInspection.prototype.value = function () {
	    if (!this.isFulfilled()) {
	        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
	    }
	    return this._settledValue;
	};

	PromiseInspection.prototype.error =
	PromiseInspection.prototype.reason = function () {
	    if (!this.isRejected()) {
	        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
	    }
	    return this._settledValue;
	};

	PromiseInspection.prototype.isFulfilled =
	Promise.prototype._isFulfilled = function () {
	    return (this._bitField & 268435456) > 0;
	};

	PromiseInspection.prototype.isRejected =
	Promise.prototype._isRejected = function () {
	    return (this._bitField & 134217728) > 0;
	};

	PromiseInspection.prototype.isPending =
	Promise.prototype._isPending = function () {
	    return (this._bitField & 402653184) === 0;
	};

	PromiseInspection.prototype.isResolved =
	Promise.prototype._isResolved = function () {
	    return (this._bitField & 402653184) > 0;
	};

	Promise.prototype.isPending = function() {
	    return this._target()._isPending();
	};

	Promise.prototype.isRejected = function() {
	    return this._target()._isRejected();
	};

	Promise.prototype.isFulfilled = function() {
	    return this._target()._isFulfilled();
	};

	Promise.prototype.isResolved = function() {
	    return this._target()._isResolved();
	};

	Promise.prototype._value = function() {
	    return this._settledValue;
	};

	Promise.prototype._reason = function() {
	    this._unsetRejectionIsUnhandled();
	    return this._settledValue;
	};

	Promise.prototype.value = function() {
	    var target = this._target();
	    if (!target.isFulfilled()) {
	        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
	    }
	    return target._settledValue;
	};

	Promise.prototype.reason = function() {
	    var target = this._target();
	    if (!target.isRejected()) {
	        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
	    }
	    target._unsetRejectionIsUnhandled();
	    return target._settledValue;
	};


	Promise.PromiseInspection = PromiseInspection;
	};

	},{}],35:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var util = _dereq_("./util.js");
	var errorObj = util.errorObj;
	var isObject = util.isObject;

	function tryConvertToPromise(obj, context) {
	    if (isObject(obj)) {
	        if (obj instanceof Promise) {
	            return obj;
	        }
	        else if (isAnyBluebirdPromise(obj)) {
	            var ret = new Promise(INTERNAL);
	            obj._then(
	                ret._fulfillUnchecked,
	                ret._rejectUncheckedCheckError,
	                ret._progressUnchecked,
	                ret,
	                null
	            );
	            return ret;
	        }
	        var then = util.tryCatch(getThen)(obj);
	        if (then === errorObj) {
	            if (context) context._pushContext();
	            var ret = Promise.reject(then.e);
	            if (context) context._popContext();
	            return ret;
	        } else if (typeof then === "function") {
	            return doThenable(obj, then, context);
	        }
	    }
	    return obj;
	}

	function getThen(obj) {
	    return obj.then;
	}

	var hasProp = {}.hasOwnProperty;
	function isAnyBluebirdPromise(obj) {
	    return hasProp.call(obj, "_promise0");
	}

	function doThenable(x, then, context) {
	    var promise = new Promise(INTERNAL);
	    var ret = promise;
	    if (context) context._pushContext();
	    promise._captureStackTrace();
	    if (context) context._popContext();
	    var synchronous = true;
	    var result = util.tryCatch(then).call(x,
	                                        resolveFromThenable,
	                                        rejectFromThenable,
	                                        progressFromThenable);
	    synchronous = false;
	    if (promise && result === errorObj) {
	        promise._rejectCallback(result.e, true, true);
	        promise = null;
	    }

	    function resolveFromThenable(value) {
	        if (!promise) return;
	        if (x === value) {
	            promise._rejectCallback(
	                Promise._makeSelfResolutionError(), false, true);
	        } else {
	            promise._resolveCallback(value);
	        }
	        promise = null;
	    }

	    function rejectFromThenable(reason) {
	        if (!promise) return;
	        promise._rejectCallback(reason, synchronous, true);
	        promise = null;
	    }

	    function progressFromThenable(value) {
	        if (!promise) return;
	        if (typeof promise._progress === "function") {
	            promise._progress(value);
	        }
	    }
	    return ret;
	}

	return tryConvertToPromise;
	};

	},{"./util.js":38}],36:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var util = _dereq_("./util.js");
	var TimeoutError = Promise.TimeoutError;

	var afterTimeout = function (promise, message) {
	    if (!promise.isPending()) return;
	    if (typeof message !== "string") {
	        message = "operation timed out";
	    }
	    var err = new TimeoutError(message);
	    util.markAsOriginatingFromRejection(err);
	    promise._attachExtraTrace(err);
	    promise._cancel(err);
	};

	var afterValue = function(value) { return delay(+this).thenReturn(value); };
	var delay = Promise.delay = function (value, ms) {
	    if (ms === undefined) {
	        ms = value;
	        value = undefined;
	        var ret = new Promise(INTERNAL);
	        setTimeout(function() { ret._fulfill(); }, ms);
	        return ret;
	    }
	    ms = +ms;
	    return Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
	};

	Promise.prototype.delay = function (ms) {
	    return delay(this, ms);
	};

	function successClear(value) {
	    var handle = this;
	    if (handle instanceof Number) handle = +handle;
	    clearTimeout(handle);
	    return value;
	}

	function failureClear(reason) {
	    var handle = this;
	    if (handle instanceof Number) handle = +handle;
	    clearTimeout(handle);
	    throw reason;
	}

	Promise.prototype.timeout = function (ms, message) {
	    ms = +ms;
	    var ret = this.then().cancellable();
	    ret._cancellationParent = this;
	    var handle = setTimeout(function timeoutTimeout() {
	        afterTimeout(ret, message);
	    }, ms);
	    return ret._then(successClear, failureClear, undefined, handle, undefined);
	};

	};

	},{"./util.js":38}],37:[function(_dereq_,module,exports){
	"use strict";
	module.exports = function (Promise, apiRejection, tryConvertToPromise,
	    createContext) {
	    var TypeError = _dereq_("./errors.js").TypeError;
	    var inherits = _dereq_("./util.js").inherits;
	    var PromiseInspection = Promise.PromiseInspection;

	    function inspectionMapper(inspections) {
	        var len = inspections.length;
	        for (var i = 0; i < len; ++i) {
	            var inspection = inspections[i];
	            if (inspection.isRejected()) {
	                return Promise.reject(inspection.error());
	            }
	            inspections[i] = inspection._settledValue;
	        }
	        return inspections;
	    }

	    function thrower(e) {
	        setTimeout(function(){throw e;}, 0);
	    }

	    function castPreservingDisposable(thenable) {
	        var maybePromise = tryConvertToPromise(thenable);
	        if (maybePromise !== thenable &&
	            typeof thenable._isDisposable === "function" &&
	            typeof thenable._getDisposer === "function" &&
	            thenable._isDisposable()) {
	            maybePromise._setDisposable(thenable._getDisposer());
	        }
	        return maybePromise;
	    }
	    function dispose(resources, inspection) {
	        var i = 0;
	        var len = resources.length;
	        var ret = Promise.defer();
	        function iterator() {
	            if (i >= len) return ret.resolve();
	            var maybePromise = castPreservingDisposable(resources[i++]);
	            if (maybePromise instanceof Promise &&
	                maybePromise._isDisposable()) {
	                try {
	                    maybePromise = tryConvertToPromise(
	                        maybePromise._getDisposer().tryDispose(inspection),
	                        resources.promise);
	                } catch (e) {
	                    return thrower(e);
	                }
	                if (maybePromise instanceof Promise) {
	                    return maybePromise._then(iterator, thrower,
	                                              null, null, null);
	                }
	            }
	            iterator();
	        }
	        iterator();
	        return ret.promise;
	    }

	    function disposerSuccess(value) {
	        var inspection = new PromiseInspection();
	        inspection._settledValue = value;
	        inspection._bitField = 268435456;
	        return dispose(this, inspection).thenReturn(value);
	    }

	    function disposerFail(reason) {
	        var inspection = new PromiseInspection();
	        inspection._settledValue = reason;
	        inspection._bitField = 134217728;
	        return dispose(this, inspection).thenThrow(reason);
	    }

	    function Disposer(data, promise, context) {
	        this._data = data;
	        this._promise = promise;
	        this._context = context;
	    }

	    Disposer.prototype.data = function () {
	        return this._data;
	    };

	    Disposer.prototype.promise = function () {
	        return this._promise;
	    };

	    Disposer.prototype.resource = function () {
	        if (this.promise().isFulfilled()) {
	            return this.promise().value();
	        }
	        return null;
	    };

	    Disposer.prototype.tryDispose = function(inspection) {
	        var resource = this.resource();
	        var context = this._context;
	        if (context !== undefined) context._pushContext();
	        var ret = resource !== null
	            ? this.doDispose(resource, inspection) : null;
	        if (context !== undefined) context._popContext();
	        this._promise._unsetDisposable();
	        this._data = null;
	        return ret;
	    };

	    Disposer.isDisposer = function (d) {
	        return (d != null &&
	                typeof d.resource === "function" &&
	                typeof d.tryDispose === "function");
	    };

	    function FunctionDisposer(fn, promise, context) {
	        this.constructor$(fn, promise, context);
	    }
	    inherits(FunctionDisposer, Disposer);

	    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
	        var fn = this.data();
	        return fn.call(resource, resource, inspection);
	    };

	    function maybeUnwrapDisposer(value) {
	        if (Disposer.isDisposer(value)) {
	            this.resources[this.index]._setDisposable(value);
	            return value.promise();
	        }
	        return value;
	    }

	    Promise.using = function () {
	        var len = arguments.length;
	        if (len < 2) return apiRejection(
	                        "you must pass at least 2 arguments to Promise.using");
	        var fn = arguments[len - 1];
	        if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	        len--;
	        var resources = new Array(len);
	        for (var i = 0; i < len; ++i) {
	            var resource = arguments[i];
	            if (Disposer.isDisposer(resource)) {
	                var disposer = resource;
	                resource = resource.promise();
	                resource._setDisposable(disposer);
	            } else {
	                var maybePromise = tryConvertToPromise(resource);
	                if (maybePromise instanceof Promise) {
	                    resource =
	                        maybePromise._then(maybeUnwrapDisposer, null, null, {
	                            resources: resources,
	                            index: i
	                    }, undefined);
	                }
	            }
	            resources[i] = resource;
	        }

	        var promise = Promise.settle(resources)
	            .then(inspectionMapper)
	            .then(function(vals) {
	                promise._pushContext();
	                var ret;
	                try {
	                    ret = fn.apply(undefined, vals);
	                } finally {
	                    promise._popContext();
	                }
	                return ret;
	            })
	            ._then(
	                disposerSuccess, disposerFail, undefined, resources, undefined);
	        resources.promise = promise;
	        return promise;
	    };

	    Promise.prototype._setDisposable = function (disposer) {
	        this._bitField = this._bitField | 262144;
	        this._disposer = disposer;
	    };

	    Promise.prototype._isDisposable = function () {
	        return (this._bitField & 262144) > 0;
	    };

	    Promise.prototype._getDisposer = function () {
	        return this._disposer;
	    };

	    Promise.prototype._unsetDisposable = function () {
	        this._bitField = this._bitField & (~262144);
	        this._disposer = undefined;
	    };

	    Promise.prototype.disposer = function (fn) {
	        if (typeof fn === "function") {
	            return new FunctionDisposer(fn, this, createContext());
	        }
	        throw new TypeError();
	    };

	};

	},{"./errors.js":13,"./util.js":38}],38:[function(_dereq_,module,exports){
	"use strict";
	var es5 = _dereq_("./es5.js");
	var canEvaluate = typeof navigator == "undefined";
	var haveGetters = (function(){
	    try {
	        var o = {};
	        es5.defineProperty(o, "f", {
	            get: function () {
	                return 3;
	            }
	        });
	        return o.f === 3;
	    }
	    catch (e) {
	        return false;
	    }

	})();

	var errorObj = {e: {}};
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    } catch (e) {
	        errorObj.e = e;
	        return errorObj;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}

	var inherits = function(Child, Parent) {
	    var hasProp = {}.hasOwnProperty;

	    function T() {
	        this.constructor = Child;
	        this.constructor$ = Parent;
	        for (var propertyName in Parent.prototype) {
	            if (hasProp.call(Parent.prototype, propertyName) &&
	                propertyName.charAt(propertyName.length-1) !== "$"
	           ) {
	                this[propertyName + "$"] = Parent.prototype[propertyName];
	            }
	        }
	    }
	    T.prototype = Parent.prototype;
	    Child.prototype = new T();
	    return Child.prototype;
	};


	function isPrimitive(val) {
	    return val == null || val === true || val === false ||
	        typeof val === "string" || typeof val === "number";

	}

	function isObject(value) {
	    return !isPrimitive(value);
	}

	function maybeWrapAsError(maybeError) {
	    if (!isPrimitive(maybeError)) return maybeError;

	    return new Error(safeToString(maybeError));
	}

	function withAppended(target, appendee) {
	    var len = target.length;
	    var ret = new Array(len + 1);
	    var i;
	    for (i = 0; i < len; ++i) {
	        ret[i] = target[i];
	    }
	    ret[i] = appendee;
	    return ret;
	}

	function getDataPropertyOrDefault(obj, key, defaultValue) {
	    if (es5.isES5) {
	        var desc = Object.getOwnPropertyDescriptor(obj, key);
	        if (desc != null) {
	            return desc.get == null && desc.set == null
	                    ? desc.value
	                    : defaultValue;
	        }
	    } else {
	        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
	    }
	}

	function notEnumerableProp(obj, name, value) {
	    if (isPrimitive(obj)) return obj;
	    var descriptor = {
	        value: value,
	        configurable: true,
	        enumerable: false,
	        writable: true
	    };
	    es5.defineProperty(obj, name, descriptor);
	    return obj;
	}


	var wrapsPrimitiveReceiver = (function() {
	    return this !== "string";
	}).call("string");

	function thrower(r) {
	    throw r;
	}

	var inheritedDataKeys = (function() {
	    if (es5.isES5) {
	        var oProto = Object.prototype;
	        var getKeys = Object.getOwnPropertyNames;
	        return function(obj) {
	            var ret = [];
	            var visitedKeys = Object.create(null);
	            while (obj != null && obj !== oProto) {
	                var keys;
	                try {
	                    keys = getKeys(obj);
	                } catch (e) {
	                    return ret;
	                }
	                for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (visitedKeys[key]) continue;
	                    visitedKeys[key] = true;
	                    var desc = Object.getOwnPropertyDescriptor(obj, key);
	                    if (desc != null && desc.get == null && desc.set == null) {
	                        ret.push(key);
	                    }
	                }
	                obj = es5.getPrototypeOf(obj);
	            }
	            return ret;
	        };
	    } else {
	        return function(obj) {
	            var ret = [];
	            /*jshint forin:false */
	            for (var key in obj) {
	                ret.push(key);
	            }
	            return ret;
	        };
	    }

	})();

	function isClass(fn) {
	    try {
	        if (typeof fn === "function") {
	            var keys = es5.names(fn.prototype);
	            if (es5.isES5) return keys.length > 1;
	            return keys.length > 0 &&
	                   !(keys.length === 1 && keys[0] === "constructor");
	        }
	        return false;
	    } catch (e) {
	        return false;
	    }
	}

	function toFastProperties(obj) {
	    /*jshint -W027,-W055,-W031*/
	    function f() {}
	    f.prototype = obj;
	    var l = 8;
	    while (l--) new f();
	    return obj;
	    eval(obj);
	}

	var rident = /^[a-z$_][a-z$_0-9]*$/i;
	function isIdentifier(str) {
	    return rident.test(str);
	}

	function filledRange(count, prefix, suffix) {
	    var ret = new Array(count);
	    for(var i = 0; i < count; ++i) {
	        ret[i] = prefix + i + suffix;
	    }
	    return ret;
	}

	function safeToString(obj) {
	    try {
	        return obj + "";
	    } catch (e) {
	        return "[no string representation]";
	    }
	}

	function markAsOriginatingFromRejection(e) {
	    try {
	        notEnumerableProp(e, "isOperational", true);
	    }
	    catch(ignore) {}
	}

	function originatesFromRejection(e) {
	    if (e == null) return false;
	    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
	        e["isOperational"] === true);
	}

	function canAttachTrace(obj) {
	    return obj instanceof Error && es5.propertyIsWritable(obj, "stack");
	}

	var ensureErrorObject = (function() {
	    if (!("stack" in new Error())) {
	        return function(value) {
	            if (canAttachTrace(value)) return value;
	            try {throw new Error(safeToString(value));}
	            catch(err) {return err;}
	        };
	    } else {
	        return function(value) {
	            if (canAttachTrace(value)) return value;
	            return new Error(safeToString(value));
	        };
	    }
	})();

	function classString(obj) {
	    return {}.toString.call(obj);
	}

	function copyDescriptors(from, to, filter) {
	    var keys = es5.names(from);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        if (filter(key)) {
	            es5.defineProperty(to, key, es5.getDescriptor(from, key));
	        }
	    }
	}

	var ret = {
	    isClass: isClass,
	    isIdentifier: isIdentifier,
	    inheritedDataKeys: inheritedDataKeys,
	    getDataPropertyOrDefault: getDataPropertyOrDefault,
	    thrower: thrower,
	    isArray: es5.isArray,
	    haveGetters: haveGetters,
	    notEnumerableProp: notEnumerableProp,
	    isPrimitive: isPrimitive,
	    isObject: isObject,
	    canEvaluate: canEvaluate,
	    errorObj: errorObj,
	    tryCatch: tryCatch,
	    inherits: inherits,
	    withAppended: withAppended,
	    maybeWrapAsError: maybeWrapAsError,
	    wrapsPrimitiveReceiver: wrapsPrimitiveReceiver,
	    toFastProperties: toFastProperties,
	    filledRange: filledRange,
	    toString: safeToString,
	    canAttachTrace: canAttachTrace,
	    ensureErrorObject: ensureErrorObject,
	    originatesFromRejection: originatesFromRejection,
	    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
	    classString: classString,
	    copyDescriptors: copyDescriptors,
	    hasDevTools: typeof chrome !== "undefined" && chrome &&
	                 typeof chrome.loadTimes === "function",
	    isNode: typeof process !== "undefined" &&
	        classString(process).toLowerCase() === "[object process]"
	};
	try {throw new Error(); } catch (e) {ret.lastLineError = e;}
	module.exports = ret;

	},{"./es5.js":14}],39:[function(_dereq_,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	},{}]},{},[4])(4)
	});                    ;if (typeof window !== 'undefined' && window !== null) {                               window.P = window.Promise;                                                     } else if (typeof self !== 'undefined' && self !== null) {                             self.P = self.Promise;                                                         }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), (function() { return this; }()), __webpack_require__(10).setImmediate))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(6).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10).setImmediate, __webpack_require__(10).clearImmediate))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var raw_connect = __webpack_require__(12).connect;
	var ChannelModel = __webpack_require__(75).ChannelModel;
	var defer = __webpack_require__(76).defer;

	function connect(url, connOptions) {
	  var opened = defer();
	  raw_connect(url, connOptions, function(err, conn) {
	    if (err === null) opened.resolve(new ChannelModel(conn));
	    else opened.reject(err);
	  });
	  return opened.promise;
	};

	module.exports.connect = connect;
	module.exports.credentials = __webpack_require__(13);


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {//
	//
	//

	// General-purpose API for glueing everything together.

	'use strict';

	var URL = __webpack_require__(14);
	var QS = __webpack_require__(19);
	var Connection = __webpack_require__(22).Connection;
	var fmt = __webpack_require__(27).format;
	var credentials = __webpack_require__(13);

	function copyInto(obj, target) {
	  var keys = Object.keys(obj);
	  var i = keys.length;
	  while (i--) {
	    var k = keys[i];
	    target[k] = obj[k];
	  }
	  return target;
	}

	// Adapted from util._extend, which is too fringe to use.
	function clone(obj) {
	  return copyInto(obj, {});
	}

	var CLIENT_PROPERTIES = {
	  "product": "amqplib",
	  "version": __webpack_require__(73).version,
	  "platform": fmt('Node.JS %s', process.version),
	  "information": "http://squaremo.github.io/amqp.node",
	  "capabilities": {
	    "publisher_confirms": true,
	    "exchange_exchange_bindings": true,
	    "basic.nack": true,
	    "consumer_cancel_notify": true,
	    "connection.blocked": true,
	    "authentication_failure_close": true
	  }
	};


	// Construct the main frames used in the opening handshake
	function openFrames(parts, credentials, extraClientProperties) {

	  var vhost = parts.pathname;
	  if (!vhost)
	    vhost = '/';
	  else
	    vhost = QS.unescape(vhost.substr(1));

	  var q = parts.query || {};

	  function intOrDefault(val, def) {
	    return (val === undefined) ? def : parseInt(val);
	  }

	  var clientProperties = Object.create(CLIENT_PROPERTIES);

	  return {
	    // start-ok
	    'clientProperties': copyInto(extraClientProperties, clientProperties),
	    'mechanism': credentials.mechanism,
	    'response': credentials.response(),
	    'locale': q.locale || 'en_US',

	    // tune-ok
	    'channelMax': intOrDefault(q.channelMax, 0),
	    'frameMax': intOrDefault(q.frameMax, 0x1000),
	    'heartbeat': intOrDefault(q.heartbeat, 0),

	    // open
	    'virtualHost': vhost,
	    'capabilities': '',
	    'insist': 0
	  };
	}

	// Decide on credentials based on what we're supplied
	function credentialsFromUrl(parts) {
	  var user = 'guest', passwd = 'guest';
	  if (parts.auth) {
	    var auth = parts.auth.split(':');
	    user = auth[0];
	    passwd = auth[1];
	  }
	  return credentials.plain(user, passwd);
	}

	function connect(url, socketOptions, openCallback) {
	  // tls.connect uses `util._extend()` on the options given it, which
	  // copies only properties mentioned in `Object.keys()`, when
	  // processing the options. So I have to make copies too, rather
	  // than using `Object.create()`.
	  var sockopts = clone(socketOptions || {});
	  url = url || 'amqp://localhost';

	  var parts = URL.parse(url, true); // yes, parse the query string
	  var protocol = parts.protocol;
	  var noDelay = !!sockopts.noDelay;
	  var timeout = sockopts.timeout;
	  var keepAlive = !!sockopts.keepAlive;
	  // 0 is default for node
	  var keepAliveDelay = sockopts.keepAliveDelay || 0;

	  var extraClientProperties = sockopts.clientProperties || {};
	  var credentials = sockopts.credentials || credentialsFromUrl(parts);

	  var fields = openFrames(parts, credentials, extraClientProperties);
	  var port = parts.port || ((protocol === 'amqp:') ? 5672 : 5671);
	  sockopts.host = parts.hostname;
	  sockopts.port = parseInt(port);

	  var sockok = false;
	  var sock;

	  function onConnect() {
	    sockok = true;
	    sock.setNoDelay(noDelay);
	    if (timeout) {
	      sock.setTimeout(
	        timeout, openCallback.bind(this, new Error('connect ETIMEDOUT')));
	    }
	    if (keepAlive) sock.setKeepAlive(keepAlive, keepAliveDelay);

	    var c = new Connection(sock);
	    c.open(fields, function(err, ok) {
	      // disable timeout once the connection is open, we don't want
	      // it fouling things
	      if (timeout) sock.setTimeout(0);
	      if (err === null) {
	        openCallback(null, c);
	      }
	      else openCallback(err);
	    });
	  }

	  if (protocol === 'amqp:') {
	    sock = __webpack_require__(74).connect(sockopts, onConnect);
	  }
	  else if (protocol === 'amqps:') {
	    sock = __webpack_require__(74).connect(sockopts, onConnect);
	  }
	  else {
	    throw new Error("Expected amqp: or amqps: as the protocol; got " + protocol);
	  }

	  sock.once('error', function(err) {
	    if (!sockok) openCallback(err);
	  });

	}

	module.exports.connect = connect;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {//
	//
	//

	// Different kind of credentials that can be supplied when opening a
	// connection, corresponding to SASL mechanisms There's only two
	// useful mechanisms that RabbitMQ implements:
	//  * PLAIN (send username and password in the plain)
	//  * EXTERNAL (assume the server will figure out who you are from
	//    context, i.e., your SSL certificate)

	module.exports.plain = function(user, passwd) {
	  return {
	    mechanism: 'PLAIN',
	    response: function() {
	      return new Buffer(['', user, passwd].join(String.fromCharCode(0)))
	    }
	  }
	}

	module.exports.external = function() {
	  return {
	    mechanism: 'EXTERNAL',
	    response: function() { return new Buffer(''); }
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(15);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(16);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)(module), (function() { return this; }())))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(17);
	exports.encode = exports.stringify = __webpack_require__(18);


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(20);
	exports.encode = exports.stringify = __webpack_require__(21);


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return map(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray(obj[k])) {
	        return map(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};

	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}

	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {//
	//
	//

	'use strict';

	var defs = __webpack_require__(23);
	var constants = defs.constants;
	var frame = __webpack_require__(30);
	var HEARTBEAT = frame.HEARTBEAT;
	var Mux = __webpack_require__(38).Mux;

	var Duplex =
	  __webpack_require__(39).Duplex ||
	  __webpack_require__(57);
	var EventEmitter = __webpack_require__(40).EventEmitter;
	var Heart = __webpack_require__(66).Heart;

	var methodName = __webpack_require__(67).methodName;
	var closeMsg = __webpack_require__(67).closeMessage;
	var inspect = __webpack_require__(67).inspect;

	var BitSet = __webpack_require__(68).BitSet;
	var inherits = __webpack_require__(27).inherits;
	var fmt = __webpack_require__(27).format;
	var PassThrough = __webpack_require__(39).PassThrough ||
	  __webpack_require__(69);
	var IllegalOperationError = __webpack_require__(72).IllegalOperationError;
	var stackCapture = __webpack_require__(72).stackCapture;

	// High-water mark for channel write buffers, in 'objects' (which are
	// encoded frames as buffers).
	var DEFAULT_WRITE_HWM = 1024;
	// If all the frames of a message (method, properties, content) total
	// to less than this, copy them into a single buffer and write it all
	// at once. Note that this is less than the minimum frame size: if it
	// was greater, we might have to fragment the content.
	var SINGLE_CHUNK_THRESHOLD = 2048;

	function Connection(underlying) {
	  var stream = this.stream = wrapStream(underlying);
	  this.muxer = new Mux(stream);

	  // frames
	  this.rest = new Buffer(0);
	  this.frameMax = constants.FRAME_MIN_SIZE;
	  this.sentSinceLastCheck = false;
	  this.recvSinceLastCheck = false;

	  this.expectSocketClose = false;
	  this.freeChannels = new BitSet();
	  this.channels = [{channel: {accept: channel0(this)},
	                    buffer: underlying}];
	}
	inherits(Connection, EventEmitter);

	var C = Connection.prototype;

	// Usual frame accept mode
	function mainAccept(frame) {
	  var rec = this.channels[frame.channel];
	  if (rec) { return rec.channel.accept(frame); }
	  // NB CHANNEL_ERROR may not be right, but I don't know what is ..
	  else
	    this.closeWithError(
	      fmt('Frame on unknown channel %d', frame.channel),
	      constants.CHANNEL_ERROR,
	      new Error(fmt("Frame on unknown channel: %s",
	                    inspect(frame, false))));
	}

	// Handle anything that comes through on channel 0, that's the
	// connection control channel. This is only used once mainAccept is
	// installed as the frame handler, after the opening handshake.
	function channel0(connection) {
	  return function(f) {
	    // Once we get a 'close', we know 1. we'll get no more frames, and
	    // 2. anything we send except close, or close-ok, will be
	    // ignored. If we already sent 'close', this won't be invoked since
	    // we're already in closing mode; if we didn't well we're not going
	    // to send it now are we.
	    if (f === HEARTBEAT); // ignore; it's already counted as activity
	                          // on the socket, which is its purpose
	    else if (f.id === defs.ConnectionClose) {
	      // Oh. OK. I guess we're done here then.
	      connection.sendMethod(0, defs.ConnectionCloseOk, {});
	      var emsg = fmt('Connection closed: %s', closeMsg(f));
	      var s = stackCapture(emsg);
	      connection.emit('error', new Error(emsg));
	      connection.toClosed(s);
	    }
	    else if (f.id === defs.ConnectionBlocked) {
	      connection.emit('blocked', f.fields.reason);
	    }
	    else if (f.id === defs.ConnectionUnblocked) {
	      connection.emit('unblocked');
	    }
	    else {
	      connection.closeWithError(
	        fmt("Unexpected frame on channel 0"),
	        constants.UNEXPECTED_FRAME,
	        new Error(fmt("Unexpected frame on channel 0: %s",
	                      inspect(f, false))));
	    }
	  };
	}

	// This changed between versions, as did the codec, methods, etc. AMQP
	// 0-9-1 is fairly similar to 0.8, but better, and nothing implements
	// 0.8 that doesn't implement 0-9-1. In other words, it doesn't make
	// much sense to generalise here.
	C.sendProtocolHeader = function() {
	  this.sendBytes(frame.PROTOCOL_HEADER);
	};

	/*
	  The frighteningly complicated opening protocol (spec section 2.2.4):

	     Client -> Server

	       protocol header ->
	         <- start
	       start-ok ->
	     .. next two zero or more times ..
	         <- secure
	       secure-ok ->
	         <- tune
	       tune-ok ->
	       open ->
	         <- open-ok

	If I'm only supporting SASL's PLAIN mechanism (which I am for the time
	being), it gets a bit easier since the server won't in general send
	back a `secure`, it'll just send `tune` after the `start-ok`.
	(SASL PLAIN: http://tools.ietf.org/html/rfc4616)

	*/

	C.open = function(allFields, openCallback0) {
	  var self = this;
	  var openCallback = openCallback0 || function() {};

	  // This is where we'll put our negotiated values
	  var tunedOptions = Object.create(allFields);

	  function await(k) {
	    self.step(function(err, frame) {
	      if (err !== null) bail(err);
	      else if (frame.channel !== 0) {
	        bail(new Error(
	          fmt("Frame on channel != 0 during handshake: %s",
	              inspect(frame, false))));
	      }
	      else k(frame);
	    });
	  }

	  function expect(Method, k) {
	    await(function(frame) {
	      if (frame.id === Method) k(frame);
	      else {
	        bail(new Error(
	          fmt("Expected %s; got %s",
	              methodName(Method), inspect(frame, false))));
	      }
	    });
	  }

	  function bail(err) {
	    openCallback(err);
	  }

	  function send(Method) {
	    // This can throw an exception if there's some problem with the
	    // options; e.g., something is a string instead of a number.
	    try { self.sendMethod(0, Method, tunedOptions); }
	    catch (err) { bail(err); }
	  }

	  function negotiate(server, desired) {
	    // We get sent values for channelMax, frameMax and heartbeat,
	    // which we may accept or lower (subject to a minimum for
	    // frameMax, but we'll leave that to the server to enforce). In
	    // all cases, `0` really means "no limit", or rather the highest
	    // value in the encoding, e.g., unsigned short for channelMax.
	    if (server === 0 || desired === 0) {
	      // i.e., whichever places a limit, if either
	      return Math.max(server, desired);
	    }
	    else {
	      return Math.min(server, desired);
	    }
	  }

	  function onStart(start) {
	    var mechanisms = start.fields.mechanisms.toString().split(' ');
	    if (mechanisms.indexOf(allFields.mechanism) < 0) {
	      bail(new Error(fmt('SASL mechanism %s is not provided by the server',
	                         allFields.mechanism)));
	      return;
	    }
	    send(defs.ConnectionStartOk);
	    await(afterStartOk);
	  }

	  function afterStartOk(reply) {
	    switch (reply.id) {
	    case defs.ConnectionSecure:
	      bail(new Error(
	        "Wasn't expecting to have to go through secure"));
	      break;
	    case defs.ConnectionClose:
	      bail(new Error(fmt("Handshake terminated by server: %s",
	                         closeMsg(reply))));
	      break;
	    case defs.ConnectionTune:
	      var fields = reply.fields;
	      tunedOptions.frameMax =
	        negotiate(fields.frameMax, allFields.frameMax);
	      tunedOptions.channelMax =
	        negotiate(fields.channelMax, allFields.channelMax);
	      tunedOptions.heartbeat =
	        negotiate(fields.heartbeat, allFields.heartbeat);
	      send(defs.ConnectionTuneOk);
	      send(defs.ConnectionOpen);
	      expect(defs.ConnectionOpenOk, onOpenOk);
	      break;
	    default:
	      bail(new Error(
	        fmt("Expected connection.secure, connection.close, " +
	            "or connection.tune during handshake; got %s",
	            inspect(reply, false))));
	      break;
	    }
	  }

	  function onOpenOk(openOk) {
	    // Impose the maximum of the encoded value, if the negotiated
	    // value is zero, meaning "no, no limits"
	    self.channelMax = tunedOptions.channelMax || 0xffff;
	    self.frameMax = tunedOptions.frameMax || 0xffffffff;
	    // 0 means "no heartbeat", rather than "maximum period of
	    // heartbeating"
	    self.heartbeat = tunedOptions.heartbeat;
	    self.heartbeater = self.startHeartbeater();
	    self.accept = mainAccept;
	    succeed(openOk);
	  }

	  // If the server closes the connection, it's probably because of
	  // something we did
	  function endWhileOpening(err) {
	    bail(err || new Error('Socket closed abruptly ' +
	                          'during opening handshake'));
	  }

	  this.stream.on('end', endWhileOpening);
	  this.stream.on('error', endWhileOpening);

	  function succeed(ok) {
	    self.stream.removeListener('end', endWhileOpening);
	    self.stream.removeListener('error', endWhileOpening);
	    self.stream.on('error', self.onSocketError.bind(self));
	    self.stream.on('end', self.onSocketError.bind(
	      self, new Error('Unexpected close')));
	    self.on('frameError', self.onSocketError.bind(self));
	    self.acceptLoop();
	    openCallback(null, ok);
	  }

	  // Now kick off the handshake by prompting the server
	  this.sendProtocolHeader();
	  expect(defs.ConnectionStart, onStart);
	};

	// Closing things: AMQP has a closing handshake that applies to
	// closing both connects and channels. As the initiating party, I send
	// Close, then ignore all frames until I see either CloseOK --
	// which signifies that the other party has seen the Close and shut
	// the connection or channel down, so it's fine to free resources; or
	// Close, which means the other party also wanted to close the
	// whatever, and I should send CloseOk so it can free resources,
	// then go back to waiting for the CloseOk. If I receive a Close
	// out of the blue, I should throw away any unsent frames (they will
	// be ignored anyway) and send CloseOk, then clean up resources. In
	// general, Close out of the blue signals an error (or a forced
	// closure, which may as well be an error).
	//
	//  RUNNING [1] --- send Close ---> Closing [2] ---> recv Close --+
	//     |                               |                         [3]
	//     |                               +------ send CloseOk ------+
	//  recv Close                   recv CloseOk
	//     |                               |
	//     V                               V
	//  Ended [4] ---- send CloseOk ---> Closed [5]
	//
	// [1] All frames accepted; getting a Close frame from the server
	// moves to Ended; client may initiate a close by sending Close
	// itself.
	// [2] Client has initiated a close; only CloseOk or (simulataneously
	// sent) Close is accepted.
	// [3] Simultaneous close
	// [4] Server won't send any more frames; accept no more frames, send
	// CloseOk.
	// [5] Fully closed, client will send no more, server will send no
	// more. Signal 'close' or 'error'.
	//
	// There are two signalling mechanisms used in the API. The first is
	// that calling `close` will return a promise, that will either
	// resolve once the connection or channel is cleanly shut down, or
	// will reject if the shutdown times out.
	//
	// The second is the 'close' and 'error' events. These are
	// emitted as above. The events will fire *before* promises are
	// resolved.

	// Close the connection without even giving a reason. Typical.
	C.close = function(closeCallback) {
	  var k = closeCallback && function() { closeCallback(null); };
	  this.closeBecause("Cheers, thanks", constants.REPLY_SUCCESS, k);
	};

	// Close with a reason and a 'code'. I'm pretty sure RabbitMQ totally
	// ignores these; maybe it logs them. The continuation will be invoked
	// when the CloseOk has been received, and before the 'close' event.
	C.closeBecause = function(reason, code, k) {
	  this.sendMethod(0, defs.ConnectionClose, {
	    replyText: reason,
	    replyCode: code,
	    methodId: 0, classId: 0
	  });
	  var s = stackCapture('closeBecause called: ' + reason);
	  this.toClosing(s, k);
	};

	C.closeWithError = function(reason, code, error) {
	  this.emit('error', error);
	  this.closeBecause(reason, code);
	};

	C.onSocketError = function(err) {
	  if (!this.expectSocketClose) {
	    // forestall any more calls to onSocketError, since we're signed
	    // up for `'error'` *and* `'end'`
	    this.expectSocketClose = true;
	    this.emit('error', err);
	    var s = stackCapture('Socket error');
	    this.toClosed(s);
	  }
	};

	function invalidOp(msg, stack) {
	  return function() {
	    throw new IllegalOperationError(msg, stack);
	  };
	}

	function invalidateSend(conn, msg, stack) {
	  conn.sendMethod = conn.sendContent = conn.sendMessage =
	    invalidOp(msg, stack);
	}

	// A close has been initiated. Repeat: a close has been initiated.
	// This means we should not send more frames, anyway they will be
	// ignored. We also have to shut down all the channels.
	C.toClosing = function(capturedStack, k) {
	  var send = this.sendMethod.bind(this);

	  this.accept = function(f) {
	    if (f.id === defs.ConnectionCloseOk) {
	      if (k) k();
	      var s = stackCapture('ConnectionCloseOk received');
	      this.toClosed(s);
	    }
	    else if (f.id === defs.ConnectionClose) {
	      send(0, defs.ConnectionCloseOk, {});
	    }
	    // else ignore frame
	  };
	  invalidateSend(this, 'Connection closing', capturedStack);
	};

	C._closeChannels = function(capturedStack) {
	  for (var i = 1; i < this.channels.length; i++) {
	    var ch = this.channels[i];
	    if (ch !== null) {
	      ch.channel.toClosed(capturedStack); // %%% or with an error? not clear
	    }
	  }
	};

	// A close has been confirmed. Cease all communication.
	C.toClosed = function(capturedStack) {
	  this._closeChannels(capturedStack);
	  // Tidy up, invalidate enverything, dynamite the bridges.
	  invalidateSend(this, 'Connection closed', capturedStack);
	  this.accept = invalidOp('Connection closed', capturedStack);
	  if (this.heartbeater) this.heartbeater.clear();
	  // This is certainly true now, if it wasn't before
	  this.expectSocketClose = true;
	  this.stream.end();
	  this.emit('close');
	};

	// ===

	C.startHeartbeater = function() {
	  if (this.heartbeat === 0) return null;
	  else {
	    var self = this;
	    var hb = new Heart(this.heartbeat,
	                       this.checkSend.bind(this),
	                       this.checkRecv.bind(this));
	    hb.on('timeout', function() {
	      self.emit('error', new Error("Heartbeat timeout"));
	      var s = stackCapture('Heartbeat timeout');
	      self.toClosed(s);
	    });
	    hb.on('beat', function() {
	      self.sendHeartbeat();
	    });
	    return hb;
	  }
	};

	// I use an array to keep track of the channels, rather than an
	// object. The channel identifiers are numbers, and allocated by the
	// connection. If I try to allocate low numbers when they are
	// available (which I do, by looking from the start of the bitset),
	// this ought to keep the array small, and out of 'sparse array
	// storage'. I also set entries to null, rather than deleting them, in
	// the expectation that the next channel allocation will fill the slot
	// again rather than growing the array. See
	// http://www.html5rocks.com/en/tutorials/speed/v8/
	C.freshChannel = function(channel, options) {
	  var next = this.freeChannels.nextClearBit(1);
	  if (next < 0 || next > this.channelMax)
	    throw new Error("No channels left to allocate");
	  this.freeChannels.set(next);

	  var hwm = (options && options.highWaterMark) || DEFAULT_WRITE_HWM;
	  var writeBuffer = new PassThrough({
	    objectMode: true, highWaterMark: hwm
	  });
	  this.channels[next] = {channel: channel, buffer: writeBuffer};
	  writeBuffer.on('drain', function() {
	    channel.onBufferDrain();
	  });
	  this.muxer.pipeFrom(writeBuffer);
	  return next;
	};

	C.releaseChannel = function(channel) {
	  this.freeChannels.clear(channel);
	  var buffer = this.channels[channel].buffer;
	  this.muxer.unpipeFrom(buffer);
	  this.channels[channel] = null;
	};

	C.acceptLoop = function() {
	  var self = this;

	  function go() {
	    try {
	      var f; while (f = self.recvFrame()) self.accept(f);
	    }
	    catch (e) {
	      self.emit('frameError', e);
	    }
	  }
	  self.stream.on('readable', go);
	  go();
	};

	C.step = function(cb) {
	  var self = this;
	  function recv() {
	    var f;
	    try {
	      f = self.recvFrame();
	    }
	    catch (e) {
	      cb(e, null);
	      return;
	    }
	    if (f) cb(null, f);
	    else self.stream.once('readable', recv);
	  }
	  recv();
	};

	C.checkSend = function() {
	  var check = this.sentSinceLastCheck;
	  this.sentSinceLastCheck = false;
	  return check;
	}

	C.checkRecv = function() {
	  var check = this.recvSinceLastCheck;
	  this.recvSinceLastCheck = false;
	  return check;
	}

	C.sendBytes = function(bytes) {
	  this.sentSinceLastCheck = true;
	  this.stream.write(bytes);
	};

	C.sendHeartbeat = function() {
	  return this.sendBytes(frame.HEARTBEAT_BUF);
	};

	var encodeMethod = defs.encodeMethod;
	var encodeProperties = defs.encodeProperties;

	C.sendMethod = function(channel, Method, fields) {
	  var frame = encodeMethod(Method, channel, fields);
	  this.sentSinceLastCheck = true;
	  var buffer = this.channels[channel].buffer;
	  return buffer.write(frame);
	};

	C.sendMessage = function(channel,
	                         Method, fields,
	                         Properties, props,
	                         content) {
	  if (!Buffer.isBuffer(content))
	    throw new TypeError('content is not a buffer');

	  var mframe = encodeMethod(Method, channel, fields);
	  var pframe = encodeProperties(Properties, channel,
	                                content.length, props);
	  var buffer = this.channels[channel].buffer;
	  this.sentSinceLastCheck = true;

	  var methodHeaderLen = mframe.length + pframe.length;
	  var bodyLen = (content.length > 0) ?
	    content.length + FRAME_OVERHEAD : 0;
	  var allLen = methodHeaderLen + bodyLen;

	  if (allLen < SINGLE_CHUNK_THRESHOLD) {
	    var all = new Buffer(allLen);
	    var offset = mframe.copy(all, 0);
	    offset += pframe.copy(all, offset);

	    if (bodyLen > 0)
	      makeBodyFrame(channel, content).copy(all, offset);
	    return buffer.write(all);
	  }
	  else {
	    if (methodHeaderLen < SINGLE_CHUNK_THRESHOLD) {
	      var both = new Buffer(methodHeaderLen);
	      var offset = mframe.copy(both, 0);
	      pframe.copy(both, offset);
	      buffer.write(both);
	    }
	    else {
	      buffer.write(mframe);
	      buffer.write(pframe);
	    }
	    return this.sendContent(channel, content);
	  }
	};

	var FRAME_OVERHEAD = defs.FRAME_OVERHEAD;
	var makeBodyFrame = frame.makeBodyFrame;

	C.sendContent = function(channel, body) {
	  if (!Buffer.isBuffer(body)) {
	    throw new TypeError(fmt("Expected buffer; got %s", body));
	  }
	  var writeResult = true;
	  var buffer = this.channels[channel].buffer;

	  var maxBody = this.frameMax - FRAME_OVERHEAD;

	  for (var offset = 0; offset < body.length; offset += maxBody) {
	    var end = offset + maxBody;
	    var slice = (end > body.length) ? body.slice(offset) : body.slice(offset, end);
	    var bodyFrame = makeBodyFrame(channel, slice);
	    writeResult = buffer.write(bodyFrame);
	  }
	  this.sentSinceLastCheck = true;
	  return writeResult;
	};

	var parseFrame = frame.parseFrame;
	var decodeFrame = frame.decodeFrame;

	C.recvFrame = function() {
	  // %%% identifying invariants might help here?
	  var frame = parseFrame(this.rest, this.frameMax);

	  if (!frame) {
	    var incoming = this.stream.read();
	    if (incoming === null) {
	      return false;
	    }
	    else {
	      this.recvSinceLastCheck = true;
	      this.rest = Buffer.concat([this.rest, incoming]);
	      return this.recvFrame();
	    }
	  }
	  else {
	    this.rest = frame.rest;
	    return decodeFrame(frame);
	  }
	};

	function wrapStream(s) {
	  if (s instanceof Duplex) return s;
	  else {
	    var ws = new Duplex();
	    ws.wrap(s); //wraps the readable side of things
	    ws._write = function(chunk, encoding, callback) {
	      return s.write(chunk, encoding, callback);
	    };
	    return ws;
	  }
	}

	module.exports.Connection = Connection;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/** @preserve This file is generated by the script
	 * ../bin/generate-defs.js, which is not in general included in a
	 * distribution, but is available in the source repository e.g. at
	 * https://github.com/squaremo/amqp.node/
	 */
	"use strict";

	function decodeConnectionStart(buffer) {
	  var val, len, offset = 0, fields = {
	    versionMajor: void 0,
	    versionMinor: void 0,
	    serverProperties: void 0,
	    mechanisms: void 0,
	    locales: void 0
	  };
	  val = buffer[offset];
	  offset++;
	  fields.versionMajor = val;
	  val = buffer[offset];
	  offset++;
	  fields.versionMinor = val;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = decodeFields(buffer.slice(offset, offset + len));
	  offset += len;
	  fields.serverProperties = val;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = buffer.slice(offset, offset + len);
	  offset += len;
	  fields.mechanisms = val;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = buffer.slice(offset, offset + len);
	  offset += len;
	  fields.locales = val;
	  return fields;
	}

	function encodeConnectionStart(channel, fields) {
	  var len, offset = 0, val = null, varyingSize = 0, scratchOffset = 0;
	  val = fields.serverProperties;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'serverProperties'");
	  if ("object" != typeof val) throw new TypeError("Field 'serverProperties' is the wrong type; must be an object");
	  len = encodeTable(SCRATCH, val, scratchOffset);
	  var serverProperties_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	  scratchOffset += len;
	  varyingSize += serverProperties_encoded.length;
	  val = fields.mechanisms;
	  if (void 0 === val) val = new Buffer("PLAIN"); else if (!Buffer.isBuffer(val)) throw new TypeError("Field 'mechanisms' is the wrong type; must be a Buffer");
	  varyingSize += val.length;
	  val = fields.locales;
	  if (void 0 === val) val = new Buffer("en_US"); else if (!Buffer.isBuffer(val)) throw new TypeError("Field 'locales' is the wrong type; must be a Buffer");
	  varyingSize += val.length;
	  var buffer = new Buffer(22 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655370, 7);
	  offset = 11;
	  val = fields.versionMajor;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'versionMajor' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt8(val, offset);
	  offset++;
	  val = fields.versionMinor;
	  if (void 0 === val) val = 9; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'versionMinor' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt8(val, offset);
	  offset++;
	  offset += serverProperties_encoded.copy(buffer, offset);
	  val = fields.mechanisms;
	  void 0 === val && (val = new Buffer("PLAIN"));
	  len = val.length;
	  buffer.writeUInt32BE(len, offset);
	  offset += 4;
	  val.copy(buffer, offset);
	  offset += len;
	  val = fields.locales;
	  void 0 === val && (val = new Buffer("en_US"));
	  len = val.length;
	  buffer.writeUInt32BE(len, offset);
	  offset += 4;
	  val.copy(buffer, offset);
	  offset += len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionStartOk(buffer) {
	  var val, len, offset = 0, fields = {
	    clientProperties: void 0,
	    mechanism: void 0,
	    response: void 0,
	    locale: void 0
	  };
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = decodeFields(buffer.slice(offset, offset + len));
	  offset += len;
	  fields.clientProperties = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.mechanism = val;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = buffer.slice(offset, offset + len);
	  offset += len;
	  fields.response = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.locale = val;
	  return fields;
	}

	function encodeConnectionStartOk(channel, fields) {
	  var len, offset = 0, val = null, varyingSize = 0, scratchOffset = 0;
	  val = fields.clientProperties;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'clientProperties'");
	  if ("object" != typeof val) throw new TypeError("Field 'clientProperties' is the wrong type; must be an object");
	  len = encodeTable(SCRATCH, val, scratchOffset);
	  var clientProperties_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	  scratchOffset += len;
	  varyingSize += clientProperties_encoded.length;
	  val = fields.mechanism;
	  if (void 0 === val) val = "PLAIN"; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'mechanism' is the wrong type; must be a string (up to 255 chars)");
	  var mechanism_len = Buffer.byteLength(val, "utf8");
	  varyingSize += mechanism_len;
	  val = fields.response;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'response'");
	  if (!Buffer.isBuffer(val)) throw new TypeError("Field 'response' is the wrong type; must be a Buffer");
	  varyingSize += val.length;
	  val = fields.locale;
	  if (void 0 === val) val = "en_US"; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'locale' is the wrong type; must be a string (up to 255 chars)");
	  var locale_len = Buffer.byteLength(val, "utf8");
	  varyingSize += locale_len;
	  var buffer = new Buffer(18 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655371, 7);
	  offset = 11;
	  offset += clientProperties_encoded.copy(buffer, offset);
	  val = fields.mechanism;
	  void 0 === val && (val = "PLAIN");
	  buffer[offset] = mechanism_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += mechanism_len;
	  val = fields.response;
	  void 0 === val && (val = new Buffer(void 0));
	  len = val.length;
	  buffer.writeUInt32BE(len, offset);
	  offset += 4;
	  val.copy(buffer, offset);
	  offset += len;
	  val = fields.locale;
	  void 0 === val && (val = "en_US");
	  buffer[offset] = locale_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += locale_len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionSecure(buffer) {
	  var val, len, offset = 0, fields = {
	    challenge: void 0
	  };
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = buffer.slice(offset, offset + len);
	  offset += len;
	  fields.challenge = val;
	  return fields;
	}

	function encodeConnectionSecure(channel, fields) {
	  var len, offset = 0, val = null, varyingSize = 0;
	  val = fields.challenge;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'challenge'");
	  if (!Buffer.isBuffer(val)) throw new TypeError("Field 'challenge' is the wrong type; must be a Buffer");
	  varyingSize += val.length;
	  var buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655380, 7);
	  offset = 11;
	  val = fields.challenge;
	  void 0 === val && (val = new Buffer(void 0));
	  len = val.length;
	  buffer.writeUInt32BE(len, offset);
	  offset += 4;
	  val.copy(buffer, offset);
	  offset += len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionSecureOk(buffer) {
	  var val, len, offset = 0, fields = {
	    response: void 0
	  };
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = buffer.slice(offset, offset + len);
	  offset += len;
	  fields.response = val;
	  return fields;
	}

	function encodeConnectionSecureOk(channel, fields) {
	  var len, offset = 0, val = null, varyingSize = 0;
	  val = fields.response;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'response'");
	  if (!Buffer.isBuffer(val)) throw new TypeError("Field 'response' is the wrong type; must be a Buffer");
	  varyingSize += val.length;
	  var buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655381, 7);
	  offset = 11;
	  val = fields.response;
	  void 0 === val && (val = new Buffer(void 0));
	  len = val.length;
	  buffer.writeUInt32BE(len, offset);
	  offset += 4;
	  val.copy(buffer, offset);
	  offset += len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionTune(buffer) {
	  var val, offset = 0, fields = {
	    channelMax: void 0,
	    frameMax: void 0,
	    heartbeat: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.channelMax = val;
	  val = buffer.readUInt32BE(offset);
	  offset += 4;
	  fields.frameMax = val;
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.heartbeat = val;
	  return fields;
	}

	function encodeConnectionTune(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0, buffer = new Buffer(20 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655390, 7);
	  offset = 11;
	  val = fields.channelMax;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'channelMax' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.frameMax;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'frameMax' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt32BE(val, offset);
	  offset += 4;
	  val = fields.heartbeat;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'heartbeat' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionTuneOk(buffer) {
	  var val, offset = 0, fields = {
	    channelMax: void 0,
	    frameMax: void 0,
	    heartbeat: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.channelMax = val;
	  val = buffer.readUInt32BE(offset);
	  offset += 4;
	  fields.frameMax = val;
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.heartbeat = val;
	  return fields;
	}

	function encodeConnectionTuneOk(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0, buffer = new Buffer(20 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655391, 7);
	  offset = 11;
	  val = fields.channelMax;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'channelMax' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.frameMax;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'frameMax' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt32BE(val, offset);
	  offset += 4;
	  val = fields.heartbeat;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'heartbeat' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionOpen(buffer) {
	  var val, len, offset = 0, fields = {
	    virtualHost: void 0,
	    capabilities: void 0,
	    insist: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.virtualHost = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.capabilities = val;
	  val = !!(1 & buffer[offset]);
	  fields.insist = val;
	  return fields;
	}

	function encodeConnectionOpen(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.virtualHost;
	  if (void 0 === val) val = "/"; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'virtualHost' is the wrong type; must be a string (up to 255 chars)");
	  var virtualHost_len = Buffer.byteLength(val, "utf8");
	  varyingSize += virtualHost_len;
	  val = fields.capabilities;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'capabilities' is the wrong type; must be a string (up to 255 chars)");
	  var capabilities_len = Buffer.byteLength(val, "utf8");
	  varyingSize += capabilities_len;
	  var buffer = new Buffer(15 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655400, 7);
	  offset = 11;
	  val = fields.virtualHost;
	  void 0 === val && (val = "/");
	  buffer[offset] = virtualHost_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += virtualHost_len;
	  val = fields.capabilities;
	  void 0 === val && (val = "");
	  buffer[offset] = capabilities_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += capabilities_len;
	  val = fields.insist;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionOpenOk(buffer) {
	  var val, len, offset = 0, fields = {
	    knownHosts: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.knownHosts = val;
	  return fields;
	}

	function encodeConnectionOpenOk(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.knownHosts;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'knownHosts' is the wrong type; must be a string (up to 255 chars)");
	  var knownHosts_len = Buffer.byteLength(val, "utf8");
	  varyingSize += knownHosts_len;
	  var buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655401, 7);
	  offset = 11;
	  val = fields.knownHosts;
	  void 0 === val && (val = "");
	  buffer[offset] = knownHosts_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += knownHosts_len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionClose(buffer) {
	  var val, len, offset = 0, fields = {
	    replyCode: void 0,
	    replyText: void 0,
	    classId: void 0,
	    methodId: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.replyCode = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.replyText = val;
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.classId = val;
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.methodId = val;
	  return fields;
	}

	function encodeConnectionClose(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.replyText;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'replyText' is the wrong type; must be a string (up to 255 chars)");
	  var replyText_len = Buffer.byteLength(val, "utf8");
	  varyingSize += replyText_len;
	  var buffer = new Buffer(19 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655410, 7);
	  offset = 11;
	  val = fields.replyCode;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'replyCode'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'replyCode' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.replyText;
	  void 0 === val && (val = "");
	  buffer[offset] = replyText_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += replyText_len;
	  val = fields.classId;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'classId'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'classId' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.methodId;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'methodId'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'methodId' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionCloseOk() {
	  var fields = {};
	  return fields;
	}

	function encodeConnectionCloseOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655411, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionBlocked(buffer) {
	  var val, len, offset = 0, fields = {
	    reason: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.reason = val;
	  return fields;
	}

	function encodeConnectionBlocked(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.reason;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'reason' is the wrong type; must be a string (up to 255 chars)");
	  var reason_len = Buffer.byteLength(val, "utf8");
	  varyingSize += reason_len;
	  var buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655420, 7);
	  offset = 11;
	  val = fields.reason;
	  void 0 === val && (val = "");
	  buffer[offset] = reason_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += reason_len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConnectionUnblocked() {
	  var fields = {};
	  return fields;
	}

	function encodeConnectionUnblocked(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(655421, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeChannelOpen(buffer) {
	  var val, len, offset = 0, fields = {
	    outOfBand: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.outOfBand = val;
	  return fields;
	}

	function encodeChannelOpen(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.outOfBand;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'outOfBand' is the wrong type; must be a string (up to 255 chars)");
	  var outOfBand_len = Buffer.byteLength(val, "utf8");
	  varyingSize += outOfBand_len;
	  var buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(1310730, 7);
	  offset = 11;
	  val = fields.outOfBand;
	  void 0 === val && (val = "");
	  buffer[offset] = outOfBand_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += outOfBand_len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeChannelOpenOk(buffer) {
	  var val, len, offset = 0, fields = {
	    channelId: void 0
	  };
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = buffer.slice(offset, offset + len);
	  offset += len;
	  fields.channelId = val;
	  return fields;
	}

	function encodeChannelOpenOk(channel, fields) {
	  var len, offset = 0, val = null, varyingSize = 0;
	  val = fields.channelId;
	  if (void 0 === val) val = new Buffer(""); else if (!Buffer.isBuffer(val)) throw new TypeError("Field 'channelId' is the wrong type; must be a Buffer");
	  varyingSize += val.length;
	  var buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(1310731, 7);
	  offset = 11;
	  val = fields.channelId;
	  void 0 === val && (val = new Buffer(""));
	  len = val.length;
	  buffer.writeUInt32BE(len, offset);
	  offset += 4;
	  val.copy(buffer, offset);
	  offset += len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeChannelFlow(buffer) {
	  var val, offset = 0, fields = {
	    active: void 0
	  };
	  val = !!(1 & buffer[offset]);
	  fields.active = val;
	  return fields;
	}

	function encodeChannelFlow(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(1310740, 7);
	  offset = 11;
	  val = fields.active;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'active'");
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeChannelFlowOk(buffer) {
	  var val, offset = 0, fields = {
	    active: void 0
	  };
	  val = !!(1 & buffer[offset]);
	  fields.active = val;
	  return fields;
	}

	function encodeChannelFlowOk(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(1310741, 7);
	  offset = 11;
	  val = fields.active;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'active'");
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeChannelClose(buffer) {
	  var val, len, offset = 0, fields = {
	    replyCode: void 0,
	    replyText: void 0,
	    classId: void 0,
	    methodId: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.replyCode = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.replyText = val;
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.classId = val;
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.methodId = val;
	  return fields;
	}

	function encodeChannelClose(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.replyText;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'replyText' is the wrong type; must be a string (up to 255 chars)");
	  var replyText_len = Buffer.byteLength(val, "utf8");
	  varyingSize += replyText_len;
	  var buffer = new Buffer(19 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(1310760, 7);
	  offset = 11;
	  val = fields.replyCode;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'replyCode'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'replyCode' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.replyText;
	  void 0 === val && (val = "");
	  buffer[offset] = replyText_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += replyText_len;
	  val = fields.classId;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'classId'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'classId' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.methodId;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'methodId'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'methodId' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeChannelCloseOk() {
	  var fields = {};
	  return fields;
	}

	function encodeChannelCloseOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(1310761, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeAccessRequest(buffer) {
	  var val, len, offset = 0, fields = {
	    realm: void 0,
	    exclusive: void 0,
	    passive: void 0,
	    active: void 0,
	    write: void 0,
	    read: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.realm = val;
	  val = !!(1 & buffer[offset]);
	  fields.exclusive = val;
	  val = !!(2 & buffer[offset]);
	  fields.passive = val;
	  val = !!(4 & buffer[offset]);
	  fields.active = val;
	  val = !!(8 & buffer[offset]);
	  fields.write = val;
	  val = !!(16 & buffer[offset]);
	  fields.read = val;
	  return fields;
	}

	function encodeAccessRequest(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.realm;
	  if (void 0 === val) val = "/data"; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'realm' is the wrong type; must be a string (up to 255 chars)");
	  var realm_len = Buffer.byteLength(val, "utf8");
	  varyingSize += realm_len;
	  var buffer = new Buffer(14 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(1966090, 7);
	  offset = 11;
	  val = fields.realm;
	  void 0 === val && (val = "/data");
	  buffer[offset] = realm_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += realm_len;
	  val = fields.exclusive;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  val = fields.passive;
	  void 0 === val && (val = !0);
	  val && (bits += 2);
	  val = fields.active;
	  void 0 === val && (val = !0);
	  val && (bits += 4);
	  val = fields.write;
	  void 0 === val && (val = !0);
	  val && (bits += 8);
	  val = fields.read;
	  void 0 === val && (val = !0);
	  val && (bits += 16);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeAccessRequestOk(buffer) {
	  var val, offset = 0, fields = {
	    ticket: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  return fields;
	}

	function encodeAccessRequestOk(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0, buffer = new Buffer(14 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(1966091, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 1; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeExchangeDeclare(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    exchange: void 0,
	    type: void 0,
	    passive: void 0,
	    durable: void 0,
	    autoDelete: void 0,
	    internal: void 0,
	    nowait: void 0,
	    arguments: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.exchange = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.type = val;
	  val = !!(1 & buffer[offset]);
	  fields.passive = val;
	  val = !!(2 & buffer[offset]);
	  fields.durable = val;
	  val = !!(4 & buffer[offset]);
	  fields.autoDelete = val;
	  val = !!(8 & buffer[offset]);
	  fields.internal = val;
	  val = !!(16 & buffer[offset]);
	  fields.nowait = val;
	  offset++;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = decodeFields(buffer.slice(offset, offset + len));
	  offset += len;
	  fields.arguments = val;
	  return fields;
	}

	function encodeExchangeDeclare(channel, fields) {
	  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;
	  val = fields.exchange;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'exchange'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'exchange' is the wrong type; must be a string (up to 255 chars)");
	  var exchange_len = Buffer.byteLength(val, "utf8");
	  varyingSize += exchange_len;
	  val = fields.type;
	  if (void 0 === val) val = "direct"; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'type' is the wrong type; must be a string (up to 255 chars)");
	  var type_len = Buffer.byteLength(val, "utf8");
	  varyingSize += type_len;
	  val = fields.arguments;
	  if (void 0 === val) val = {}; else if ("object" != typeof val) throw new TypeError("Field 'arguments' is the wrong type; must be an object");
	  len = encodeTable(SCRATCH, val, scratchOffset);
	  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	  scratchOffset += len;
	  varyingSize += arguments_encoded.length;
	  var buffer = new Buffer(17 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(2621450, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.exchange;
	  void 0 === val && (val = void 0);
	  buffer[offset] = exchange_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += exchange_len;
	  val = fields.type;
	  void 0 === val && (val = "direct");
	  buffer[offset] = type_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += type_len;
	  val = fields.passive;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  val = fields.durable;
	  void 0 === val && (val = !1);
	  val && (bits += 2);
	  val = fields.autoDelete;
	  void 0 === val && (val = !1);
	  val && (bits += 4);
	  val = fields.internal;
	  void 0 === val && (val = !1);
	  val && (bits += 8);
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 16);
	  buffer[offset] = bits;
	  offset++;
	  bits = 0;
	  offset += arguments_encoded.copy(buffer, offset);
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeExchangeDeclareOk() {
	  var fields = {};
	  return fields;
	}

	function encodeExchangeDeclareOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(2621451, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeExchangeDelete(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    exchange: void 0,
	    ifUnused: void 0,
	    nowait: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.exchange = val;
	  val = !!(1 & buffer[offset]);
	  fields.ifUnused = val;
	  val = !!(2 & buffer[offset]);
	  fields.nowait = val;
	  return fields;
	}

	function encodeExchangeDelete(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.exchange;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'exchange'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'exchange' is the wrong type; must be a string (up to 255 chars)");
	  var exchange_len = Buffer.byteLength(val, "utf8");
	  varyingSize += exchange_len;
	  var buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(2621460, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.exchange;
	  void 0 === val && (val = void 0);
	  buffer[offset] = exchange_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += exchange_len;
	  val = fields.ifUnused;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 2);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeExchangeDeleteOk() {
	  var fields = {};
	  return fields;
	}

	function encodeExchangeDeleteOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(2621461, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeExchangeBind(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    destination: void 0,
	    source: void 0,
	    routingKey: void 0,
	    nowait: void 0,
	    arguments: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.destination = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.source = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.routingKey = val;
	  val = !!(1 & buffer[offset]);
	  fields.nowait = val;
	  offset++;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = decodeFields(buffer.slice(offset, offset + len));
	  offset += len;
	  fields.arguments = val;
	  return fields;
	}

	function encodeExchangeBind(channel, fields) {
	  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;
	  val = fields.destination;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'destination'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'destination' is the wrong type; must be a string (up to 255 chars)");
	  var destination_len = Buffer.byteLength(val, "utf8");
	  varyingSize += destination_len;
	  val = fields.source;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'source'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'source' is the wrong type; must be a string (up to 255 chars)");
	  var source_len = Buffer.byteLength(val, "utf8");
	  varyingSize += source_len;
	  val = fields.routingKey;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'routingKey' is the wrong type; must be a string (up to 255 chars)");
	  var routingKey_len = Buffer.byteLength(val, "utf8");
	  varyingSize += routingKey_len;
	  val = fields.arguments;
	  if (void 0 === val) val = {}; else if ("object" != typeof val) throw new TypeError("Field 'arguments' is the wrong type; must be an object");
	  len = encodeTable(SCRATCH, val, scratchOffset);
	  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	  scratchOffset += len;
	  varyingSize += arguments_encoded.length;
	  var buffer = new Buffer(18 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(2621470, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.destination;
	  void 0 === val && (val = void 0);
	  buffer[offset] = destination_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += destination_len;
	  val = fields.source;
	  void 0 === val && (val = void 0);
	  buffer[offset] = source_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += source_len;
	  val = fields.routingKey;
	  void 0 === val && (val = "");
	  buffer[offset] = routingKey_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += routingKey_len;
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  bits = 0;
	  offset += arguments_encoded.copy(buffer, offset);
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeExchangeBindOk() {
	  var fields = {};
	  return fields;
	}

	function encodeExchangeBindOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(2621471, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeExchangeUnbind(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    destination: void 0,
	    source: void 0,
	    routingKey: void 0,
	    nowait: void 0,
	    arguments: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.destination = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.source = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.routingKey = val;
	  val = !!(1 & buffer[offset]);
	  fields.nowait = val;
	  offset++;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = decodeFields(buffer.slice(offset, offset + len));
	  offset += len;
	  fields.arguments = val;
	  return fields;
	}

	function encodeExchangeUnbind(channel, fields) {
	  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;
	  val = fields.destination;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'destination'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'destination' is the wrong type; must be a string (up to 255 chars)");
	  var destination_len = Buffer.byteLength(val, "utf8");
	  varyingSize += destination_len;
	  val = fields.source;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'source'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'source' is the wrong type; must be a string (up to 255 chars)");
	  var source_len = Buffer.byteLength(val, "utf8");
	  varyingSize += source_len;
	  val = fields.routingKey;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'routingKey' is the wrong type; must be a string (up to 255 chars)");
	  var routingKey_len = Buffer.byteLength(val, "utf8");
	  varyingSize += routingKey_len;
	  val = fields.arguments;
	  if (void 0 === val) val = {}; else if ("object" != typeof val) throw new TypeError("Field 'arguments' is the wrong type; must be an object");
	  len = encodeTable(SCRATCH, val, scratchOffset);
	  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	  scratchOffset += len;
	  varyingSize += arguments_encoded.length;
	  var buffer = new Buffer(18 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(2621480, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.destination;
	  void 0 === val && (val = void 0);
	  buffer[offset] = destination_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += destination_len;
	  val = fields.source;
	  void 0 === val && (val = void 0);
	  buffer[offset] = source_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += source_len;
	  val = fields.routingKey;
	  void 0 === val && (val = "");
	  buffer[offset] = routingKey_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += routingKey_len;
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  bits = 0;
	  offset += arguments_encoded.copy(buffer, offset);
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeExchangeUnbindOk() {
	  var fields = {};
	  return fields;
	}

	function encodeExchangeUnbindOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(2621491, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueueDeclare(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    queue: void 0,
	    passive: void 0,
	    durable: void 0,
	    exclusive: void 0,
	    autoDelete: void 0,
	    nowait: void 0,
	    arguments: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.queue = val;
	  val = !!(1 & buffer[offset]);
	  fields.passive = val;
	  val = !!(2 & buffer[offset]);
	  fields.durable = val;
	  val = !!(4 & buffer[offset]);
	  fields.exclusive = val;
	  val = !!(8 & buffer[offset]);
	  fields.autoDelete = val;
	  val = !!(16 & buffer[offset]);
	  fields.nowait = val;
	  offset++;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = decodeFields(buffer.slice(offset, offset + len));
	  offset += len;
	  fields.arguments = val;
	  return fields;
	}

	function encodeQueueDeclare(channel, fields) {
	  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;
	  val = fields.queue;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'queue' is the wrong type; must be a string (up to 255 chars)");
	  var queue_len = Buffer.byteLength(val, "utf8");
	  varyingSize += queue_len;
	  val = fields.arguments;
	  if (void 0 === val) val = {}; else if ("object" != typeof val) throw new TypeError("Field 'arguments' is the wrong type; must be an object");
	  len = encodeTable(SCRATCH, val, scratchOffset);
	  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	  scratchOffset += len;
	  varyingSize += arguments_encoded.length;
	  var buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276810, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.queue;
	  void 0 === val && (val = "");
	  buffer[offset] = queue_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += queue_len;
	  val = fields.passive;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  val = fields.durable;
	  void 0 === val && (val = !1);
	  val && (bits += 2);
	  val = fields.exclusive;
	  void 0 === val && (val = !1);
	  val && (bits += 4);
	  val = fields.autoDelete;
	  void 0 === val && (val = !1);
	  val && (bits += 8);
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 16);
	  buffer[offset] = bits;
	  offset++;
	  bits = 0;
	  offset += arguments_encoded.copy(buffer, offset);
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueueDeclareOk(buffer) {
	  var val, len, offset = 0, fields = {
	    queue: void 0,
	    messageCount: void 0,
	    consumerCount: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.queue = val;
	  val = buffer.readUInt32BE(offset);
	  offset += 4;
	  fields.messageCount = val;
	  val = buffer.readUInt32BE(offset);
	  offset += 4;
	  fields.consumerCount = val;
	  return fields;
	}

	function encodeQueueDeclareOk(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.queue;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'queue'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'queue' is the wrong type; must be a string (up to 255 chars)");
	  var queue_len = Buffer.byteLength(val, "utf8");
	  varyingSize += queue_len;
	  var buffer = new Buffer(21 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276811, 7);
	  offset = 11;
	  val = fields.queue;
	  void 0 === val && (val = void 0);
	  buffer[offset] = queue_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += queue_len;
	  val = fields.messageCount;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'messageCount'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'messageCount' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt32BE(val, offset);
	  offset += 4;
	  val = fields.consumerCount;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'consumerCount'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'consumerCount' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt32BE(val, offset);
	  offset += 4;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueueBind(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    queue: void 0,
	    exchange: void 0,
	    routingKey: void 0,
	    nowait: void 0,
	    arguments: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.queue = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.exchange = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.routingKey = val;
	  val = !!(1 & buffer[offset]);
	  fields.nowait = val;
	  offset++;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = decodeFields(buffer.slice(offset, offset + len));
	  offset += len;
	  fields.arguments = val;
	  return fields;
	}

	function encodeQueueBind(channel, fields) {
	  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;
	  val = fields.queue;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'queue' is the wrong type; must be a string (up to 255 chars)");
	  var queue_len = Buffer.byteLength(val, "utf8");
	  varyingSize += queue_len;
	  val = fields.exchange;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'exchange'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'exchange' is the wrong type; must be a string (up to 255 chars)");
	  var exchange_len = Buffer.byteLength(val, "utf8");
	  varyingSize += exchange_len;
	  val = fields.routingKey;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'routingKey' is the wrong type; must be a string (up to 255 chars)");
	  var routingKey_len = Buffer.byteLength(val, "utf8");
	  varyingSize += routingKey_len;
	  val = fields.arguments;
	  if (void 0 === val) val = {}; else if ("object" != typeof val) throw new TypeError("Field 'arguments' is the wrong type; must be an object");
	  len = encodeTable(SCRATCH, val, scratchOffset);
	  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	  scratchOffset += len;
	  varyingSize += arguments_encoded.length;
	  var buffer = new Buffer(18 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276820, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.queue;
	  void 0 === val && (val = "");
	  buffer[offset] = queue_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += queue_len;
	  val = fields.exchange;
	  void 0 === val && (val = void 0);
	  buffer[offset] = exchange_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += exchange_len;
	  val = fields.routingKey;
	  void 0 === val && (val = "");
	  buffer[offset] = routingKey_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += routingKey_len;
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  bits = 0;
	  offset += arguments_encoded.copy(buffer, offset);
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueueBindOk() {
	  var fields = {};
	  return fields;
	}

	function encodeQueueBindOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276821, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueuePurge(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    queue: void 0,
	    nowait: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.queue = val;
	  val = !!(1 & buffer[offset]);
	  fields.nowait = val;
	  return fields;
	}

	function encodeQueuePurge(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.queue;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'queue' is the wrong type; must be a string (up to 255 chars)");
	  var queue_len = Buffer.byteLength(val, "utf8");
	  varyingSize += queue_len;
	  var buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276830, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.queue;
	  void 0 === val && (val = "");
	  buffer[offset] = queue_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += queue_len;
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueuePurgeOk(buffer) {
	  var val, offset = 0, fields = {
	    messageCount: void 0
	  };
	  val = buffer.readUInt32BE(offset);
	  offset += 4;
	  fields.messageCount = val;
	  return fields;
	}

	function encodeQueuePurgeOk(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0, buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276831, 7);
	  offset = 11;
	  val = fields.messageCount;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'messageCount'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'messageCount' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt32BE(val, offset);
	  offset += 4;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueueDelete(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    queue: void 0,
	    ifUnused: void 0,
	    ifEmpty: void 0,
	    nowait: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.queue = val;
	  val = !!(1 & buffer[offset]);
	  fields.ifUnused = val;
	  val = !!(2 & buffer[offset]);
	  fields.ifEmpty = val;
	  val = !!(4 & buffer[offset]);
	  fields.nowait = val;
	  return fields;
	}

	function encodeQueueDelete(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.queue;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'queue' is the wrong type; must be a string (up to 255 chars)");
	  var queue_len = Buffer.byteLength(val, "utf8");
	  varyingSize += queue_len;
	  var buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276840, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.queue;
	  void 0 === val && (val = "");
	  buffer[offset] = queue_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += queue_len;
	  val = fields.ifUnused;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  val = fields.ifEmpty;
	  void 0 === val && (val = !1);
	  val && (bits += 2);
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 4);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueueDeleteOk(buffer) {
	  var val, offset = 0, fields = {
	    messageCount: void 0
	  };
	  val = buffer.readUInt32BE(offset);
	  offset += 4;
	  fields.messageCount = val;
	  return fields;
	}

	function encodeQueueDeleteOk(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0, buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276841, 7);
	  offset = 11;
	  val = fields.messageCount;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'messageCount'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'messageCount' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt32BE(val, offset);
	  offset += 4;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueueUnbind(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    queue: void 0,
	    exchange: void 0,
	    routingKey: void 0,
	    arguments: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.queue = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.exchange = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.routingKey = val;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = decodeFields(buffer.slice(offset, offset + len));
	  offset += len;
	  fields.arguments = val;
	  return fields;
	}

	function encodeQueueUnbind(channel, fields) {
	  var len, offset = 0, val = null, varyingSize = 0, scratchOffset = 0;
	  val = fields.queue;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'queue' is the wrong type; must be a string (up to 255 chars)");
	  var queue_len = Buffer.byteLength(val, "utf8");
	  varyingSize += queue_len;
	  val = fields.exchange;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'exchange'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'exchange' is the wrong type; must be a string (up to 255 chars)");
	  var exchange_len = Buffer.byteLength(val, "utf8");
	  varyingSize += exchange_len;
	  val = fields.routingKey;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'routingKey' is the wrong type; must be a string (up to 255 chars)");
	  var routingKey_len = Buffer.byteLength(val, "utf8");
	  varyingSize += routingKey_len;
	  val = fields.arguments;
	  if (void 0 === val) val = {}; else if ("object" != typeof val) throw new TypeError("Field 'arguments' is the wrong type; must be an object");
	  len = encodeTable(SCRATCH, val, scratchOffset);
	  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	  scratchOffset += len;
	  varyingSize += arguments_encoded.length;
	  var buffer = new Buffer(17 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276850, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.queue;
	  void 0 === val && (val = "");
	  buffer[offset] = queue_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += queue_len;
	  val = fields.exchange;
	  void 0 === val && (val = void 0);
	  buffer[offset] = exchange_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += exchange_len;
	  val = fields.routingKey;
	  void 0 === val && (val = "");
	  buffer[offset] = routingKey_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += routingKey_len;
	  offset += arguments_encoded.copy(buffer, offset);
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeQueueUnbindOk() {
	  var fields = {};
	  return fields;
	}

	function encodeQueueUnbindOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3276851, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicQos(buffer) {
	  var val, offset = 0, fields = {
	    prefetchSize: void 0,
	    prefetchCount: void 0,
	    global: void 0
	  };
	  val = buffer.readUInt32BE(offset);
	  offset += 4;
	  fields.prefetchSize = val;
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.prefetchCount = val;
	  val = !!(1 & buffer[offset]);
	  fields.global = val;
	  return fields;
	}

	function encodeBasicQos(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = new Buffer(19 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932170, 7);
	  offset = 11;
	  val = fields.prefetchSize;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'prefetchSize' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt32BE(val, offset);
	  offset += 4;
	  val = fields.prefetchCount;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'prefetchCount' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.global;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicQosOk() {
	  var fields = {};
	  return fields;
	}

	function encodeBasicQosOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932171, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicConsume(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    queue: void 0,
	    consumerTag: void 0,
	    noLocal: void 0,
	    noAck: void 0,
	    exclusive: void 0,
	    nowait: void 0,
	    arguments: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.queue = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.consumerTag = val;
	  val = !!(1 & buffer[offset]);
	  fields.noLocal = val;
	  val = !!(2 & buffer[offset]);
	  fields.noAck = val;
	  val = !!(4 & buffer[offset]);
	  fields.exclusive = val;
	  val = !!(8 & buffer[offset]);
	  fields.nowait = val;
	  offset++;
	  len = buffer.readUInt32BE(offset);
	  offset += 4;
	  val = decodeFields(buffer.slice(offset, offset + len));
	  offset += len;
	  fields.arguments = val;
	  return fields;
	}

	function encodeBasicConsume(channel, fields) {
	  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;
	  val = fields.queue;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'queue' is the wrong type; must be a string (up to 255 chars)");
	  var queue_len = Buffer.byteLength(val, "utf8");
	  varyingSize += queue_len;
	  val = fields.consumerTag;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)");
	  var consumerTag_len = Buffer.byteLength(val, "utf8");
	  varyingSize += consumerTag_len;
	  val = fields.arguments;
	  if (void 0 === val) val = {}; else if ("object" != typeof val) throw new TypeError("Field 'arguments' is the wrong type; must be an object");
	  len = encodeTable(SCRATCH, val, scratchOffset);
	  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	  scratchOffset += len;
	  varyingSize += arguments_encoded.length;
	  var buffer = new Buffer(17 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932180, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.queue;
	  void 0 === val && (val = "");
	  buffer[offset] = queue_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += queue_len;
	  val = fields.consumerTag;
	  void 0 === val && (val = "");
	  buffer[offset] = consumerTag_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += consumerTag_len;
	  val = fields.noLocal;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  val = fields.noAck;
	  void 0 === val && (val = !1);
	  val && (bits += 2);
	  val = fields.exclusive;
	  void 0 === val && (val = !1);
	  val && (bits += 4);
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 8);
	  buffer[offset] = bits;
	  offset++;
	  bits = 0;
	  offset += arguments_encoded.copy(buffer, offset);
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicConsumeOk(buffer) {
	  var val, len, offset = 0, fields = {
	    consumerTag: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.consumerTag = val;
	  return fields;
	}

	function encodeBasicConsumeOk(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.consumerTag;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'consumerTag'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)");
	  var consumerTag_len = Buffer.byteLength(val, "utf8");
	  varyingSize += consumerTag_len;
	  var buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932181, 7);
	  offset = 11;
	  val = fields.consumerTag;
	  void 0 === val && (val = void 0);
	  buffer[offset] = consumerTag_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += consumerTag_len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicCancel(buffer) {
	  var val, len, offset = 0, fields = {
	    consumerTag: void 0,
	    nowait: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.consumerTag = val;
	  val = !!(1 & buffer[offset]);
	  fields.nowait = val;
	  return fields;
	}

	function encodeBasicCancel(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.consumerTag;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'consumerTag'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)");
	  var consumerTag_len = Buffer.byteLength(val, "utf8");
	  varyingSize += consumerTag_len;
	  var buffer = new Buffer(14 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932190, 7);
	  offset = 11;
	  val = fields.consumerTag;
	  void 0 === val && (val = void 0);
	  buffer[offset] = consumerTag_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += consumerTag_len;
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicCancelOk(buffer) {
	  var val, len, offset = 0, fields = {
	    consumerTag: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.consumerTag = val;
	  return fields;
	}

	function encodeBasicCancelOk(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.consumerTag;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'consumerTag'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)");
	  var consumerTag_len = Buffer.byteLength(val, "utf8");
	  varyingSize += consumerTag_len;
	  var buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932191, 7);
	  offset = 11;
	  val = fields.consumerTag;
	  void 0 === val && (val = void 0);
	  buffer[offset] = consumerTag_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += consumerTag_len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicPublish(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    exchange: void 0,
	    routingKey: void 0,
	    mandatory: void 0,
	    immediate: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.exchange = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.routingKey = val;
	  val = !!(1 & buffer[offset]);
	  fields.mandatory = val;
	  val = !!(2 & buffer[offset]);
	  fields.immediate = val;
	  return fields;
	}

	function encodeBasicPublish(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.exchange;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'exchange' is the wrong type; must be a string (up to 255 chars)");
	  var exchange_len = Buffer.byteLength(val, "utf8");
	  varyingSize += exchange_len;
	  val = fields.routingKey;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'routingKey' is the wrong type; must be a string (up to 255 chars)");
	  var routingKey_len = Buffer.byteLength(val, "utf8");
	  varyingSize += routingKey_len;
	  var buffer = new Buffer(17 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932200, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.exchange;
	  void 0 === val && (val = "");
	  buffer[offset] = exchange_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += exchange_len;
	  val = fields.routingKey;
	  void 0 === val && (val = "");
	  buffer[offset] = routingKey_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += routingKey_len;
	  val = fields.mandatory;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  val = fields.immediate;
	  void 0 === val && (val = !1);
	  val && (bits += 2);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicReturn(buffer) {
	  var val, len, offset = 0, fields = {
	    replyCode: void 0,
	    replyText: void 0,
	    exchange: void 0,
	    routingKey: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.replyCode = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.replyText = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.exchange = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.routingKey = val;
	  return fields;
	}

	function encodeBasicReturn(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.replyText;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'replyText' is the wrong type; must be a string (up to 255 chars)");
	  var replyText_len = Buffer.byteLength(val, "utf8");
	  varyingSize += replyText_len;
	  val = fields.exchange;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'exchange'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'exchange' is the wrong type; must be a string (up to 255 chars)");
	  var exchange_len = Buffer.byteLength(val, "utf8");
	  varyingSize += exchange_len;
	  val = fields.routingKey;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'routingKey'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'routingKey' is the wrong type; must be a string (up to 255 chars)");
	  var routingKey_len = Buffer.byteLength(val, "utf8");
	  varyingSize += routingKey_len;
	  var buffer = new Buffer(17 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932210, 7);
	  offset = 11;
	  val = fields.replyCode;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'replyCode'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'replyCode' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.replyText;
	  void 0 === val && (val = "");
	  buffer[offset] = replyText_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += replyText_len;
	  val = fields.exchange;
	  void 0 === val && (val = void 0);
	  buffer[offset] = exchange_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += exchange_len;
	  val = fields.routingKey;
	  void 0 === val && (val = void 0);
	  buffer[offset] = routingKey_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += routingKey_len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicDeliver(buffer) {
	  var val, len, offset = 0, fields = {
	    consumerTag: void 0,
	    deliveryTag: void 0,
	    redelivered: void 0,
	    exchange: void 0,
	    routingKey: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.consumerTag = val;
	  val = ints.readUInt64BE(buffer, offset);
	  offset += 8;
	  fields.deliveryTag = val;
	  val = !!(1 & buffer[offset]);
	  fields.redelivered = val;
	  offset++;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.exchange = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.routingKey = val;
	  return fields;
	}

	function encodeBasicDeliver(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.consumerTag;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'consumerTag'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)");
	  var consumerTag_len = Buffer.byteLength(val, "utf8");
	  varyingSize += consumerTag_len;
	  val = fields.exchange;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'exchange'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'exchange' is the wrong type; must be a string (up to 255 chars)");
	  var exchange_len = Buffer.byteLength(val, "utf8");
	  varyingSize += exchange_len;
	  val = fields.routingKey;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'routingKey'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'routingKey' is the wrong type; must be a string (up to 255 chars)");
	  var routingKey_len = Buffer.byteLength(val, "utf8");
	  varyingSize += routingKey_len;
	  var buffer = new Buffer(24 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932220, 7);
	  offset = 11;
	  val = fields.consumerTag;
	  void 0 === val && (val = void 0);
	  buffer[offset] = consumerTag_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += consumerTag_len;
	  val = fields.deliveryTag;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'deliveryTag'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'deliveryTag' is the wrong type; must be a number (but not NaN)");
	  ints.writeUInt64BE(buffer, val, offset);
	  offset += 8;
	  val = fields.redelivered;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  bits = 0;
	  val = fields.exchange;
	  void 0 === val && (val = void 0);
	  buffer[offset] = exchange_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += exchange_len;
	  val = fields.routingKey;
	  void 0 === val && (val = void 0);
	  buffer[offset] = routingKey_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += routingKey_len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicGet(buffer) {
	  var val, len, offset = 0, fields = {
	    ticket: void 0,
	    queue: void 0,
	    noAck: void 0
	  };
	  val = buffer.readUInt16BE(offset);
	  offset += 2;
	  fields.ticket = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.queue = val;
	  val = !!(1 & buffer[offset]);
	  fields.noAck = val;
	  return fields;
	}

	function encodeBasicGet(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.queue;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'queue' is the wrong type; must be a string (up to 255 chars)");
	  var queue_len = Buffer.byteLength(val, "utf8");
	  varyingSize += queue_len;
	  var buffer = new Buffer(16 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932230, 7);
	  offset = 11;
	  val = fields.ticket;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'ticket' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt16BE(val, offset);
	  offset += 2;
	  val = fields.queue;
	  void 0 === val && (val = "");
	  buffer[offset] = queue_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += queue_len;
	  val = fields.noAck;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicGetOk(buffer) {
	  var val, len, offset = 0, fields = {
	    deliveryTag: void 0,
	    redelivered: void 0,
	    exchange: void 0,
	    routingKey: void 0,
	    messageCount: void 0
	  };
	  val = ints.readUInt64BE(buffer, offset);
	  offset += 8;
	  fields.deliveryTag = val;
	  val = !!(1 & buffer[offset]);
	  fields.redelivered = val;
	  offset++;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.exchange = val;
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.routingKey = val;
	  val = buffer.readUInt32BE(offset);
	  offset += 4;
	  fields.messageCount = val;
	  return fields;
	}

	function encodeBasicGetOk(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0;
	  val = fields.exchange;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'exchange'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'exchange' is the wrong type; must be a string (up to 255 chars)");
	  var exchange_len = Buffer.byteLength(val, "utf8");
	  varyingSize += exchange_len;
	  val = fields.routingKey;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'routingKey'");
	  if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'routingKey' is the wrong type; must be a string (up to 255 chars)");
	  var routingKey_len = Buffer.byteLength(val, "utf8");
	  varyingSize += routingKey_len;
	  var buffer = new Buffer(27 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932231, 7);
	  offset = 11;
	  val = fields.deliveryTag;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'deliveryTag'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'deliveryTag' is the wrong type; must be a number (but not NaN)");
	  ints.writeUInt64BE(buffer, val, offset);
	  offset += 8;
	  val = fields.redelivered;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  bits = 0;
	  val = fields.exchange;
	  void 0 === val && (val = void 0);
	  buffer[offset] = exchange_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += exchange_len;
	  val = fields.routingKey;
	  void 0 === val && (val = void 0);
	  buffer[offset] = routingKey_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += routingKey_len;
	  val = fields.messageCount;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'messageCount'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'messageCount' is the wrong type; must be a number (but not NaN)");
	  buffer.writeUInt32BE(val, offset);
	  offset += 4;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicGetEmpty(buffer) {
	  var val, len, offset = 0, fields = {
	    clusterId: void 0
	  };
	  len = buffer.readUInt8(offset);
	  offset++;
	  val = buffer.toString("utf8", offset, offset + len);
	  offset += len;
	  fields.clusterId = val;
	  return fields;
	}

	function encodeBasicGetEmpty(channel, fields) {
	  var offset = 0, val = null, varyingSize = 0;
	  val = fields.clusterId;
	  if (void 0 === val) val = ""; else if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'clusterId' is the wrong type; must be a string (up to 255 chars)");
	  var clusterId_len = Buffer.byteLength(val, "utf8");
	  varyingSize += clusterId_len;
	  var buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932232, 7);
	  offset = 11;
	  val = fields.clusterId;
	  void 0 === val && (val = "");
	  buffer[offset] = clusterId_len;
	  offset++;
	  buffer.write(val, offset, "utf8");
	  offset += clusterId_len;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicAck(buffer) {
	  var val, offset = 0, fields = {
	    deliveryTag: void 0,
	    multiple: void 0
	  };
	  val = ints.readUInt64BE(buffer, offset);
	  offset += 8;
	  fields.deliveryTag = val;
	  val = !!(1 & buffer[offset]);
	  fields.multiple = val;
	  return fields;
	}

	function encodeBasicAck(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = new Buffer(21 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932240, 7);
	  offset = 11;
	  val = fields.deliveryTag;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'deliveryTag' is the wrong type; must be a number (but not NaN)");
	  ints.writeUInt64BE(buffer, val, offset);
	  offset += 8;
	  val = fields.multiple;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicReject(buffer) {
	  var val, offset = 0, fields = {
	    deliveryTag: void 0,
	    requeue: void 0
	  };
	  val = ints.readUInt64BE(buffer, offset);
	  offset += 8;
	  fields.deliveryTag = val;
	  val = !!(1 & buffer[offset]);
	  fields.requeue = val;
	  return fields;
	}

	function encodeBasicReject(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = new Buffer(21 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932250, 7);
	  offset = 11;
	  val = fields.deliveryTag;
	  if (void 0 === val) throw new Error("Missing value for mandatory field 'deliveryTag'");
	  if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'deliveryTag' is the wrong type; must be a number (but not NaN)");
	  ints.writeUInt64BE(buffer, val, offset);
	  offset += 8;
	  val = fields.requeue;
	  void 0 === val && (val = !0);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicRecoverAsync(buffer) {
	  var val, offset = 0, fields = {
	    requeue: void 0
	  };
	  val = !!(1 & buffer[offset]);
	  fields.requeue = val;
	  return fields;
	}

	function encodeBasicRecoverAsync(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932260, 7);
	  offset = 11;
	  val = fields.requeue;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicRecover(buffer) {
	  var val, offset = 0, fields = {
	    requeue: void 0
	  };
	  val = !!(1 & buffer[offset]);
	  fields.requeue = val;
	  return fields;
	}

	function encodeBasicRecover(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932270, 7);
	  offset = 11;
	  val = fields.requeue;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicRecoverOk() {
	  var fields = {};
	  return fields;
	}

	function encodeBasicRecoverOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932271, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeBasicNack(buffer) {
	  var val, offset = 0, fields = {
	    deliveryTag: void 0,
	    multiple: void 0,
	    requeue: void 0
	  };
	  val = ints.readUInt64BE(buffer, offset);
	  offset += 8;
	  fields.deliveryTag = val;
	  val = !!(1 & buffer[offset]);
	  fields.multiple = val;
	  val = !!(2 & buffer[offset]);
	  fields.requeue = val;
	  return fields;
	}

	function encodeBasicNack(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = new Buffer(21 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932280, 7);
	  offset = 11;
	  val = fields.deliveryTag;
	  if (void 0 === val) val = 0; else if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'deliveryTag' is the wrong type; must be a number (but not NaN)");
	  ints.writeUInt64BE(buffer, val, offset);
	  offset += 8;
	  val = fields.multiple;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  val = fields.requeue;
	  void 0 === val && (val = !0);
	  val && (bits += 2);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeTxSelect() {
	  var fields = {};
	  return fields;
	}

	function encodeTxSelect(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(5898250, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeTxSelectOk() {
	  var fields = {};
	  return fields;
	}

	function encodeTxSelectOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(5898251, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeTxCommit() {
	  var fields = {};
	  return fields;
	}

	function encodeTxCommit(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(5898260, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeTxCommitOk() {
	  var fields = {};
	  return fields;
	}

	function encodeTxCommitOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(5898261, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeTxRollback() {
	  var fields = {};
	  return fields;
	}

	function encodeTxRollback(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(5898270, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeTxRollbackOk() {
	  var fields = {};
	  return fields;
	}

	function encodeTxRollbackOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(5898271, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConfirmSelect(buffer) {
	  var val, offset = 0, fields = {
	    nowait: void 0
	  };
	  val = !!(1 & buffer[offset]);
	  fields.nowait = val;
	  return fields;
	}

	function encodeConfirmSelect(channel, fields) {
	  var offset = 0, val = null, bits = 0, varyingSize = 0, buffer = new Buffer(13 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(5570570, 7);
	  offset = 11;
	  val = fields.nowait;
	  void 0 === val && (val = !1);
	  val && (bits += 1);
	  buffer[offset] = bits;
	  offset++;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function decodeConfirmSelectOk() {
	  var fields = {};
	  return fields;
	}

	function encodeConfirmSelectOk(channel) {
	  var offset = 0, varyingSize = 0, buffer = new Buffer(12 + varyingSize);
	  buffer[0] = 1;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(5570571, 7);
	  offset = 11;
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  return buffer;
	}

	function encodeBasicProperties(channel, size, fields) {
	  var val, len, offset = 0, flags = 0, scratchOffset = 0, varyingSize = 0;
	  val = fields.contentType;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'contentType' is the wrong type; must be a string (up to 255 chars)");
	    var contentType_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += contentType_len;
	  }
	  val = fields.contentEncoding;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'contentEncoding' is the wrong type; must be a string (up to 255 chars)");
	    var contentEncoding_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += contentEncoding_len;
	  }
	  val = fields.headers;
	  if (void 0 != val) {
	    if ("object" != typeof val) throw new TypeError("Field 'headers' is the wrong type; must be an object");
	    len = encodeTable(SCRATCH, val, scratchOffset);
	    var headers_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);
	    scratchOffset += len;
	    varyingSize += headers_encoded.length;
	  }
	  val = fields.deliveryMode;
	  if (void 0 != val) {
	    if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'deliveryMode' is the wrong type; must be a number (but not NaN)");
	    varyingSize += 1;
	  }
	  val = fields.priority;
	  if (void 0 != val) {
	    if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'priority' is the wrong type; must be a number (but not NaN)");
	    varyingSize += 1;
	  }
	  val = fields.correlationId;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'correlationId' is the wrong type; must be a string (up to 255 chars)");
	    var correlationId_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += correlationId_len;
	  }
	  val = fields.replyTo;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'replyTo' is the wrong type; must be a string (up to 255 chars)");
	    var replyTo_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += replyTo_len;
	  }
	  val = fields.expiration;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'expiration' is the wrong type; must be a string (up to 255 chars)");
	    var expiration_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += expiration_len;
	  }
	  val = fields.messageId;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'messageId' is the wrong type; must be a string (up to 255 chars)");
	    var messageId_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += messageId_len;
	  }
	  val = fields.timestamp;
	  if (void 0 != val) {
	    if ("number" != typeof val || isNaN(val)) throw new TypeError("Field 'timestamp' is the wrong type; must be a number (but not NaN)");
	    varyingSize += 8;
	  }
	  val = fields.type;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'type' is the wrong type; must be a string (up to 255 chars)");
	    var type_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += type_len;
	  }
	  val = fields.userId;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'userId' is the wrong type; must be a string (up to 255 chars)");
	    var userId_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += userId_len;
	  }
	  val = fields.appId;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'appId' is the wrong type; must be a string (up to 255 chars)");
	    var appId_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += appId_len;
	  }
	  val = fields.clusterId;
	  if (void 0 != val) {
	    if (!("string" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError("Field 'clusterId' is the wrong type; must be a string (up to 255 chars)");
	    var clusterId_len = Buffer.byteLength(val, "utf8");
	    varyingSize += 1;
	    varyingSize += clusterId_len;
	  }
	  var buffer = new Buffer(22 + varyingSize);
	  buffer[0] = 2;
	  buffer.writeUInt16BE(channel, 1);
	  buffer.writeUInt32BE(3932160, 7);
	  ints.writeUInt64BE(buffer, size, 11);
	  flags = 0;
	  offset = 21;
	  val = fields.contentType;
	  if (void 0 != val) {
	    flags += 32768;
	    buffer[offset] = contentType_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += contentType_len;
	  }
	  val = fields.contentEncoding;
	  if (void 0 != val) {
	    flags += 16384;
	    buffer[offset] = contentEncoding_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += contentEncoding_len;
	  }
	  val = fields.headers;
	  if (void 0 != val) {
	    flags += 8192;
	    offset += headers_encoded.copy(buffer, offset);
	  }
	  val = fields.deliveryMode;
	  if (void 0 != val) {
	    flags += 4096;
	    buffer.writeUInt8(val, offset);
	    offset++;
	  }
	  val = fields.priority;
	  if (void 0 != val) {
	    flags += 2048;
	    buffer.writeUInt8(val, offset);
	    offset++;
	  }
	  val = fields.correlationId;
	  if (void 0 != val) {
	    flags += 1024;
	    buffer[offset] = correlationId_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += correlationId_len;
	  }
	  val = fields.replyTo;
	  if (void 0 != val) {
	    flags += 512;
	    buffer[offset] = replyTo_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += replyTo_len;
	  }
	  val = fields.expiration;
	  if (void 0 != val) {
	    flags += 256;
	    buffer[offset] = expiration_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += expiration_len;
	  }
	  val = fields.messageId;
	  if (void 0 != val) {
	    flags += 128;
	    buffer[offset] = messageId_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += messageId_len;
	  }
	  val = fields.timestamp;
	  if (void 0 != val) {
	    flags += 64;
	    ints.writeUInt64BE(buffer, val, offset);
	    offset += 8;
	  }
	  val = fields.type;
	  if (void 0 != val) {
	    flags += 32;
	    buffer[offset] = type_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += type_len;
	  }
	  val = fields.userId;
	  if (void 0 != val) {
	    flags += 16;
	    buffer[offset] = userId_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += userId_len;
	  }
	  val = fields.appId;
	  if (void 0 != val) {
	    flags += 8;
	    buffer[offset] = appId_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += appId_len;
	  }
	  val = fields.clusterId;
	  if (void 0 != val) {
	    flags += 4;
	    buffer[offset] = clusterId_len;
	    offset++;
	    buffer.write(val, offset, "utf8");
	    offset += clusterId_len;
	  }
	  buffer[offset] = 206;
	  buffer.writeUInt32BE(offset - 7, 3);
	  buffer.writeUInt16BE(flags, 19);
	  return buffer.slice(0, offset + 1);
	}

	function decodeBasicProperties(buffer) {
	  var flags, val, len, offset = 2;
	  flags = buffer.readUInt16BE(0);
	  if (0 === flags) return {};
	  var fields = {
	    contentType: void 0,
	    contentEncoding: void 0,
	    headers: void 0,
	    deliveryMode: void 0,
	    priority: void 0,
	    correlationId: void 0,
	    replyTo: void 0,
	    expiration: void 0,
	    messageId: void 0,
	    timestamp: void 0,
	    type: void 0,
	    userId: void 0,
	    appId: void 0,
	    clusterId: void 0
	  };
	  if (32768 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.contentType = val;
	  }
	  if (16384 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.contentEncoding = val;
	  }
	  if (8192 & flags) {
	    len = buffer.readUInt32BE(offset);
	    offset += 4;
	    val = decodeFields(buffer.slice(offset, offset + len));
	    offset += len;
	    fields.headers = val;
	  }
	  if (4096 & flags) {
	    val = buffer[offset];
	    offset++;
	    fields.deliveryMode = val;
	  }
	  if (2048 & flags) {
	    val = buffer[offset];
	    offset++;
	    fields.priority = val;
	  }
	  if (1024 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.correlationId = val;
	  }
	  if (512 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.replyTo = val;
	  }
	  if (256 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.expiration = val;
	  }
	  if (128 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.messageId = val;
	  }
	  if (64 & flags) {
	    val = ints.readUInt64BE(buffer, offset);
	    offset += 8;
	    fields.timestamp = val;
	  }
	  if (32 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.type = val;
	  }
	  if (16 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.userId = val;
	  }
	  if (8 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.appId = val;
	  }
	  if (4 & flags) {
	    len = buffer.readUInt8(offset);
	    offset++;
	    val = buffer.toString("utf8", offset, offset + len);
	    offset += len;
	    fields.clusterId = val;
	  }
	  return fields;
	}

	var codec = __webpack_require__(24), ints = __webpack_require__(25), encodeTable = codec.encodeTable, decodeFields = codec.decodeFields, SCRATCH = new Buffer(4096), EMPTY_OBJECT = Object.freeze({});

	module.exports.constants = {
	  FRAME_METHOD: 1,
	  FRAME_HEADER: 2,
	  FRAME_BODY: 3,
	  FRAME_HEARTBEAT: 8,
	  FRAME_MIN_SIZE: 4096,
	  FRAME_END: 206,
	  REPLY_SUCCESS: 200,
	  CONTENT_TOO_LARGE: 311,
	  NO_ROUTE: 312,
	  NO_CONSUMERS: 313,
	  ACCESS_REFUSED: 403,
	  NOT_FOUND: 404,
	  RESOURCE_LOCKED: 405,
	  PRECONDITION_FAILED: 406,
	  CONNECTION_FORCED: 320,
	  INVALID_PATH: 402,
	  FRAME_ERROR: 501,
	  SYNTAX_ERROR: 502,
	  COMMAND_INVALID: 503,
	  CHANNEL_ERROR: 504,
	  UNEXPECTED_FRAME: 505,
	  RESOURCE_ERROR: 506,
	  NOT_ALLOWED: 530,
	  NOT_IMPLEMENTED: 540,
	  INTERNAL_ERROR: 541
	};

	module.exports.constant_strs = {
	  "1": "FRAME-METHOD",
	  "2": "FRAME-HEADER",
	  "3": "FRAME-BODY",
	  "8": "FRAME-HEARTBEAT",
	  "200": "REPLY-SUCCESS",
	  "206": "FRAME-END",
	  "311": "CONTENT-TOO-LARGE",
	  "312": "NO-ROUTE",
	  "313": "NO-CONSUMERS",
	  "320": "CONNECTION-FORCED",
	  "402": "INVALID-PATH",
	  "403": "ACCESS-REFUSED",
	  "404": "NOT-FOUND",
	  "405": "RESOURCE-LOCKED",
	  "406": "PRECONDITION-FAILED",
	  "501": "FRAME-ERROR",
	  "502": "SYNTAX-ERROR",
	  "503": "COMMAND-INVALID",
	  "504": "CHANNEL-ERROR",
	  "505": "UNEXPECTED-FRAME",
	  "506": "RESOURCE-ERROR",
	  "530": "NOT-ALLOWED",
	  "540": "NOT-IMPLEMENTED",
	  "541": "INTERNAL-ERROR",
	  "4096": "FRAME-MIN-SIZE"
	};

	module.exports.FRAME_OVERHEAD = 8;

	module.exports.decode = function(id, buf) {
	  switch (id) {
	   case 655370:
	    return decodeConnectionStart(buf);

	   case 655371:
	    return decodeConnectionStartOk(buf);

	   case 655380:
	    return decodeConnectionSecure(buf);

	   case 655381:
	    return decodeConnectionSecureOk(buf);

	   case 655390:
	    return decodeConnectionTune(buf);

	   case 655391:
	    return decodeConnectionTuneOk(buf);

	   case 655400:
	    return decodeConnectionOpen(buf);

	   case 655401:
	    return decodeConnectionOpenOk(buf);

	   case 655410:
	    return decodeConnectionClose(buf);

	   case 655411:
	    return decodeConnectionCloseOk(buf);

	   case 655420:
	    return decodeConnectionBlocked(buf);

	   case 655421:
	    return decodeConnectionUnblocked(buf);

	   case 1310730:
	    return decodeChannelOpen(buf);

	   case 1310731:
	    return decodeChannelOpenOk(buf);

	   case 1310740:
	    return decodeChannelFlow(buf);

	   case 1310741:
	    return decodeChannelFlowOk(buf);

	   case 1310760:
	    return decodeChannelClose(buf);

	   case 1310761:
	    return decodeChannelCloseOk(buf);

	   case 1966090:
	    return decodeAccessRequest(buf);

	   case 1966091:
	    return decodeAccessRequestOk(buf);

	   case 2621450:
	    return decodeExchangeDeclare(buf);

	   case 2621451:
	    return decodeExchangeDeclareOk(buf);

	   case 2621460:
	    return decodeExchangeDelete(buf);

	   case 2621461:
	    return decodeExchangeDeleteOk(buf);

	   case 2621470:
	    return decodeExchangeBind(buf);

	   case 2621471:
	    return decodeExchangeBindOk(buf);

	   case 2621480:
	    return decodeExchangeUnbind(buf);

	   case 2621491:
	    return decodeExchangeUnbindOk(buf);

	   case 3276810:
	    return decodeQueueDeclare(buf);

	   case 3276811:
	    return decodeQueueDeclareOk(buf);

	   case 3276820:
	    return decodeQueueBind(buf);

	   case 3276821:
	    return decodeQueueBindOk(buf);

	   case 3276830:
	    return decodeQueuePurge(buf);

	   case 3276831:
	    return decodeQueuePurgeOk(buf);

	   case 3276840:
	    return decodeQueueDelete(buf);

	   case 3276841:
	    return decodeQueueDeleteOk(buf);

	   case 3276850:
	    return decodeQueueUnbind(buf);

	   case 3276851:
	    return decodeQueueUnbindOk(buf);

	   case 3932170:
	    return decodeBasicQos(buf);

	   case 3932171:
	    return decodeBasicQosOk(buf);

	   case 3932180:
	    return decodeBasicConsume(buf);

	   case 3932181:
	    return decodeBasicConsumeOk(buf);

	   case 3932190:
	    return decodeBasicCancel(buf);

	   case 3932191:
	    return decodeBasicCancelOk(buf);

	   case 3932200:
	    return decodeBasicPublish(buf);

	   case 3932210:
	    return decodeBasicReturn(buf);

	   case 3932220:
	    return decodeBasicDeliver(buf);

	   case 3932230:
	    return decodeBasicGet(buf);

	   case 3932231:
	    return decodeBasicGetOk(buf);

	   case 3932232:
	    return decodeBasicGetEmpty(buf);

	   case 3932240:
	    return decodeBasicAck(buf);

	   case 3932250:
	    return decodeBasicReject(buf);

	   case 3932260:
	    return decodeBasicRecoverAsync(buf);

	   case 3932270:
	    return decodeBasicRecover(buf);

	   case 3932271:
	    return decodeBasicRecoverOk(buf);

	   case 3932280:
	    return decodeBasicNack(buf);

	   case 5898250:
	    return decodeTxSelect(buf);

	   case 5898251:
	    return decodeTxSelectOk(buf);

	   case 5898260:
	    return decodeTxCommit(buf);

	   case 5898261:
	    return decodeTxCommitOk(buf);

	   case 5898270:
	    return decodeTxRollback(buf);

	   case 5898271:
	    return decodeTxRollbackOk(buf);

	   case 5570570:
	    return decodeConfirmSelect(buf);

	   case 5570571:
	    return decodeConfirmSelectOk(buf);

	   case 60:
	    return decodeBasicProperties(buf);

	   default:
	    throw new Error("Unknown class/method ID");
	  }
	};

	module.exports.encodeMethod = function(id, channel, fields) {
	  switch (id) {
	   case 655370:
	    return encodeConnectionStart(channel, fields);

	   case 655371:
	    return encodeConnectionStartOk(channel, fields);

	   case 655380:
	    return encodeConnectionSecure(channel, fields);

	   case 655381:
	    return encodeConnectionSecureOk(channel, fields);

	   case 655390:
	    return encodeConnectionTune(channel, fields);

	   case 655391:
	    return encodeConnectionTuneOk(channel, fields);

	   case 655400:
	    return encodeConnectionOpen(channel, fields);

	   case 655401:
	    return encodeConnectionOpenOk(channel, fields);

	   case 655410:
	    return encodeConnectionClose(channel, fields);

	   case 655411:
	    return encodeConnectionCloseOk(channel, fields);

	   case 655420:
	    return encodeConnectionBlocked(channel, fields);

	   case 655421:
	    return encodeConnectionUnblocked(channel, fields);

	   case 1310730:
	    return encodeChannelOpen(channel, fields);

	   case 1310731:
	    return encodeChannelOpenOk(channel, fields);

	   case 1310740:
	    return encodeChannelFlow(channel, fields);

	   case 1310741:
	    return encodeChannelFlowOk(channel, fields);

	   case 1310760:
	    return encodeChannelClose(channel, fields);

	   case 1310761:
	    return encodeChannelCloseOk(channel, fields);

	   case 1966090:
	    return encodeAccessRequest(channel, fields);

	   case 1966091:
	    return encodeAccessRequestOk(channel, fields);

	   case 2621450:
	    return encodeExchangeDeclare(channel, fields);

	   case 2621451:
	    return encodeExchangeDeclareOk(channel, fields);

	   case 2621460:
	    return encodeExchangeDelete(channel, fields);

	   case 2621461:
	    return encodeExchangeDeleteOk(channel, fields);

	   case 2621470:
	    return encodeExchangeBind(channel, fields);

	   case 2621471:
	    return encodeExchangeBindOk(channel, fields);

	   case 2621480:
	    return encodeExchangeUnbind(channel, fields);

	   case 2621491:
	    return encodeExchangeUnbindOk(channel, fields);

	   case 3276810:
	    return encodeQueueDeclare(channel, fields);

	   case 3276811:
	    return encodeQueueDeclareOk(channel, fields);

	   case 3276820:
	    return encodeQueueBind(channel, fields);

	   case 3276821:
	    return encodeQueueBindOk(channel, fields);

	   case 3276830:
	    return encodeQueuePurge(channel, fields);

	   case 3276831:
	    return encodeQueuePurgeOk(channel, fields);

	   case 3276840:
	    return encodeQueueDelete(channel, fields);

	   case 3276841:
	    return encodeQueueDeleteOk(channel, fields);

	   case 3276850:
	    return encodeQueueUnbind(channel, fields);

	   case 3276851:
	    return encodeQueueUnbindOk(channel, fields);

	   case 3932170:
	    return encodeBasicQos(channel, fields);

	   case 3932171:
	    return encodeBasicQosOk(channel, fields);

	   case 3932180:
	    return encodeBasicConsume(channel, fields);

	   case 3932181:
	    return encodeBasicConsumeOk(channel, fields);

	   case 3932190:
	    return encodeBasicCancel(channel, fields);

	   case 3932191:
	    return encodeBasicCancelOk(channel, fields);

	   case 3932200:
	    return encodeBasicPublish(channel, fields);

	   case 3932210:
	    return encodeBasicReturn(channel, fields);

	   case 3932220:
	    return encodeBasicDeliver(channel, fields);

	   case 3932230:
	    return encodeBasicGet(channel, fields);

	   case 3932231:
	    return encodeBasicGetOk(channel, fields);

	   case 3932232:
	    return encodeBasicGetEmpty(channel, fields);

	   case 3932240:
	    return encodeBasicAck(channel, fields);

	   case 3932250:
	    return encodeBasicReject(channel, fields);

	   case 3932260:
	    return encodeBasicRecoverAsync(channel, fields);

	   case 3932270:
	    return encodeBasicRecover(channel, fields);

	   case 3932271:
	    return encodeBasicRecoverOk(channel, fields);

	   case 3932280:
	    return encodeBasicNack(channel, fields);

	   case 5898250:
	    return encodeTxSelect(channel, fields);

	   case 5898251:
	    return encodeTxSelectOk(channel, fields);

	   case 5898260:
	    return encodeTxCommit(channel, fields);

	   case 5898261:
	    return encodeTxCommitOk(channel, fields);

	   case 5898270:
	    return encodeTxRollback(channel, fields);

	   case 5898271:
	    return encodeTxRollbackOk(channel, fields);

	   case 5570570:
	    return encodeConfirmSelect(channel, fields);

	   case 5570571:
	    return encodeConfirmSelectOk(channel, fields);

	   default:
	    throw new Error("Unknown class/method ID");
	  }
	};

	module.exports.encodeProperties = function(id, channel, size, fields) {
	  switch (id) {
	   case 60:
	    return encodeBasicProperties(channel, size, fields);

	   default:
	    throw new Error("Unknown class/properties ID");
	  }
	};

	module.exports.info = function(id) {
	  switch (id) {
	   case 655370:
	    return methodInfoConnectionStart;

	   case 655371:
	    return methodInfoConnectionStartOk;

	   case 655380:
	    return methodInfoConnectionSecure;

	   case 655381:
	    return methodInfoConnectionSecureOk;

	   case 655390:
	    return methodInfoConnectionTune;

	   case 655391:
	    return methodInfoConnectionTuneOk;

	   case 655400:
	    return methodInfoConnectionOpen;

	   case 655401:
	    return methodInfoConnectionOpenOk;

	   case 655410:
	    return methodInfoConnectionClose;

	   case 655411:
	    return methodInfoConnectionCloseOk;

	   case 655420:
	    return methodInfoConnectionBlocked;

	   case 655421:
	    return methodInfoConnectionUnblocked;

	   case 1310730:
	    return methodInfoChannelOpen;

	   case 1310731:
	    return methodInfoChannelOpenOk;

	   case 1310740:
	    return methodInfoChannelFlow;

	   case 1310741:
	    return methodInfoChannelFlowOk;

	   case 1310760:
	    return methodInfoChannelClose;

	   case 1310761:
	    return methodInfoChannelCloseOk;

	   case 1966090:
	    return methodInfoAccessRequest;

	   case 1966091:
	    return methodInfoAccessRequestOk;

	   case 2621450:
	    return methodInfoExchangeDeclare;

	   case 2621451:
	    return methodInfoExchangeDeclareOk;

	   case 2621460:
	    return methodInfoExchangeDelete;

	   case 2621461:
	    return methodInfoExchangeDeleteOk;

	   case 2621470:
	    return methodInfoExchangeBind;

	   case 2621471:
	    return methodInfoExchangeBindOk;

	   case 2621480:
	    return methodInfoExchangeUnbind;

	   case 2621491:
	    return methodInfoExchangeUnbindOk;

	   case 3276810:
	    return methodInfoQueueDeclare;

	   case 3276811:
	    return methodInfoQueueDeclareOk;

	   case 3276820:
	    return methodInfoQueueBind;

	   case 3276821:
	    return methodInfoQueueBindOk;

	   case 3276830:
	    return methodInfoQueuePurge;

	   case 3276831:
	    return methodInfoQueuePurgeOk;

	   case 3276840:
	    return methodInfoQueueDelete;

	   case 3276841:
	    return methodInfoQueueDeleteOk;

	   case 3276850:
	    return methodInfoQueueUnbind;

	   case 3276851:
	    return methodInfoQueueUnbindOk;

	   case 3932170:
	    return methodInfoBasicQos;

	   case 3932171:
	    return methodInfoBasicQosOk;

	   case 3932180:
	    return methodInfoBasicConsume;

	   case 3932181:
	    return methodInfoBasicConsumeOk;

	   case 3932190:
	    return methodInfoBasicCancel;

	   case 3932191:
	    return methodInfoBasicCancelOk;

	   case 3932200:
	    return methodInfoBasicPublish;

	   case 3932210:
	    return methodInfoBasicReturn;

	   case 3932220:
	    return methodInfoBasicDeliver;

	   case 3932230:
	    return methodInfoBasicGet;

	   case 3932231:
	    return methodInfoBasicGetOk;

	   case 3932232:
	    return methodInfoBasicGetEmpty;

	   case 3932240:
	    return methodInfoBasicAck;

	   case 3932250:
	    return methodInfoBasicReject;

	   case 3932260:
	    return methodInfoBasicRecoverAsync;

	   case 3932270:
	    return methodInfoBasicRecover;

	   case 3932271:
	    return methodInfoBasicRecoverOk;

	   case 3932280:
	    return methodInfoBasicNack;

	   case 5898250:
	    return methodInfoTxSelect;

	   case 5898251:
	    return methodInfoTxSelectOk;

	   case 5898260:
	    return methodInfoTxCommit;

	   case 5898261:
	    return methodInfoTxCommitOk;

	   case 5898270:
	    return methodInfoTxRollback;

	   case 5898271:
	    return methodInfoTxRollbackOk;

	   case 5570570:
	    return methodInfoConfirmSelect;

	   case 5570571:
	    return methodInfoConfirmSelectOk;

	   case 60:
	    return propertiesInfoBasicProperties;

	   default:
	    throw new Error("Unknown class/method ID");
	  }
	};

	module.exports.ConnectionStart = 655370;

	var methodInfoConnectionStart = module.exports.methodInfoConnectionStart = {
	  id: 655370,
	  name: "ConnectionStart",
	  args: [ {
	    type: "octet",
	    name: "versionMajor",
	    "default": 0
	  }, {
	    type: "octet",
	    name: "versionMinor",
	    "default": 9
	  }, {
	    type: "table",
	    name: "serverProperties"
	  }, {
	    type: "longstr",
	    name: "mechanisms",
	    "default": "PLAIN"
	  }, {
	    type: "longstr",
	    name: "locales",
	    "default": "en_US"
	  } ]
	};

	module.exports.ConnectionStartOk = 655371;

	var methodInfoConnectionStartOk = module.exports.methodInfoConnectionStartOk = {
	  id: 655371,
	  name: "ConnectionStartOk",
	  args: [ {
	    type: "table",
	    name: "clientProperties"
	  }, {
	    type: "shortstr",
	    name: "mechanism",
	    "default": "PLAIN"
	  }, {
	    type: "longstr",
	    name: "response"
	  }, {
	    type: "shortstr",
	    name: "locale",
	    "default": "en_US"
	  } ]
	};

	module.exports.ConnectionSecure = 655380;

	var methodInfoConnectionSecure = module.exports.methodInfoConnectionSecure = {
	  id: 655380,
	  name: "ConnectionSecure",
	  args: [ {
	    type: "longstr",
	    name: "challenge"
	  } ]
	};

	module.exports.ConnectionSecureOk = 655381;

	var methodInfoConnectionSecureOk = module.exports.methodInfoConnectionSecureOk = {
	  id: 655381,
	  name: "ConnectionSecureOk",
	  args: [ {
	    type: "longstr",
	    name: "response"
	  } ]
	};

	module.exports.ConnectionTune = 655390;

	var methodInfoConnectionTune = module.exports.methodInfoConnectionTune = {
	  id: 655390,
	  name: "ConnectionTune",
	  args: [ {
	    type: "short",
	    name: "channelMax",
	    "default": 0
	  }, {
	    type: "long",
	    name: "frameMax",
	    "default": 0
	  }, {
	    type: "short",
	    name: "heartbeat",
	    "default": 0
	  } ]
	};

	module.exports.ConnectionTuneOk = 655391;

	var methodInfoConnectionTuneOk = module.exports.methodInfoConnectionTuneOk = {
	  id: 655391,
	  name: "ConnectionTuneOk",
	  args: [ {
	    type: "short",
	    name: "channelMax",
	    "default": 0
	  }, {
	    type: "long",
	    name: "frameMax",
	    "default": 0
	  }, {
	    type: "short",
	    name: "heartbeat",
	    "default": 0
	  } ]
	};

	module.exports.ConnectionOpen = 655400;

	var methodInfoConnectionOpen = module.exports.methodInfoConnectionOpen = {
	  id: 655400,
	  name: "ConnectionOpen",
	  args: [ {
	    type: "shortstr",
	    name: "virtualHost",
	    "default": "/"
	  }, {
	    type: "shortstr",
	    name: "capabilities",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "insist",
	    "default": !1
	  } ]
	};

	module.exports.ConnectionOpenOk = 655401;

	var methodInfoConnectionOpenOk = module.exports.methodInfoConnectionOpenOk = {
	  id: 655401,
	  name: "ConnectionOpenOk",
	  args: [ {
	    type: "shortstr",
	    name: "knownHosts",
	    "default": ""
	  } ]
	};

	module.exports.ConnectionClose = 655410;

	var methodInfoConnectionClose = module.exports.methodInfoConnectionClose = {
	  id: 655410,
	  name: "ConnectionClose",
	  args: [ {
	    type: "short",
	    name: "replyCode"
	  }, {
	    type: "shortstr",
	    name: "replyText",
	    "default": ""
	  }, {
	    type: "short",
	    name: "classId"
	  }, {
	    type: "short",
	    name: "methodId"
	  } ]
	};

	module.exports.ConnectionCloseOk = 655411;

	var methodInfoConnectionCloseOk = module.exports.methodInfoConnectionCloseOk = {
	  id: 655411,
	  name: "ConnectionCloseOk",
	  args: []
	};

	module.exports.ConnectionBlocked = 655420;

	var methodInfoConnectionBlocked = module.exports.methodInfoConnectionBlocked = {
	  id: 655420,
	  name: "ConnectionBlocked",
	  args: [ {
	    type: "shortstr",
	    name: "reason",
	    "default": ""
	  } ]
	};

	module.exports.ConnectionUnblocked = 655421;

	var methodInfoConnectionUnblocked = module.exports.methodInfoConnectionUnblocked = {
	  id: 655421,
	  name: "ConnectionUnblocked",
	  args: []
	};

	module.exports.ChannelOpen = 1310730;

	var methodInfoChannelOpen = module.exports.methodInfoChannelOpen = {
	  id: 1310730,
	  name: "ChannelOpen",
	  args: [ {
	    type: "shortstr",
	    name: "outOfBand",
	    "default": ""
	  } ]
	};

	module.exports.ChannelOpenOk = 1310731;

	var methodInfoChannelOpenOk = module.exports.methodInfoChannelOpenOk = {
	  id: 1310731,
	  name: "ChannelOpenOk",
	  args: [ {
	    type: "longstr",
	    name: "channelId",
	    "default": ""
	  } ]
	};

	module.exports.ChannelFlow = 1310740;

	var methodInfoChannelFlow = module.exports.methodInfoChannelFlow = {
	  id: 1310740,
	  name: "ChannelFlow",
	  args: [ {
	    type: "bit",
	    name: "active"
	  } ]
	};

	module.exports.ChannelFlowOk = 1310741;

	var methodInfoChannelFlowOk = module.exports.methodInfoChannelFlowOk = {
	  id: 1310741,
	  name: "ChannelFlowOk",
	  args: [ {
	    type: "bit",
	    name: "active"
	  } ]
	};

	module.exports.ChannelClose = 1310760;

	var methodInfoChannelClose = module.exports.methodInfoChannelClose = {
	  id: 1310760,
	  name: "ChannelClose",
	  args: [ {
	    type: "short",
	    name: "replyCode"
	  }, {
	    type: "shortstr",
	    name: "replyText",
	    "default": ""
	  }, {
	    type: "short",
	    name: "classId"
	  }, {
	    type: "short",
	    name: "methodId"
	  } ]
	};

	module.exports.ChannelCloseOk = 1310761;

	var methodInfoChannelCloseOk = module.exports.methodInfoChannelCloseOk = {
	  id: 1310761,
	  name: "ChannelCloseOk",
	  args: []
	};

	module.exports.AccessRequest = 1966090;

	var methodInfoAccessRequest = module.exports.methodInfoAccessRequest = {
	  id: 1966090,
	  name: "AccessRequest",
	  args: [ {
	    type: "shortstr",
	    name: "realm",
	    "default": "/data"
	  }, {
	    type: "bit",
	    name: "exclusive",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "passive",
	    "default": !0
	  }, {
	    type: "bit",
	    name: "active",
	    "default": !0
	  }, {
	    type: "bit",
	    name: "write",
	    "default": !0
	  }, {
	    type: "bit",
	    name: "read",
	    "default": !0
	  } ]
	};

	module.exports.AccessRequestOk = 1966091;

	var methodInfoAccessRequestOk = module.exports.methodInfoAccessRequestOk = {
	  id: 1966091,
	  name: "AccessRequestOk",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 1
	  } ]
	};

	module.exports.ExchangeDeclare = 2621450;

	var methodInfoExchangeDeclare = module.exports.methodInfoExchangeDeclare = {
	  id: 2621450,
	  name: "ExchangeDeclare",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "exchange"
	  }, {
	    type: "shortstr",
	    name: "type",
	    "default": "direct"
	  }, {
	    type: "bit",
	    name: "passive",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "durable",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "autoDelete",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "internal",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  }, {
	    type: "table",
	    name: "arguments",
	    "default": {}
	  } ]
	};

	module.exports.ExchangeDeclareOk = 2621451;

	var methodInfoExchangeDeclareOk = module.exports.methodInfoExchangeDeclareOk = {
	  id: 2621451,
	  name: "ExchangeDeclareOk",
	  args: []
	};

	module.exports.ExchangeDelete = 2621460;

	var methodInfoExchangeDelete = module.exports.methodInfoExchangeDelete = {
	  id: 2621460,
	  name: "ExchangeDelete",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "exchange"
	  }, {
	    type: "bit",
	    name: "ifUnused",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  } ]
	};

	module.exports.ExchangeDeleteOk = 2621461;

	var methodInfoExchangeDeleteOk = module.exports.methodInfoExchangeDeleteOk = {
	  id: 2621461,
	  name: "ExchangeDeleteOk",
	  args: []
	};

	module.exports.ExchangeBind = 2621470;

	var methodInfoExchangeBind = module.exports.methodInfoExchangeBind = {
	  id: 2621470,
	  name: "ExchangeBind",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "destination"
	  }, {
	    type: "shortstr",
	    name: "source"
	  }, {
	    type: "shortstr",
	    name: "routingKey",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  }, {
	    type: "table",
	    name: "arguments",
	    "default": {}
	  } ]
	};

	module.exports.ExchangeBindOk = 2621471;

	var methodInfoExchangeBindOk = module.exports.methodInfoExchangeBindOk = {
	  id: 2621471,
	  name: "ExchangeBindOk",
	  args: []
	};

	module.exports.ExchangeUnbind = 2621480;

	var methodInfoExchangeUnbind = module.exports.methodInfoExchangeUnbind = {
	  id: 2621480,
	  name: "ExchangeUnbind",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "destination"
	  }, {
	    type: "shortstr",
	    name: "source"
	  }, {
	    type: "shortstr",
	    name: "routingKey",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  }, {
	    type: "table",
	    name: "arguments",
	    "default": {}
	  } ]
	};

	module.exports.ExchangeUnbindOk = 2621491;

	var methodInfoExchangeUnbindOk = module.exports.methodInfoExchangeUnbindOk = {
	  id: 2621491,
	  name: "ExchangeUnbindOk",
	  args: []
	};

	module.exports.QueueDeclare = 3276810;

	var methodInfoQueueDeclare = module.exports.methodInfoQueueDeclare = {
	  id: 3276810,
	  name: "QueueDeclare",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "queue",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "passive",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "durable",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "exclusive",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "autoDelete",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  }, {
	    type: "table",
	    name: "arguments",
	    "default": {}
	  } ]
	};

	module.exports.QueueDeclareOk = 3276811;

	var methodInfoQueueDeclareOk = module.exports.methodInfoQueueDeclareOk = {
	  id: 3276811,
	  name: "QueueDeclareOk",
	  args: [ {
	    type: "shortstr",
	    name: "queue"
	  }, {
	    type: "long",
	    name: "messageCount"
	  }, {
	    type: "long",
	    name: "consumerCount"
	  } ]
	};

	module.exports.QueueBind = 3276820;

	var methodInfoQueueBind = module.exports.methodInfoQueueBind = {
	  id: 3276820,
	  name: "QueueBind",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "queue",
	    "default": ""
	  }, {
	    type: "shortstr",
	    name: "exchange"
	  }, {
	    type: "shortstr",
	    name: "routingKey",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  }, {
	    type: "table",
	    name: "arguments",
	    "default": {}
	  } ]
	};

	module.exports.QueueBindOk = 3276821;

	var methodInfoQueueBindOk = module.exports.methodInfoQueueBindOk = {
	  id: 3276821,
	  name: "QueueBindOk",
	  args: []
	};

	module.exports.QueuePurge = 3276830;

	var methodInfoQueuePurge = module.exports.methodInfoQueuePurge = {
	  id: 3276830,
	  name: "QueuePurge",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "queue",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  } ]
	};

	module.exports.QueuePurgeOk = 3276831;

	var methodInfoQueuePurgeOk = module.exports.methodInfoQueuePurgeOk = {
	  id: 3276831,
	  name: "QueuePurgeOk",
	  args: [ {
	    type: "long",
	    name: "messageCount"
	  } ]
	};

	module.exports.QueueDelete = 3276840;

	var methodInfoQueueDelete = module.exports.methodInfoQueueDelete = {
	  id: 3276840,
	  name: "QueueDelete",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "queue",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "ifUnused",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "ifEmpty",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  } ]
	};

	module.exports.QueueDeleteOk = 3276841;

	var methodInfoQueueDeleteOk = module.exports.methodInfoQueueDeleteOk = {
	  id: 3276841,
	  name: "QueueDeleteOk",
	  args: [ {
	    type: "long",
	    name: "messageCount"
	  } ]
	};

	module.exports.QueueUnbind = 3276850;

	var methodInfoQueueUnbind = module.exports.methodInfoQueueUnbind = {
	  id: 3276850,
	  name: "QueueUnbind",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "queue",
	    "default": ""
	  }, {
	    type: "shortstr",
	    name: "exchange"
	  }, {
	    type: "shortstr",
	    name: "routingKey",
	    "default": ""
	  }, {
	    type: "table",
	    name: "arguments",
	    "default": {}
	  } ]
	};

	module.exports.QueueUnbindOk = 3276851;

	var methodInfoQueueUnbindOk = module.exports.methodInfoQueueUnbindOk = {
	  id: 3276851,
	  name: "QueueUnbindOk",
	  args: []
	};

	module.exports.BasicQos = 3932170;

	var methodInfoBasicQos = module.exports.methodInfoBasicQos = {
	  id: 3932170,
	  name: "BasicQos",
	  args: [ {
	    type: "long",
	    name: "prefetchSize",
	    "default": 0
	  }, {
	    type: "short",
	    name: "prefetchCount",
	    "default": 0
	  }, {
	    type: "bit",
	    name: "global",
	    "default": !1
	  } ]
	};

	module.exports.BasicQosOk = 3932171;

	var methodInfoBasicQosOk = module.exports.methodInfoBasicQosOk = {
	  id: 3932171,
	  name: "BasicQosOk",
	  args: []
	};

	module.exports.BasicConsume = 3932180;

	var methodInfoBasicConsume = module.exports.methodInfoBasicConsume = {
	  id: 3932180,
	  name: "BasicConsume",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "queue",
	    "default": ""
	  }, {
	    type: "shortstr",
	    name: "consumerTag",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "noLocal",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "noAck",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "exclusive",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  }, {
	    type: "table",
	    name: "arguments",
	    "default": {}
	  } ]
	};

	module.exports.BasicConsumeOk = 3932181;

	var methodInfoBasicConsumeOk = module.exports.methodInfoBasicConsumeOk = {
	  id: 3932181,
	  name: "BasicConsumeOk",
	  args: [ {
	    type: "shortstr",
	    name: "consumerTag"
	  } ]
	};

	module.exports.BasicCancel = 3932190;

	var methodInfoBasicCancel = module.exports.methodInfoBasicCancel = {
	  id: 3932190,
	  name: "BasicCancel",
	  args: [ {
	    type: "shortstr",
	    name: "consumerTag"
	  }, {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  } ]
	};

	module.exports.BasicCancelOk = 3932191;

	var methodInfoBasicCancelOk = module.exports.methodInfoBasicCancelOk = {
	  id: 3932191,
	  name: "BasicCancelOk",
	  args: [ {
	    type: "shortstr",
	    name: "consumerTag"
	  } ]
	};

	module.exports.BasicPublish = 3932200;

	var methodInfoBasicPublish = module.exports.methodInfoBasicPublish = {
	  id: 3932200,
	  name: "BasicPublish",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "exchange",
	    "default": ""
	  }, {
	    type: "shortstr",
	    name: "routingKey",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "mandatory",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "immediate",
	    "default": !1
	  } ]
	};

	module.exports.BasicReturn = 3932210;

	var methodInfoBasicReturn = module.exports.methodInfoBasicReturn = {
	  id: 3932210,
	  name: "BasicReturn",
	  args: [ {
	    type: "short",
	    name: "replyCode"
	  }, {
	    type: "shortstr",
	    name: "replyText",
	    "default": ""
	  }, {
	    type: "shortstr",
	    name: "exchange"
	  }, {
	    type: "shortstr",
	    name: "routingKey"
	  } ]
	};

	module.exports.BasicDeliver = 3932220;

	var methodInfoBasicDeliver = module.exports.methodInfoBasicDeliver = {
	  id: 3932220,
	  name: "BasicDeliver",
	  args: [ {
	    type: "shortstr",
	    name: "consumerTag"
	  }, {
	    type: "longlong",
	    name: "deliveryTag"
	  }, {
	    type: "bit",
	    name: "redelivered",
	    "default": !1
	  }, {
	    type: "shortstr",
	    name: "exchange"
	  }, {
	    type: "shortstr",
	    name: "routingKey"
	  } ]
	};

	module.exports.BasicGet = 3932230;

	var methodInfoBasicGet = module.exports.methodInfoBasicGet = {
	  id: 3932230,
	  name: "BasicGet",
	  args: [ {
	    type: "short",
	    name: "ticket",
	    "default": 0
	  }, {
	    type: "shortstr",
	    name: "queue",
	    "default": ""
	  }, {
	    type: "bit",
	    name: "noAck",
	    "default": !1
	  } ]
	};

	module.exports.BasicGetOk = 3932231;

	var methodInfoBasicGetOk = module.exports.methodInfoBasicGetOk = {
	  id: 3932231,
	  name: "BasicGetOk",
	  args: [ {
	    type: "longlong",
	    name: "deliveryTag"
	  }, {
	    type: "bit",
	    name: "redelivered",
	    "default": !1
	  }, {
	    type: "shortstr",
	    name: "exchange"
	  }, {
	    type: "shortstr",
	    name: "routingKey"
	  }, {
	    type: "long",
	    name: "messageCount"
	  } ]
	};

	module.exports.BasicGetEmpty = 3932232;

	var methodInfoBasicGetEmpty = module.exports.methodInfoBasicGetEmpty = {
	  id: 3932232,
	  name: "BasicGetEmpty",
	  args: [ {
	    type: "shortstr",
	    name: "clusterId",
	    "default": ""
	  } ]
	};

	module.exports.BasicAck = 3932240;

	var methodInfoBasicAck = module.exports.methodInfoBasicAck = {
	  id: 3932240,
	  name: "BasicAck",
	  args: [ {
	    type: "longlong",
	    name: "deliveryTag",
	    "default": 0
	  }, {
	    type: "bit",
	    name: "multiple",
	    "default": !1
	  } ]
	};

	module.exports.BasicReject = 3932250;

	var methodInfoBasicReject = module.exports.methodInfoBasicReject = {
	  id: 3932250,
	  name: "BasicReject",
	  args: [ {
	    type: "longlong",
	    name: "deliveryTag"
	  }, {
	    type: "bit",
	    name: "requeue",
	    "default": !0
	  } ]
	};

	module.exports.BasicRecoverAsync = 3932260;

	var methodInfoBasicRecoverAsync = module.exports.methodInfoBasicRecoverAsync = {
	  id: 3932260,
	  name: "BasicRecoverAsync",
	  args: [ {
	    type: "bit",
	    name: "requeue",
	    "default": !1
	  } ]
	};

	module.exports.BasicRecover = 3932270;

	var methodInfoBasicRecover = module.exports.methodInfoBasicRecover = {
	  id: 3932270,
	  name: "BasicRecover",
	  args: [ {
	    type: "bit",
	    name: "requeue",
	    "default": !1
	  } ]
	};

	module.exports.BasicRecoverOk = 3932271;

	var methodInfoBasicRecoverOk = module.exports.methodInfoBasicRecoverOk = {
	  id: 3932271,
	  name: "BasicRecoverOk",
	  args: []
	};

	module.exports.BasicNack = 3932280;

	var methodInfoBasicNack = module.exports.methodInfoBasicNack = {
	  id: 3932280,
	  name: "BasicNack",
	  args: [ {
	    type: "longlong",
	    name: "deliveryTag",
	    "default": 0
	  }, {
	    type: "bit",
	    name: "multiple",
	    "default": !1
	  }, {
	    type: "bit",
	    name: "requeue",
	    "default": !0
	  } ]
	};

	module.exports.TxSelect = 5898250;

	var methodInfoTxSelect = module.exports.methodInfoTxSelect = {
	  id: 5898250,
	  name: "TxSelect",
	  args: []
	};

	module.exports.TxSelectOk = 5898251;

	var methodInfoTxSelectOk = module.exports.methodInfoTxSelectOk = {
	  id: 5898251,
	  name: "TxSelectOk",
	  args: []
	};

	module.exports.TxCommit = 5898260;

	var methodInfoTxCommit = module.exports.methodInfoTxCommit = {
	  id: 5898260,
	  name: "TxCommit",
	  args: []
	};

	module.exports.TxCommitOk = 5898261;

	var methodInfoTxCommitOk = module.exports.methodInfoTxCommitOk = {
	  id: 5898261,
	  name: "TxCommitOk",
	  args: []
	};

	module.exports.TxRollback = 5898270;

	var methodInfoTxRollback = module.exports.methodInfoTxRollback = {
	  id: 5898270,
	  name: "TxRollback",
	  args: []
	};

	module.exports.TxRollbackOk = 5898271;

	var methodInfoTxRollbackOk = module.exports.methodInfoTxRollbackOk = {
	  id: 5898271,
	  name: "TxRollbackOk",
	  args: []
	};

	module.exports.ConfirmSelect = 5570570;

	var methodInfoConfirmSelect = module.exports.methodInfoConfirmSelect = {
	  id: 5570570,
	  name: "ConfirmSelect",
	  args: [ {
	    type: "bit",
	    name: "nowait",
	    "default": !1
	  } ]
	};

	module.exports.ConfirmSelectOk = 5570571;

	var methodInfoConfirmSelectOk = module.exports.methodInfoConfirmSelectOk = {
	  id: 5570571,
	  name: "ConfirmSelectOk",
	  args: []
	};

	module.exports.BasicProperties = 60;

	var propertiesInfoBasicProperties = module.exports.propertiesInfoBasicProperties = {
	  id: 60,
	  name: "BasicProperties",
	  args: [ {
	    type: "shortstr",
	    name: "contentType"
	  }, {
	    type: "shortstr",
	    name: "contentEncoding"
	  }, {
	    type: "table",
	    name: "headers"
	  }, {
	    type: "octet",
	    name: "deliveryMode"
	  }, {
	    type: "octet",
	    name: "priority"
	  }, {
	    type: "shortstr",
	    name: "correlationId"
	  }, {
	    type: "shortstr",
	    name: "replyTo"
	  }, {
	    type: "shortstr",
	    name: "expiration"
	  }, {
	    type: "shortstr",
	    name: "messageId"
	  }, {
	    type: "timestamp",
	    name: "timestamp"
	  }, {
	    type: "shortstr",
	    name: "type"
	  }, {
	    type: "shortstr",
	    name: "userId"
	  }, {
	    type: "shortstr",
	    name: "appId"
	  }, {
	    type: "shortstr",
	    name: "clusterId"
	  } ]
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// 
	//
	//

	/*

	The AMQP 0-9-1 is a mess when it comes to the types that can be
	encoded on the wire.

	There are four encoding schemes, and three overlapping sets of types:
	frames, methods, (field-)tables, and properties.

	Each *frame type* has a set layout in which values of given types are
	concatenated along with sections of "raw binary" data.

	In frames there are `shortstr`s, that is length-prefixed strings of
	UTF8 chars, 8 bit unsigned integers (called `octet`), unsigned 16 bit
	integers (called `short` or `short-uint`), unsigned 32 bit integers
	(called `long` or `long-uint`), unsigned 64 bit integers (called
	`longlong` or `longlong-uint`), and flags (called `bit`).

	Methods are encoded as a frame giving a method ID and a sequence of
	arguments of known types. The encoded method argument values are
	concatenated (with some fun complications around "packing" consecutive
	bit values into bytes).

	Along with the types given in frames, method arguments may be long
	byte strings (`longstr`, not required to be UTF8) or 64 bit unsigned
	integers to be interpreted as timestamps (yeah I don't know why
	either), or arbitrary sets of key-value pairs (called `field-table`).

	Inside a field table the keys are `shortstr` and the values are
	prefixed with a byte tag giving the type. The types are any of the
	above except for bits (which are replaced by byte-wide `bool`), along
	with a NULL value `void`, a special fixed-precision number encoding
	(`decimal`), IEEE754 `float`s and `double`s, signed integers,
	`field-array` (a sequence of tagged values), and nested field-tables.

	RabbitMQ and QPid use a subset of the field-table types, and different
	value tags, established before the AMQP 0-9-1 specification was
	published. So far as I know, no-one uses the types and tags as
	published. http://www.rabbitmq.com/amqp-0-9-1-errata.html gives the
	list of field-table types.

	Lastly, there are (sets of) properties, only one of which is given in
	AMQP 0-9-1: `BasicProperties`. These are almost the same as methods,
	except that they appear in content header frames, which include a
	content size, and they carry a set of flags indicating which
	properties are present. This scheme can save ones of bytes per message
	(messages which take a minimum of three frames each to send).

	*/

	'use strict';

	var ints = __webpack_require__(25);

	// JavaScript uses only doubles so what I'm testing for is whether
	// it's *better* to encode a number as a float or double. This really
	// just amounts to testing whether there's a fractional part to the
	// number, except that see below. NB I don't use bitwise operations to
	// do this 'efficiently' -- it would mask the number to 32 bits.
	//
	// At 2^50, doubles don't have sufficient precision to distinguish
	// between floating point and integer numbers (`Math.pow(2, 50) + 0.1
	// === Math.pow(2, 50)` (and, above 2^53, doubles cannot represent all
	// integers (`Math.pow(2, 53) + 1 === Math.pow(2, 53)`)). Hence
	// anything with a magnitude at or above 2^50 may as well be encoded
	// as a 64-bit integer. Except that only signed integers are supported
	// by RabbitMQ, so anything above 2^63 - 1 must be a double.
	function isFloatingPoint(n) {
	    return n >= 0x8000000000000000 ||
	        (Math.abs(n) < 0x4000000000000
	         && Math.floor(n) !== n);
	}

	function encodeTable(buffer, val, offset) {
	    var start = offset;
	    offset += 4; // leave room for the table length
	    for (var key in val) {
	        if (val[key] !== undefined) {
	          var len = Buffer.byteLength(key);
	          buffer.writeUInt8(len, offset); offset++;
	          buffer.write(key, offset, 'utf8'); offset += len;
	          offset += encodeFieldValue(buffer, val[key], offset);
	        }
	    }
	    var size = offset - start;
	    buffer.writeUInt32BE(size - 4, start);
	    return size;
	}

	function encodeArray(buffer, val, offset) {
	    var start = offset;
	    offset += 4;
	    for (var i=0, num=val.length; i < num; i++) {
	        offset += encodeFieldValue(buffer, val[i], offset);
	    }
	    var size = offset - start;
	    buffer.writeUInt32BE(size - 4, start);
	    return size;
	}

	function encodeFieldValue(buffer, value, offset) {
	    var start = offset;
	    var type = typeof value, val = value;
	    // A trapdoor for specifying a type, e.g., timestamp
	    if (value && type === 'object' && value.hasOwnProperty('!')) {
	        val = value.value;
	        type = value['!'];
	    }

	    function tag(t) { buffer.write(t, offset); offset++; }

	    switch (type) {
	    case 'string': // no shortstr in field tables
	        var len = Buffer.byteLength(val, 'utf8');
	        tag('S');
	        buffer.writeUInt32BE(len, offset); offset += 4;
	        buffer.write(val, offset, 'utf8'); offset += len;
	        break;
	    case 'object':
	        if (val === null) {
	            tag('V');
	        }
	        else if (Array.isArray(val)) {
	            tag('A');
	            offset += encodeArray(buffer, val, offset);
	        }
	        else if (Buffer.isBuffer(val)) {
	            tag('x');
	            buffer.writeUInt32BE(val.length, offset); offset += 4;
	            val.copy(buffer, offset); offset += val.length;
	        }
	        else {
	            tag('F');
	            offset += encodeTable(buffer, val, offset);
	        }
	        break;
	    case 'boolean':
	        tag('t');
	        buffer.writeUInt8((val) ? 1 : 0, offset); offset++;
	        break;
	    case 'number':
	        // Making assumptions about the kind of number (floating point
	        // v integer, signed, unsigned, size) desired is dangerous in
	        // general; however, in practice RabbitMQ uses only
	        // longstrings and unsigned integers in its arguments, and
	        // other clients generally conflate number types anyway. So
	        // the only distinction we care about is floating point vs
	        // integers, preferring integers since those can be promoted
	        // if necessary. If floating point is required, we may as well
	        // use double precision.
	        if (isFloatingPoint(val)) {
	            tag('d');
	            buffer.writeDoubleBE(val, offset);
	            offset += 8;
	        }
	        else { // only signed values are used in tables by RabbitMQ,
	               // except for 'byte's which are only unsigned. (The
	               // errata on the RabbitMQ website is wrong on this --
	               // see rabbit_binary_generator.erl)
	            if (val < 256 && val >= 0) {
	                tag('b');
	                buffer.writeUInt8(val, offset); offset++;
	            }
	            else if (val >= -0x8000 && val < 0x8000) { //  short
	                tag('s');
	                buffer.writeInt16BE(val, offset); offset += 2;
	            }
	            else if (val >= -0x80000000 && val < 0x80000000) { // int
	                tag('I');
	                buffer.writeInt32BE(val, offset); offset += 4;
	            }
	            else { // long
	                tag('l');
	                ints.writeInt64BE(buffer, val, offset); offset += 8;
	            }
	        }
	        break;
	    // Now for exotic types, those can only be denoted by using
	    // `{'!': type, value: val}
	    case 'timestamp':
	        tag('T');
	        ints.writeUInt64BE(buffer, val, offset); offset += 8;
	        break;
	    case 'float':
	        tag('f');
	        buffer.writeFloatBE(val, offset); offset += 4;
	        break;
	    case 'decimal':
	        tag('D');
	        if (val.hasOwnProperty('places') && val.hasOwnProperty('digits')
	            && val.places >= 0 && val.places < 256) {
	            buffer[offset] = val.places; offset++;
	            buffer.writeUInt32BE(val.digits, offset); offset += 4;
	        }
	        else throw new TypeError(
	            "Decimal value must be {'places': 0..255, 'digits': uint32}, " +
	                "got " + JSON.stringify(val));
	        break;
	    default:
	        throw new TypeError('Unknown type to encode: ' + type);
	    }
	    return offset - start;
	}

	// Assume we're given a slice of the buffer that contains just the
	// fields.
	function decodeFields(slice) {
	    var fields = {}, offset = 0, size = slice.length;
	    var len, key, val;

	    function decodeFieldValue() {
	        var tag = String.fromCharCode(slice[offset]); offset++;
	        switch (tag) {
	        case 'b':
	            val = slice.readUInt8(offset); offset++;
	            break;
	        case 'S':
	            len = slice.readUInt32BE(offset); offset += 4;
	            val = slice.toString('utf8', offset, offset + len);
	            offset += len;
	            break;
	        case 'I':
	            val = slice.readInt32BE(offset); offset += 4;
	            break;
	        case 'D': // only positive decimals, apparently.
	            var places = slice[offset]; offset++;
	            var digits = slice.readUInt32BE(offset); offset += 4;
	            val = {'!': 'decimal', value: {places: places, digits: digits}};
	            break;
	        case 'T':
	            val = ints.readUInt64BE(slice, offset); offset += 8;
	            val = {'!': 'timestamp', value: val};
	            break;
	        case 'F':
	            len = slice.readUInt32BE(offset); offset += 4;
	            val = decodeFields(slice.slice(offset, offset + len));
	            offset += len;
	            break;
	        case 'A':
	            len = slice.readUInt32BE(offset); offset += 4;
	            decodeArray(offset + len);
	            // NB decodeArray will itself update offset and val
	            break;
	        case 'd':
	            val = slice.readDoubleBE(offset); offset += 8;
	            break;
	        case 'f':
	            val = slice.readFloatBE(offset); offset += 4;
	            break;
	        case 'l':
	            val = ints.readInt64BE(slice, offset); offset += 8;
	            break;
	        case 's':
	            val = slice.readInt16BE(offset); offset += 2;
	            break;
	        case 't':
	            val = slice[offset] != 0; offset++;
	            break;
	        case 'V':
	            val = null;
	            break;
	        case 'x':
	            len = slice.readUInt32BE(offset); offset += 4;
	            val = slice.slice(offset, offset + len);
	            offset += len;
	            break;
	        default:
	            throw new TypeError('Unexpected type tag "' + tag +'"');
	        }
	    }

	    function decodeArray(until) {
	        var vals = [];
	        while (offset < until) {
	            decodeFieldValue();
	            vals.push(val);
	        }
	        val = vals;
	    }

	    while (offset < size) {
	        len = slice.readUInt8(offset); offset++;
	        key = slice.toString('utf8', offset, offset + len);
	        offset += len;
	        decodeFieldValue();
	        fields[key] = val;
	    }
	    return fields;
	}

	module.exports.encodeTable = encodeTable;
	module.exports.decodeFields = decodeFields;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var assert = __webpack_require__(26);

	// JavaScript is numerically challenged
	var SHIFT_LEFT_32 = (1 << 16) * (1 << 16);
	var SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

	// The maximum contiguous integer that can be held in a IEEE754 double
	var MAX_INT = 0x1fffffffffffff;

	function isContiguousInt(val) {
	    return val <= MAX_INT && val >= -MAX_INT;
	}

	function assertContiguousInt(val) {
	    assert(isContiguousInt(val), "number cannot be represented as a contiguous integer");
	}

	module.exports.isContiguousInt = isContiguousInt;
	module.exports.assertContiguousInt = assertContiguousInt;

	// Fill in the regular procedures
	['UInt', 'Int'].forEach(function (sign) {
	  var suffix = sign + '8';
	  module.exports['read' + suffix] =
	    Buffer.prototype['read' + suffix].call;
	  module.exports['write' + suffix] =
	    Buffer.prototype['write' + suffix].call;
	  
	  ['16', '32'].forEach(function (size) {
	    ['LE', 'BE'].forEach(function (endian) {
	      var suffix = sign + size + endian;
	      var read = Buffer.prototype['read' + suffix];
	      module.exports['read' + suffix] =
	        function (buf, offset, noAssert) {
	          return read.call(buf, offset, noAssert);
	        };
	      var write = Buffer.prototype['write' + suffix];
	      module.exports['write' + suffix] =
	        function (buf, val, offset, noAssert) {
	          return write.call(buf, val, offset, noAssert);
	        };
	    });
	  });
	});

	// Check that a value is an integer within the given range
	function check_int(val, min, max) {
	    assert.ok(typeof(val) == 'number' && val >= min && val <= max && Math.floor(val) === val, "not a number in the required range");
	}

	function readUInt24BE(buf, offset, noAssert) {
	  return buf.readUInt8(offset, noAssert) << 16 | buf.readUInt16BE(offset + 1, noAssert);
	}
	module.exports.readUInt24BE = readUInt24BE;

	function writeUInt24BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffff);
	        assert.ok(offset + 3 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeUInt8(val >>> 16, offset, noAssert);
	    buf.writeUInt16BE(val & 0xffff, offset + 1, noAssert);
	}
	module.exports.writeUInt24BE = writeUInt24BE;

	function readUInt40BE(buf, offset, noAssert) {
	    return (buf.readUInt8(offset, noAssert) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1, noAssert);
	}
	module.exports.readUInt40BE = readUInt40BE;

	function writeUInt40BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffffffff);
	        assert.ok(offset + 5 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
	    buf.writeInt32BE(val & -1, offset + 1, noAssert);
	}
	module.exports.writeUInt40BE = writeUInt40BE;

	function readUInt48BE(buf, offset, noAssert) {
	    return buf.readUInt16BE(offset, noAssert) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2, noAssert);
	}
	module.exports.readUInt48BE = readUInt48BE;

	function writeUInt48BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffffffffff);
	        assert.ok(offset + 6 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeUInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
	    buf.writeInt32BE(val & -1, offset + 2, noAssert);
	}
	module.exports.writeUInt48BE = writeUInt48BE;

	function readUInt56BE(buf, offset, noAssert) {
	    return ((buf.readUInt8(offset, noAssert) || 0) << 16 | buf.readUInt16BE(offset + 1, noAssert)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3, noAssert);
	}
	module.exports.readUInt56BE = readUInt56BE;

	function writeUInt56BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffffffffffff);
	        assert.ok(offset + 7 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    if (val < 0x100000000000000) {
	        var hi = Math.floor(val * SHIFT_RIGHT_32);
	        buf.writeUInt8(hi >>> 16, offset, noAssert);
	        buf.writeUInt16BE(hi & 0xffff, offset + 1, noAssert);
	        buf.writeInt32BE(val & -1, offset + 3, noAssert);
	    } else {
	        // Special case because 2^56-1 gets rounded up to 2^56
	        buf[offset] = 0xff;
	        buf[offset+1] = 0xff;
	        buf[offset+2] = 0xff;
	        buf[offset+3] = 0xff;
	        buf[offset+4] = 0xff;
	        buf[offset+5] = 0xff;
	        buf[offset+6] = 0xff;
	    }
	}
	module.exports.writeUInt56BE = writeUInt56BE;

	function readUInt64BE(buf, offset, noAssert) {
	    return buf.readUInt32BE(offset, noAssert) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4, noAssert);
	}
	module.exports.readUInt64BE = readUInt64BE;

	function writeUInt64BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffffffffffffff);
	        assert.ok(offset + 8 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    if (val < 0x10000000000000000) {
	        buf.writeUInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
	        buf.writeInt32BE(val & -1, offset + 4, noAssert);
	    } else {
	        // Special case because 2^64-1 gets rounded up to 2^64
	        buf[offset] = 0xff;
	        buf[offset+1] = 0xff;
	        buf[offset+2] = 0xff;
	        buf[offset+3] = 0xff;
	        buf[offset+4] = 0xff;
	        buf[offset+5] = 0xff;
	        buf[offset+6] = 0xff;
	        buf[offset+7] = 0xff;
	    }
	}
	module.exports.writeUInt64BE = writeUInt64BE;

	function readUInt24LE(buf, offset, noAssert) {
	    return buf.readUInt8(offset + 2, noAssert) << 16 | buf.readUInt16LE(offset, noAssert);
	}
	module.exports.readUInt24LE = readUInt24LE;

	function writeUInt24LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffff);
	        assert.ok(offset + 3 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeUInt16LE(val & 0xffff, offset, noAssert);
	    buf.writeUInt8(val >>> 16, offset + 2, noAssert);
	}
	module.exports.writeUInt24LE = writeUInt24LE;

	function readUInt40LE(buf, offset, noAssert) {
	    return (buf.readUInt8(offset + 4, noAssert) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
	}
	module.exports.readUInt40LE = readUInt40LE;

	function writeUInt40LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffffffff);
	        assert.ok(offset + 5 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeInt32LE(val & -1, offset, noAssert);
	    buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
	}
	module.exports.writeUInt40LE = writeUInt40LE;

	function readUInt48LE(buf, offset, noAssert) {
	    return buf.readUInt16LE(offset + 4, noAssert) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
	}
	module.exports.readUInt48LE = readUInt48LE;

	function writeUInt48LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffffffffff);
	        assert.ok(offset + 6 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeInt32LE(val & -1, offset, noAssert);
	    buf.writeUInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
	}
	module.exports.writeUInt48LE = writeUInt48LE;

	function readUInt56LE(buf, offset, noAssert) {
	    return ((buf.readUInt8(offset + 6, noAssert) || 0) << 16 | buf.readUInt16LE(offset + 4, noAssert)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
	}
	module.exports.readUInt56LE = readUInt56LE;

	function writeUInt56LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffffffffffff);
	        assert.ok(offset + 7 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    if (val < 0x100000000000000) {
	        buf.writeInt32LE(val & -1, offset, noAssert);
	        var hi = Math.floor(val * SHIFT_RIGHT_32);
	        buf.writeUInt16LE(hi & 0xffff, offset + 4, noAssert);
	        buf.writeUInt8(hi >>> 16, offset + 6, noAssert);
	    } else {
	        // Special case because 2^56-1 gets rounded up to 2^56
	        buf[offset] = 0xff;
	        buf[offset+1] = 0xff;
	        buf[offset+2] = 0xff;
	        buf[offset+3] = 0xff;
	        buf[offset+4] = 0xff;
	        buf[offset+5] = 0xff;
	        buf[offset+6] = 0xff;
	    }
	}
	module.exports.writeUInt56LE = writeUInt56LE;

	function readUInt64LE(buf, offset, noAssert) {
	    return buf.readUInt32LE(offset + 4, noAssert) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
	}
	module.exports.readUInt64LE = readUInt64LE;

	function writeUInt64LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, 0, 0xffffffffffffffff);
	        assert.ok(offset + 8 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    if (val < 0x10000000000000000) {
	        buf.writeInt32LE(val & -1, offset, noAssert);
	        buf.writeUInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
	    } else {
	        // Special case because 2^64-1 gets rounded up to 2^64
	        buf[offset] = 0xff;
	        buf[offset+1] = 0xff;
	        buf[offset+2] = 0xff;
	        buf[offset+3] = 0xff;
	        buf[offset+4] = 0xff;
	        buf[offset+5] = 0xff;
	        buf[offset+6] = 0xff;
	        buf[offset+7] = 0xff;
	    }
	}
	module.exports.writeUInt64LE = writeUInt64LE;


	function readInt24BE(buf, offset, noAssert) {
	    return (buf.readInt8(offset, noAssert) << 16) + buf.readUInt16BE(offset + 1, noAssert);
	}
	module.exports.readInt24BE = readInt24BE;

	function writeInt24BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x800000, 0x7fffff);
	        assert.ok(offset + 3 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeInt8(val >> 16, offset, noAssert);
	    buf.writeUInt16BE(val & 0xffff, offset + 1, noAssert);
	}
	module.exports.writeInt24BE = writeInt24BE;

	function readInt40BE(buf, offset, noAssert) {
	    return (buf.readInt8(offset, noAssert) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1, noAssert);
	}
	module.exports.readInt40BE = readInt40BE;

	function writeInt40BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x8000000000, 0x7fffffffff);
	        assert.ok(offset + 5 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
	    buf.writeInt32BE(val & -1, offset + 1, noAssert);
	}
	module.exports.writeInt40BE = writeInt40BE;

	function readInt48BE(buf, offset, noAssert) {
	    return buf.readInt16BE(offset, noAssert) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2, noAssert);
	}
	module.exports.readInt48BE = readInt48BE;

	function writeInt48BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x800000000000, 0x7fffffffffff);
	        assert.ok(offset + 6 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
	    buf.writeInt32BE(val & -1, offset + 2, noAssert);
	}
	module.exports.writeInt48BE = writeInt48BE;

	function readInt56BE(buf, offset, noAssert) {
	    return (((buf.readInt8(offset, noAssert) || 0) << 16) + buf.readUInt16BE(offset + 1, noAssert)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3, noAssert);
	}
	module.exports.readInt56BE = readInt56BE;

	function writeInt56BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x800000000000000, 0x7fffffffffffff);
	        assert.ok(offset + 7 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    if (val < 0x80000000000000) {
	        var hi = Math.floor(val * SHIFT_RIGHT_32);
	        buf.writeInt8(hi >> 16, offset, noAssert);
	        buf.writeUInt16BE(hi & 0xffff, offset + 1, noAssert);
	        buf.writeInt32BE(val & -1, offset + 3, noAssert);
	    } else {
	        // Special case because 2^55-1 gets rounded up to 2^55
	        buf[offset] = 0x7f;
	        buf[offset+1] = 0xff;
	        buf[offset+2] = 0xff;
	        buf[offset+3] = 0xff;
	        buf[offset+4] = 0xff;
	        buf[offset+5] = 0xff;
	        buf[offset+6] = 0xff;
	    }
	}
	module.exports.writeInt56BE = writeInt56BE;

	function readInt64BE(buf, offset, noAssert) {
	    return buf.readInt32BE(offset, noAssert) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4, noAssert);
	}
	module.exports.readInt64BE = readInt64BE;

	function writeInt64BE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x800000000000000000, 0x7fffffffffffffff);
	        assert.ok(offset + 8 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    if (val < 0x8000000000000000) {
	        buf.writeInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
	        buf.writeInt32BE(val & -1, offset + 4, noAssert);
	    } else {
	        // Special case because 2^63-1 gets rounded up to 2^63
	        buf[offset] = 0x7f;
	        buf[offset+1] = 0xff;
	        buf[offset+2] = 0xff;
	        buf[offset+3] = 0xff;
	        buf[offset+4] = 0xff;
	        buf[offset+5] = 0xff;
	        buf[offset+6] = 0xff;
	        buf[offset+7] = 0xff;
	    }
	}
	module.exports.writeInt64BE = writeInt64BE;

	function readInt24LE(buf, offset, noAssert) {
	    return (buf.readInt8(offset + 2, noAssert) << 16) + buf.readUInt16LE(offset, noAssert);
	}
	module.exports.readInt24LE = readInt24LE;

	function writeInt24LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x800000, 0x7fffff);
	        assert.ok(offset + 3 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeUInt16LE(val & 0xffff, offset, noAssert);
	    buf.writeInt8(val >> 16, offset + 2, noAssert);
	}
	module.exports.writeInt24LE = writeInt24LE;

	function readInt40LE(buf, offset, noAssert) {
	    return (buf.readInt8(offset + 4, noAssert) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
	}
	module.exports.readInt40LE = readInt40LE;

	function writeInt40LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x8000000000, 0x7fffffffff);
	        assert.ok(offset + 5 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeInt32LE(val & -1, offset, noAssert);
	    buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
	}
	module.exports.writeInt40LE = writeInt40LE;

	function readInt48LE(buf, offset, noAssert) {
	    return buf.readInt16LE(offset + 4, noAssert) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
	}
	module.exports.readInt48LE = readInt48LE;

	function writeInt48LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x800000000000, 0x7fffffffffff);
	        assert.ok(offset + 6 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    buf.writeInt32LE(val & -1, offset, noAssert);
	    buf.writeInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
	}
	module.exports.writeInt48LE = writeInt48LE;

	function readInt56LE(buf, offset, noAssert) {
	    return (((buf.readInt8(offset + 6, noAssert) || 0) << 16) + buf.readUInt16LE(offset + 4, noAssert)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
	}
	module.exports.readInt56LE = readInt56LE;

	function writeInt56LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x80000000000000, 0x7fffffffffffff);
	        assert.ok(offset + 7 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    if (val < 0x80000000000000) {
	        buf.writeInt32LE(val & -1, offset, noAssert);
	        var hi = Math.floor(val * SHIFT_RIGHT_32);
	        buf.writeUInt16LE(hi & 0xffff, offset + 4, noAssert);
	        buf.writeInt8(hi >> 16, offset + 6, noAssert);
	    } else {
	        // Special case because 2^55-1 gets rounded up to 2^55
	        buf[offset] = 0xff;
	        buf[offset+1] = 0xff;
	        buf[offset+2] = 0xff;
	        buf[offset+3] = 0xff;
	        buf[offset+4] = 0xff;
	        buf[offset+5] = 0xff;
	        buf[offset+6] = 0x7f;
	    }
	}
	module.exports.writeInt56LE = writeInt56LE;

	function readInt64LE(buf, offset, noAssert) {
	    return buf.readInt32LE(offset + 4, noAssert) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
	}
	module.exports.readInt64LE = readInt64LE;

	function writeInt64LE(buf, val, offset, noAssert) {
	    if (!noAssert) {
	        check_int(val, -0x8000000000000000, 0x7fffffffffffffff);
	        assert.ok(offset + 8 <= buf.length, "attempt to write beyond end of buffer");
	    }

	    if (val < 0x8000000000000000) {
	        buf.writeInt32LE(val & -1, offset, noAssert);
	        buf.writeInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
	    } else {
	        // Special case because 2^55-1 gets rounded up to 2^55
	        buf[offset] = 0xff;
	        buf[offset+1] = 0xff;
	        buf[offset+2] = 0xff;
	        buf[offset+3] = 0xff;
	        buf[offset+4] = 0xff;
	        buf[offset+5] = 0xff;
	        buf[offset+6] = 0xff;
	        buf[offset+7] = 0x7f;
	    }
	}
	module.exports.writeInt64LE = writeInt64LE;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = __webpack_require__(27);

	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && !isFinite(value)) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) {
	    return a === b;
	  }
	  var aIsArgs = isArguments(a),
	      bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  var ka = objectKeys(a),
	      kb = objectKeys(b),
	      key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(28);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(29);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(6)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// The river sweeps through
	// Silt and twigs, gravel and leaves
	// Driving the wheel on

	'use strict';

	var defs = __webpack_require__(23);
	var constants = defs.constants;
	var decode = defs.decode;

	var Bits = __webpack_require__(31);

	module.exports.PROTOCOL_HEADER = "AMQP" + String.fromCharCode(0, 0, 9, 1);

	/*
	  Frame format:

	  0      1         3             7                size+7 size+8
	  +------+---------+-------------+ +------------+ +-----------+
	  | type | channel | size        | | payload    | | frame-end |
	  +------+---------+-------------+ +------------+ +-----------+
	  octet   short     long            size octets    octet

	  In general I want to know those first three things straight away, so I
	  can discard frames early.

	*/

	// framing constants
	var FRAME_METHOD = constants.FRAME_METHOD,
	FRAME_HEARTBEAT = constants.FRAME_HEARTBEAT,
	FRAME_HEADER = constants.FRAME_HEADER,
	FRAME_BODY = constants.FRAME_BODY,
	FRAME_END = constants.FRAME_END;

	var bodyCons =
	  Bits.builder(FRAME_BODY,
	               'channel:16, size:32, payload:size/binary',
	               FRAME_END);

	// %%% TESTME possibly better to cons the first bit and write the
	// second directly, in the absence of IO lists
	module.exports.makeBodyFrame = function(channel, payload) {
	  return bodyCons({channel: channel, size: payload.length, payload: payload});
	};

	var frameHeaderPattern = Bits.matcher('type:8', 'channel:16',
	                                      'size:32', 'rest/binary');

	function parseFrame(bin, max) {
	  var fh = frameHeaderPattern(bin);
	  if (fh) {
	    var size = fh.size, rest = fh.rest;
	    if (size > max) {
	      throw new Error('Frame size exceeds frame max');
	    }
	    else if (rest.length > size) {
	      if (rest[size] !== FRAME_END)
	        throw new Error('Invalid frame');

	      return {
	        type: fh.type,
	        channel: fh.channel,
	        size: size,
	        payload: rest.slice(0, size),
	        rest: rest.slice(size + 1)
	      };
	    }
	  }
	  return false;
	}

	module.exports.parseFrame = parseFrame;

	var headerPattern = Bits.matcher('class:16',
	                                 '_weight:16',
	                                 'size:64',
	                                 'flagsAndfields/binary');

	var methodPattern = Bits.matcher('id:32, args/binary');

	var HEARTBEAT = {channel: 0};

	module.exports.decodeFrame = function(frame) {
	  var payload = frame.payload;
	  switch (frame.type) {
	  case FRAME_METHOD:
	    var idAndArgs = methodPattern(payload);
	    var id = idAndArgs.id;
	    var fields = decode(id, idAndArgs.args);
	    return {id: id, channel: frame.channel, fields: fields};
	  case FRAME_HEADER:
	    var parts = headerPattern(payload);
	    var id = parts['class'];
	    var fields = decode(id, parts.flagsAndfields);
	    return {id: id, channel: frame.channel,
	            size: parts.size, fields: fields};
	  case FRAME_BODY:
	    return {channel: frame.channel, content: frame.payload};
	  case FRAME_HEARTBEAT:
	    return HEARTBEAT;
	  default:
	    throw new Error('Unknown frame type ' + frame.type);
	  }
	}

	// encoded heartbeat
	module.exports.HEARTBEAT_BUF = new Buffer([constants.FRAME_HEARTBEAT,
	                                           0, 0, 0, 0, // size = 0
	                                           0, 0, // channel = 0
	                                           constants.FRAME_END]);

	module.exports.HEARTBEAT = HEARTBEAT;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports.parse = __webpack_require__(33).parse;
	module.exports.match = __webpack_require__(36).match;
	module.exports.build = __webpack_require__(32).build;
	module.exports.write = __webpack_require__(32).write;

	module.exports.matcher = module.exports.compile =
	  __webpack_require__(37).compile;
	module.exports.builder = __webpack_require__(37).compile_builder;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// -*- js-indent-level: 2 -*-

	// Constructors given patterns

	'use strict';

	var ints = __webpack_require__(25);

	// Interpret the pattern, writing values into a buffer
	function write(buf, offset, pattern, bindings) {
	  for (var i=0, len = pattern.length; i < len; i++) {
	    var segment = pattern[i];
	    
	    switch (segment.type) {
	    case 'string':
	      offset += buf.write(segment.value, offset, 'utf8');
	      break;
	    case 'binary':
	      offset += writeBinary(segment, buf, offset, bindings);
	      break;
	    case 'integer':
	      offset += writeInteger(segment, buf, offset, bindings);
	      break;
	    case 'float':
	      offset += writeFloat(segment, buf, offset, bindings);
	      break;
	    }
	  }
	  return offset;
	}

	function build(pattern, bindings) {
	  var bufsize = size_of(pattern, bindings);
	  var buf = new Buffer(bufsize);
	  write(buf, 0, pattern, bindings);
	  return buf;
	}

	// In bytes
	function size_of_segment(segment, bindings) {
	  // size refers to a variable
	  if (typeof segment.size === 'string') {
	    return (bindings[segment.size] * segment.unit) / 8;
	  }
	  if (segment.type === 'string') {
	    return Buffer.byteLength(segment.value, 'utf8');
	  }
	  if (segment.type === 'binary' && segment.size === true) {
	    var val = bindings[segment.name];
	    return val.length;
	  }
	  return (segment.size * segment.unit) / 8;
	}

	// size of the to-be-constructed binary, in bytes
	function size_of(segments, bindings) {
	  var size = 0;
	  for (var i=0, len = segments.length; i < len; i++) {
	    size += size_of_segment(segments[i], bindings);
	  }
	  return size;
	}

	function writeBinary(segment, buf, offset, bindings) {
	  var bin = bindings[segment.name];
	  var size = size_of_segment(segment, bindings);
	  bin.copy(buf, offset, 0, size);
	  return size;
	}

	// TODO in ff might use the noAssert argument to Buffer.write*() but
	// need to check that it does the right thing wrt little-endian

	function writeInteger(segment, buf, offset, bindings) {
	  var value = (segment.name) ? bindings[segment.name] : segment.value;
	  var size = size_of_segment(segment, bindings);
	  return write_int(buf, value, offset, size, segment.bigendian);
	}

	function write_int(buf, value, offset, size, bigendian) {
	  switch (size) {
	  case 1:
	    buf.writeUInt8(value, offset);
	    break;
	  case 2:
	    (bigendian) ?
	      buf.writeUInt16BE(value, offset) :
	      buf.writeUInt16LE(value, offset);
	    break;
	  case 4:
	    (bigendian) ?
	      buf.writeUInt32BE(value, offset) :
	      buf.writeUInt32LE(value, offset);
	    break;
	  case 8:
	    (bigendian) ?
	      ints.writeUInt64BE(buf, value, offset) :
	      ints.writeUInt64LE(buf, value, offset);
	    break;
	  default:
	    throw new Error("integer size * unit must be 8, 16, 32 or 64");
	  }
	  return size;
	}

	function writeFloat(segment, buf, offset, bindings) {
	  var value = (segment.name) ? bindings[segment.name] : segment.value;
	  var size = size_of_segment(segment, bindings);
	  return write_float(buf, value, offset, size, segment.bigendian);
	}

	function write_float(buf, value, offset, size, bigendian) {
	  if (size === 4) {
	    (bigendian) ?
	      buf.writeFloatBE(value, offset) :
	      buf.writeFloatLE(value, offset);
	  }
	  else if (size === 8) {
	    (bigendian) ?
	      buf.writeDoubleBE(value, offset) :
	      buf.writeDoubleLE(value, offset);
	  }
	  else {
	    throw new Error("float size * unit must be 32 or 64");
	  }
	  return size;
	}

	var parse = __webpack_require__(33).parse;

	module.exports.write = write;
	module.exports.build = build;
	module.exports.write_int = write_int;
	module.exports.write_float = write_float;

	module.exports.builder = function(pstr) {
	  pstr = (arguments.length > 1) ? [].join.call(arguments, ',') : pstr;
	  var pattern = parse(pstr);
	  return function(vars) {
	    return build(pattern, vars);
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// Parse patterns in string form into the form we use for interpreting
	// (and later, for compiling).

	'use strict';

	var ast = __webpack_require__(34);
	var parser = __webpack_require__(35);

	function parse_pattern(string) {
	  var segments = parser.parse(string);
	  for (var i=0, len = segments.length; i < len; i++) {
	    var s = segments[i];
	    if (s.string != undefined) {
	      segments[i] = ast.string(s.string);
	    }
	    else if (s.value != undefined) {
	      segments[i] = ast.value(s.value, s.size, s.specifiers);
	    }
	    else if (s.name != undefined) {
	      segments[i] = ast.variable(s.name, s.size, s.specifiers);
	    }
	    else {
	      throw "Unknown segment " + s;
	    }
	  }
	  return segments;
	}

	module.exports.parse = function() {
	  var str = [].join.call(arguments, ',');
	  return parse_pattern(str);
	};


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	// -*- js-indent-level: 2 -*-
	// Constructing patterns

	'use strict';

	function set(values) {
	  var s = {};
	  for (var i in values) {
	    s[values[i]] = 1;
	  }
	  return s;
	}

	// Construct a segment bound to a variable, e.g., from a segment like
	// "Len:32/unsigned-big". `specifiers0` is an array.
	function variable(name, size, specifiers0) {
	  var specifiers = set(specifiers0);
	  var segment = {name: name};
	  segment.type = type_in(specifiers);
	  specs(segment, segment.type, specifiers);
	  segment.size = size_of(segment, segment.type, size, segment.unit);
	  return segment;
	}

	module.exports.variable = variable;
	module.exports.rest = function() {
	  return variable('_', true, ['binary']);
	}

	// Construct a segment with a literal value, e.g., from a segment like
	// "206". `specifiers0` is an array.

	function value(val, size, specifiers0) {
	  var specifiers = set(specifiers0);
	  var segment = {value: val};
	  segment.type = type_in(specifiers);
	  // TODO check type v. value ..
	  specs(segment, segment.type, specifiers);
	  segment.size = size_of(segment, segment.type, size, segment.unit);
	  return segment;
	}

	module.exports.value = value;

	// A string can appear as a literal, but it must appear without
	// specifiers.
	function string(val) {
	  return {value: val, type: 'string'};
	}
	module.exports.string = string;

	var TYPES = {'integer': 1, 'binary': 1, 'float': 1};
	function type_in(specifiers) {
	  for (var t in specifiers) {
	    if (TYPES[t]) { return t; }
	  }
	  return 'integer';
	}

	function specs(segment, type, specifiers) {
	  switch (type) {
	  case 'integer':
	    segment.signed = signed_in(specifiers);
	    // fall through
	  case 'float':
	    segment.bigendian = endian_in(specifiers);
	    // fall through
	  default:
	    segment.unit = unit_in(specifiers, segment.type);
	  }
	  return segment;
	}

	function endian_in(specifiers) {
	  // default is big, but I have chosen true = bigendian
	  return !specifiers['little'];
	}

	function signed_in(specifiers) {
	  // this time I got it right; default is unsigned
	  return specifiers['signed'];
	}

	function unit_in(specifiers, type) {
	  for (var s in specifiers) {
	    if (s.substr(0, 5) == 'unit:') {
	      var unit = parseInt(s.substr(5));
	      // TODO check sane for type
	      return unit;
	    }
	  }
	  // OK defaults then
	  switch (type) {
	  case 'binary':
	    return 8;
	  case 'integer':
	  case 'float':
	    return 1;
	  }
	}

	function size_of(segment, type, size, unit) {
	  if (size !== undefined && size !== '') {
	    return size;
	  }
	  else {
	    switch (type) {
	    case 'integer':
	      return 8;
	    case 'float':
	      return 64;
	    case 'binary':
	      return true;
	    }
	  }
	}


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (function(){
	  /*
	   * Generated by PEG.js 0.7.0.
	   *
	   * http://pegjs.majda.cz/
	   */
	  
	  function quote(s) {
	    /*
	     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
	     * string literal except for the closing quote character, backslash,
	     * carriage return, line separator, paragraph separator, and line feed.
	     * Any character may appear in the form of an escape sequence.
	     *
	     * For portability, we also escape escape all control and non-ASCII
	     * characters. Note that "\0" and "\v" escape sequences are not used
	     * because JSHint does not like the first and IE the second.
	     */
	     return '"' + s
	      .replace(/\\/g, '\\\\')  // backslash
	      .replace(/"/g, '\\"')    // closing quote character
	      .replace(/\x08/g, '\\b') // backspace
	      .replace(/\t/g, '\\t')   // horizontal tab
	      .replace(/\n/g, '\\n')   // line feed
	      .replace(/\f/g, '\\f')   // form feed
	      .replace(/\r/g, '\\r')   // carriage return
	      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
	      + '"';
	  }
	  
	  var result = {
	    /*
	     * Parses the input with a generated parser. If the parsing is successfull,
	     * returns a value explicitly or implicitly specified by the grammar from
	     * which the parser was generated (see |PEG.buildParser|). If the parsing is
	     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
	     */
	    parse: function(input, startRule) {
	      var parseFunctions = {
	        "start": parse_start,
	        "segmentTail": parse_segmentTail,
	        "segment": parse_segment,
	        "string": parse_string,
	        "chars": parse_chars,
	        "char": parse_char,
	        "hexDigit": parse_hexDigit,
	        "identifier": parse_identifier,
	        "number": parse_number,
	        "size": parse_size,
	        "specifierList": parse_specifierList,
	        "specifierTail": parse_specifierTail,
	        "specifier": parse_specifier,
	        "unit": parse_unit,
	        "ws": parse_ws
	      };
	      
	      if (startRule !== undefined) {
	        if (parseFunctions[startRule] === undefined) {
	          throw new Error("Invalid rule name: " + quote(startRule) + ".");
	        }
	      } else {
	        startRule = "start";
	      }
	      
	      var pos = 0;
	      var reportFailures = 0;
	      var rightmostFailuresPos = 0;
	      var rightmostFailuresExpected = [];
	      
	      function padLeft(input, padding, length) {
	        var result = input;
	        
	        var padLength = length - input.length;
	        for (var i = 0; i < padLength; i++) {
	          result = padding + result;
	        }
	        
	        return result;
	      }
	      
	      function escape(ch) {
	        var charCode = ch.charCodeAt(0);
	        var escapeChar;
	        var length;
	        
	        if (charCode <= 0xFF) {
	          escapeChar = 'x';
	          length = 2;
	        } else {
	          escapeChar = 'u';
	          length = 4;
	        }
	        
	        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
	      }
	      
	      function matchFailed(failure) {
	        if (pos < rightmostFailuresPos) {
	          return;
	        }
	        
	        if (pos > rightmostFailuresPos) {
	          rightmostFailuresPos = pos;
	          rightmostFailuresExpected = [];
	        }
	        
	        rightmostFailuresExpected.push(failure);
	      }
	      
	      function parse_start() {
	        var result0, result1, result2, result3;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        pos1 = pos;
	        result0 = parse_ws();
	        if (result0 !== null) {
	          result1 = parse_segment();
	          if (result1 !== null) {
	            result2 = [];
	            result3 = parse_segmentTail();
	            while (result3 !== null) {
	              result2.push(result3);
	              result3 = parse_segmentTail();
	            }
	            if (result2 !== null) {
	              result0 = [result0, result1, result2];
	            } else {
	              result0 = null;
	              pos = pos1;
	            }
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	        } else {
	          result0 = null;
	          pos = pos1;
	        }
	        if (result0 !== null) {
	          result0 = (function(offset, head, tail) { tail.unshift(head); return tail; })(pos0, result0[1], result0[2]);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        return result0;
	      }
	      
	      function parse_segmentTail() {
	        var result0, result1, result2, result3;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        pos1 = pos;
	        result0 = parse_ws();
	        if (result0 !== null) {
	          if (input.charCodeAt(pos) === 44) {
	            result1 = ",";
	            pos++;
	          } else {
	            result1 = null;
	            if (reportFailures === 0) {
	              matchFailed("\",\"");
	            }
	          }
	          if (result1 !== null) {
	            result2 = parse_ws();
	            if (result2 !== null) {
	              result3 = parse_segment();
	              if (result3 !== null) {
	                result0 = [result0, result1, result2, result3];
	              } else {
	                result0 = null;
	                pos = pos1;
	              }
	            } else {
	              result0 = null;
	              pos = pos1;
	            }
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	        } else {
	          result0 = null;
	          pos = pos1;
	        }
	        if (result0 !== null) {
	          result0 = (function(offset, seg) { return seg; })(pos0, result0[3]);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        return result0;
	      }
	      
	      function parse_segment() {
	        var result0, result1, result2;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        result0 = parse_string();
	        if (result0 !== null) {
	          result0 = (function(offset, str) { return {string: str}; })(pos0, result0);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        if (result0 === null) {
	          pos0 = pos;
	          pos1 = pos;
	          result0 = parse_identifier();
	          if (result0 !== null) {
	            result1 = parse_size();
	            result1 = result1 !== null ? result1 : "";
	            if (result1 !== null) {
	              result2 = parse_specifierList();
	              result2 = result2 !== null ? result2 : "";
	              if (result2 !== null) {
	                result0 = [result0, result1, result2];
	              } else {
	                result0 = null;
	                pos = pos1;
	              }
	            } else {
	              result0 = null;
	              pos = pos1;
	            }
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	          if (result0 !== null) {
	            result0 = (function(offset, v, size, specs) { return {name: v, size: size, specifiers: specs}; })(pos0, result0[0], result0[1], result0[2]);
	          }
	          if (result0 === null) {
	            pos = pos0;
	          }
	          if (result0 === null) {
	            pos0 = pos;
	            pos1 = pos;
	            result0 = parse_number();
	            if (result0 !== null) {
	              result1 = parse_size();
	              result1 = result1 !== null ? result1 : "";
	              if (result1 !== null) {
	                result2 = parse_specifierList();
	                result2 = result2 !== null ? result2 : "";
	                if (result2 !== null) {
	                  result0 = [result0, result1, result2];
	                } else {
	                  result0 = null;
	                  pos = pos1;
	                }
	              } else {
	                result0 = null;
	                pos = pos1;
	              }
	            } else {
	              result0 = null;
	              pos = pos1;
	            }
	            if (result0 !== null) {
	              result0 = (function(offset, v, size, specs) { return {value: v, size: size, specifiers: specs}; })(pos0, result0[0], result0[1], result0[2]);
	            }
	            if (result0 === null) {
	              pos = pos0;
	            }
	          }
	        }
	        return result0;
	      }
	      
	      function parse_string() {
	        var result0, result1, result2;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        pos1 = pos;
	        if (input.charCodeAt(pos) === 34) {
	          result0 = "\"";
	          pos++;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("\"\\\"\"");
	          }
	        }
	        if (result0 !== null) {
	          if (input.charCodeAt(pos) === 34) {
	            result1 = "\"";
	            pos++;
	          } else {
	            result1 = null;
	            if (reportFailures === 0) {
	              matchFailed("\"\\\"\"");
	            }
	          }
	          if (result1 !== null) {
	            result0 = [result0, result1];
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	        } else {
	          result0 = null;
	          pos = pos1;
	        }
	        if (result0 !== null) {
	          result0 = (function(offset) { return "";    })(pos0);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        if (result0 === null) {
	          pos0 = pos;
	          pos1 = pos;
	          if (input.charCodeAt(pos) === 34) {
	            result0 = "\"";
	            pos++;
	          } else {
	            result0 = null;
	            if (reportFailures === 0) {
	              matchFailed("\"\\\"\"");
	            }
	          }
	          if (result0 !== null) {
	            result1 = parse_chars();
	            if (result1 !== null) {
	              if (input.charCodeAt(pos) === 34) {
	                result2 = "\"";
	                pos++;
	              } else {
	                result2 = null;
	                if (reportFailures === 0) {
	                  matchFailed("\"\\\"\"");
	                }
	              }
	              if (result2 !== null) {
	                result0 = [result0, result1, result2];
	              } else {
	                result0 = null;
	                pos = pos1;
	              }
	            } else {
	              result0 = null;
	              pos = pos1;
	            }
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	          if (result0 !== null) {
	            result0 = (function(offset, chars) { return chars; })(pos0, result0[1]);
	          }
	          if (result0 === null) {
	            pos = pos0;
	          }
	        }
	        return result0;
	      }
	      
	      function parse_chars() {
	        var result0, result1;
	        var pos0;
	        
	        pos0 = pos;
	        result1 = parse_char();
	        if (result1 !== null) {
	          result0 = [];
	          while (result1 !== null) {
	            result0.push(result1);
	            result1 = parse_char();
	          }
	        } else {
	          result0 = null;
	        }
	        if (result0 !== null) {
	          result0 = (function(offset, chars) { return chars.join(""); })(pos0, result0);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        return result0;
	      }
	      
	      function parse_char() {
	        var result0, result1, result2, result3, result4;
	        var pos0, pos1;
	        
	        if (/^[^"\\\0-\x1F]/.test(input.charAt(pos))) {
	          result0 = input.charAt(pos);
	          pos++;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("[^\"\\\\\\0-\\x1F]");
	          }
	        }
	        if (result0 === null) {
	          pos0 = pos;
	          if (input.substr(pos, 2) === "\\\"") {
	            result0 = "\\\"";
	            pos += 2;
	          } else {
	            result0 = null;
	            if (reportFailures === 0) {
	              matchFailed("\"\\\\\\\"\"");
	            }
	          }
	          if (result0 !== null) {
	            result0 = (function(offset) { return '"';  })(pos0);
	          }
	          if (result0 === null) {
	            pos = pos0;
	          }
	          if (result0 === null) {
	            pos0 = pos;
	            if (input.substr(pos, 2) === "\\\\") {
	              result0 = "\\\\";
	              pos += 2;
	            } else {
	              result0 = null;
	              if (reportFailures === 0) {
	                matchFailed("\"\\\\\\\\\"");
	              }
	            }
	            if (result0 !== null) {
	              result0 = (function(offset) { return "\\"; })(pos0);
	            }
	            if (result0 === null) {
	              pos = pos0;
	            }
	            if (result0 === null) {
	              pos0 = pos;
	              if (input.substr(pos, 2) === "\\/") {
	                result0 = "\\/";
	                pos += 2;
	              } else {
	                result0 = null;
	                if (reportFailures === 0) {
	                  matchFailed("\"\\\\/\"");
	                }
	              }
	              if (result0 !== null) {
	                result0 = (function(offset) { return "/";  })(pos0);
	              }
	              if (result0 === null) {
	                pos = pos0;
	              }
	              if (result0 === null) {
	                pos0 = pos;
	                if (input.substr(pos, 2) === "\\b") {
	                  result0 = "\\b";
	                  pos += 2;
	                } else {
	                  result0 = null;
	                  if (reportFailures === 0) {
	                    matchFailed("\"\\\\b\"");
	                  }
	                }
	                if (result0 !== null) {
	                  result0 = (function(offset) { return "\b"; })(pos0);
	                }
	                if (result0 === null) {
	                  pos = pos0;
	                }
	                if (result0 === null) {
	                  pos0 = pos;
	                  if (input.substr(pos, 2) === "\\f") {
	                    result0 = "\\f";
	                    pos += 2;
	                  } else {
	                    result0 = null;
	                    if (reportFailures === 0) {
	                      matchFailed("\"\\\\f\"");
	                    }
	                  }
	                  if (result0 !== null) {
	                    result0 = (function(offset) { return "\f"; })(pos0);
	                  }
	                  if (result0 === null) {
	                    pos = pos0;
	                  }
	                  if (result0 === null) {
	                    pos0 = pos;
	                    if (input.substr(pos, 2) === "\\n") {
	                      result0 = "\\n";
	                      pos += 2;
	                    } else {
	                      result0 = null;
	                      if (reportFailures === 0) {
	                        matchFailed("\"\\\\n\"");
	                      }
	                    }
	                    if (result0 !== null) {
	                      result0 = (function(offset) { return "\n"; })(pos0);
	                    }
	                    if (result0 === null) {
	                      pos = pos0;
	                    }
	                    if (result0 === null) {
	                      pos0 = pos;
	                      if (input.substr(pos, 2) === "\\r") {
	                        result0 = "\\r";
	                        pos += 2;
	                      } else {
	                        result0 = null;
	                        if (reportFailures === 0) {
	                          matchFailed("\"\\\\r\"");
	                        }
	                      }
	                      if (result0 !== null) {
	                        result0 = (function(offset) { return "\r"; })(pos0);
	                      }
	                      if (result0 === null) {
	                        pos = pos0;
	                      }
	                      if (result0 === null) {
	                        pos0 = pos;
	                        if (input.substr(pos, 2) === "\\t") {
	                          result0 = "\\t";
	                          pos += 2;
	                        } else {
	                          result0 = null;
	                          if (reportFailures === 0) {
	                            matchFailed("\"\\\\t\"");
	                          }
	                        }
	                        if (result0 !== null) {
	                          result0 = (function(offset) { return "\t"; })(pos0);
	                        }
	                        if (result0 === null) {
	                          pos = pos0;
	                        }
	                        if (result0 === null) {
	                          pos0 = pos;
	                          pos1 = pos;
	                          if (input.substr(pos, 2) === "\\u") {
	                            result0 = "\\u";
	                            pos += 2;
	                          } else {
	                            result0 = null;
	                            if (reportFailures === 0) {
	                              matchFailed("\"\\\\u\"");
	                            }
	                          }
	                          if (result0 !== null) {
	                            result1 = parse_hexDigit();
	                            if (result1 !== null) {
	                              result2 = parse_hexDigit();
	                              if (result2 !== null) {
	                                result3 = parse_hexDigit();
	                                if (result3 !== null) {
	                                  result4 = parse_hexDigit();
	                                  if (result4 !== null) {
	                                    result0 = [result0, result1, result2, result3, result4];
	                                  } else {
	                                    result0 = null;
	                                    pos = pos1;
	                                  }
	                                } else {
	                                  result0 = null;
	                                  pos = pos1;
	                                }
	                              } else {
	                                result0 = null;
	                                pos = pos1;
	                              }
	                            } else {
	                              result0 = null;
	                              pos = pos1;
	                            }
	                          } else {
	                            result0 = null;
	                            pos = pos1;
	                          }
	                          if (result0 !== null) {
	                            result0 = (function(offset, h1, h2, h3, h4) {
	                                return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
	                              })(pos0, result0[1], result0[2], result0[3], result0[4]);
	                          }
	                          if (result0 === null) {
	                            pos = pos0;
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	        return result0;
	      }
	      
	      function parse_hexDigit() {
	        var result0;
	        
	        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
	          result0 = input.charAt(pos);
	          pos++;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("[0-9a-fA-F]");
	          }
	        }
	        return result0;
	      }
	      
	      function parse_identifier() {
	        var result0, result1, result2;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        pos1 = pos;
	        if (/^[_a-zA-Z]/.test(input.charAt(pos))) {
	          result0 = input.charAt(pos);
	          pos++;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("[_a-zA-Z]");
	          }
	        }
	        if (result0 !== null) {
	          result1 = [];
	          if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {
	            result2 = input.charAt(pos);
	            pos++;
	          } else {
	            result2 = null;
	            if (reportFailures === 0) {
	              matchFailed("[_a-zA-Z0-9]");
	            }
	          }
	          while (result2 !== null) {
	            result1.push(result2);
	            if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {
	              result2 = input.charAt(pos);
	              pos++;
	            } else {
	              result2 = null;
	              if (reportFailures === 0) {
	                matchFailed("[_a-zA-Z0-9]");
	              }
	            }
	          }
	          if (result1 !== null) {
	            result0 = [result0, result1];
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	        } else {
	          result0 = null;
	          pos = pos1;
	        }
	        if (result0 !== null) {
	          result0 = (function(offset, head, tail) { return head + tail.join(''); })(pos0, result0[0], result0[1]);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        return result0;
	      }
	      
	      function parse_number() {
	        var result0, result1, result2;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        if (input.charCodeAt(pos) === 48) {
	          result0 = "0";
	          pos++;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("\"0\"");
	          }
	        }
	        if (result0 !== null) {
	          result0 = (function(offset) { return 0; })(pos0);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        if (result0 === null) {
	          pos0 = pos;
	          pos1 = pos;
	          if (/^[1-9]/.test(input.charAt(pos))) {
	            result0 = input.charAt(pos);
	            pos++;
	          } else {
	            result0 = null;
	            if (reportFailures === 0) {
	              matchFailed("[1-9]");
	            }
	          }
	          if (result0 !== null) {
	            result1 = [];
	            if (/^[0-9]/.test(input.charAt(pos))) {
	              result2 = input.charAt(pos);
	              pos++;
	            } else {
	              result2 = null;
	              if (reportFailures === 0) {
	                matchFailed("[0-9]");
	              }
	            }
	            while (result2 !== null) {
	              result1.push(result2);
	              if (/^[0-9]/.test(input.charAt(pos))) {
	                result2 = input.charAt(pos);
	                pos++;
	              } else {
	                result2 = null;
	                if (reportFailures === 0) {
	                  matchFailed("[0-9]");
	                }
	              }
	            }
	            if (result1 !== null) {
	              result0 = [result0, result1];
	            } else {
	              result0 = null;
	              pos = pos1;
	            }
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	          if (result0 !== null) {
	            result0 = (function(offset, head, tail) { return parseInt(head + tail.join('')); })(pos0, result0[0], result0[1]);
	          }
	          if (result0 === null) {
	            pos = pos0;
	          }
	        }
	        return result0;
	      }
	      
	      function parse_size() {
	        var result0, result1;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        pos1 = pos;
	        if (input.charCodeAt(pos) === 58) {
	          result0 = ":";
	          pos++;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("\":\"");
	          }
	        }
	        if (result0 !== null) {
	          result1 = parse_number();
	          if (result1 !== null) {
	            result0 = [result0, result1];
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	        } else {
	          result0 = null;
	          pos = pos1;
	        }
	        if (result0 !== null) {
	          result0 = (function(offset, num) { return num; })(pos0, result0[1]);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        if (result0 === null) {
	          pos0 = pos;
	          pos1 = pos;
	          if (input.charCodeAt(pos) === 58) {
	            result0 = ":";
	            pos++;
	          } else {
	            result0 = null;
	            if (reportFailures === 0) {
	              matchFailed("\":\"");
	            }
	          }
	          if (result0 !== null) {
	            result1 = parse_identifier();
	            if (result1 !== null) {
	              result0 = [result0, result1];
	            } else {
	              result0 = null;
	              pos = pos1;
	            }
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	          if (result0 !== null) {
	            result0 = (function(offset, id) { return id; })(pos0, result0[1]);
	          }
	          if (result0 === null) {
	            pos = pos0;
	          }
	        }
	        return result0;
	      }
	      
	      function parse_specifierList() {
	        var result0, result1, result2, result3;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        pos1 = pos;
	        if (input.charCodeAt(pos) === 47) {
	          result0 = "/";
	          pos++;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("\"/\"");
	          }
	        }
	        if (result0 !== null) {
	          result1 = parse_specifier();
	          if (result1 !== null) {
	            result2 = [];
	            result3 = parse_specifierTail();
	            while (result3 !== null) {
	              result2.push(result3);
	              result3 = parse_specifierTail();
	            }
	            if (result2 !== null) {
	              result0 = [result0, result1, result2];
	            } else {
	              result0 = null;
	              pos = pos1;
	            }
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	        } else {
	          result0 = null;
	          pos = pos1;
	        }
	        if (result0 !== null) {
	          result0 = (function(offset, head, tail) { tail.unshift(head); return tail; })(pos0, result0[1], result0[2]);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        return result0;
	      }
	      
	      function parse_specifierTail() {
	        var result0, result1;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        pos1 = pos;
	        if (input.charCodeAt(pos) === 45) {
	          result0 = "-";
	          pos++;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("\"-\"");
	          }
	        }
	        if (result0 !== null) {
	          result1 = parse_specifier();
	          if (result1 !== null) {
	            result0 = [result0, result1];
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	        } else {
	          result0 = null;
	          pos = pos1;
	        }
	        if (result0 !== null) {
	          result0 = (function(offset, spec) { return spec; })(pos0, result0[1]);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        return result0;
	      }
	      
	      function parse_specifier() {
	        var result0;
	        
	        if (input.substr(pos, 6) === "little") {
	          result0 = "little";
	          pos += 6;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("\"little\"");
	          }
	        }
	        if (result0 === null) {
	          if (input.substr(pos, 3) === "big") {
	            result0 = "big";
	            pos += 3;
	          } else {
	            result0 = null;
	            if (reportFailures === 0) {
	              matchFailed("\"big\"");
	            }
	          }
	          if (result0 === null) {
	            if (input.substr(pos, 6) === "signed") {
	              result0 = "signed";
	              pos += 6;
	            } else {
	              result0 = null;
	              if (reportFailures === 0) {
	                matchFailed("\"signed\"");
	              }
	            }
	            if (result0 === null) {
	              if (input.substr(pos, 8) === "unsigned") {
	                result0 = "unsigned";
	                pos += 8;
	              } else {
	                result0 = null;
	                if (reportFailures === 0) {
	                  matchFailed("\"unsigned\"");
	                }
	              }
	              if (result0 === null) {
	                if (input.substr(pos, 7) === "integer") {
	                  result0 = "integer";
	                  pos += 7;
	                } else {
	                  result0 = null;
	                  if (reportFailures === 0) {
	                    matchFailed("\"integer\"");
	                  }
	                }
	                if (result0 === null) {
	                  if (input.substr(pos, 6) === "binary") {
	                    result0 = "binary";
	                    pos += 6;
	                  } else {
	                    result0 = null;
	                    if (reportFailures === 0) {
	                      matchFailed("\"binary\"");
	                    }
	                  }
	                  if (result0 === null) {
	                    if (input.substr(pos, 5) === "float") {
	                      result0 = "float";
	                      pos += 5;
	                    } else {
	                      result0 = null;
	                      if (reportFailures === 0) {
	                        matchFailed("\"float\"");
	                      }
	                    }
	                    if (result0 === null) {
	                      result0 = parse_unit();
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	        return result0;
	      }
	      
	      function parse_unit() {
	        var result0, result1;
	        var pos0, pos1;
	        
	        pos0 = pos;
	        pos1 = pos;
	        if (input.substr(pos, 5) === "unit:") {
	          result0 = "unit:";
	          pos += 5;
	        } else {
	          result0 = null;
	          if (reportFailures === 0) {
	            matchFailed("\"unit:\"");
	          }
	        }
	        if (result0 !== null) {
	          result1 = parse_number();
	          if (result1 !== null) {
	            result0 = [result0, result1];
	          } else {
	            result0 = null;
	            pos = pos1;
	          }
	        } else {
	          result0 = null;
	          pos = pos1;
	        }
	        if (result0 !== null) {
	          result0 = (function(offset, num) { return 'unit:' + num; })(pos0, result0[1]);
	        }
	        if (result0 === null) {
	          pos = pos0;
	        }
	        return result0;
	      }
	      
	      function parse_ws() {
	        var result0, result1;
	        
	        result0 = [];
	        if (/^[ \t\n]/.test(input.charAt(pos))) {
	          result1 = input.charAt(pos);
	          pos++;
	        } else {
	          result1 = null;
	          if (reportFailures === 0) {
	            matchFailed("[ \\t\\n]");
	          }
	        }
	        while (result1 !== null) {
	          result0.push(result1);
	          if (/^[ \t\n]/.test(input.charAt(pos))) {
	            result1 = input.charAt(pos);
	            pos++;
	          } else {
	            result1 = null;
	            if (reportFailures === 0) {
	              matchFailed("[ \\t\\n]");
	            }
	          }
	        }
	        return result0;
	      }
	      
	      
	      function cleanupExpected(expected) {
	        expected.sort();
	        
	        var lastExpected = null;
	        var cleanExpected = [];
	        for (var i = 0; i < expected.length; i++) {
	          if (expected[i] !== lastExpected) {
	            cleanExpected.push(expected[i]);
	            lastExpected = expected[i];
	          }
	        }
	        return cleanExpected;
	      }
	      
	      function computeErrorPosition() {
	        /*
	         * The first idea was to use |String.split| to break the input up to the
	         * error position along newlines and derive the line and column from
	         * there. However IE's |split| implementation is so broken that it was
	         * enough to prevent it.
	         */
	        
	        var line = 1;
	        var column = 1;
	        var seenCR = false;
	        
	        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
	          var ch = input.charAt(i);
	          if (ch === "\n") {
	            if (!seenCR) { line++; }
	            column = 1;
	            seenCR = false;
	          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
	            line++;
	            column = 1;
	            seenCR = true;
	          } else {
	            column++;
	            seenCR = false;
	          }
	        }
	        
	        return { line: line, column: column };
	      }
	      
	      
	      var result = parseFunctions[startRule]();
	      
	      /*
	       * The parser is now in one of the following three states:
	       *
	       * 1. The parser successfully parsed the whole input.
	       *
	       *    - |result !== null|
	       *    - |pos === input.length|
	       *    - |rightmostFailuresExpected| may or may not contain something
	       *
	       * 2. The parser successfully parsed only a part of the input.
	       *
	       *    - |result !== null|
	       *    - |pos < input.length|
	       *    - |rightmostFailuresExpected| may or may not contain something
	       *
	       * 3. The parser did not successfully parse any part of the input.
	       *
	       *   - |result === null|
	       *   - |pos === 0|
	       *   - |rightmostFailuresExpected| contains at least one failure
	       *
	       * All code following this comment (including called functions) must
	       * handle these states.
	       */
	      if (result === null || pos !== input.length) {
	        var offset = Math.max(pos, rightmostFailuresPos);
	        var found = offset < input.length ? input.charAt(offset) : null;
	        var errorPosition = computeErrorPosition();
	        
	        throw new this.SyntaxError(
	          cleanupExpected(rightmostFailuresExpected),
	          found,
	          offset,
	          errorPosition.line,
	          errorPosition.column
	        );
	      }
	      
	      return result;
	    },
	    
	    /* Returns the parser source code. */
	    toSource: function() { return this._source; }
	  };
	  
	  /* Thrown when a parser encounters a syntax error. */
	  
	  result.SyntaxError = function(expected, found, offset, line, column) {
	    function buildMessage(expected, found) {
	      var expectedHumanized, foundHumanized;
	      
	      switch (expected.length) {
	        case 0:
	          expectedHumanized = "end of input";
	          break;
	        case 1:
	          expectedHumanized = expected[0];
	          break;
	        default:
	          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
	            + " or "
	            + expected[expected.length - 1];
	      }
	      
	      foundHumanized = found ? quote(found) : "end of input";
	      
	      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
	    }
	    
	    this.name = "SyntaxError";
	    this.expected = expected;
	    this.found = found;
	    this.message = buildMessage(expected, found);
	    this.offset = offset;
	    this.line = line;
	    this.column = column;
	  };
	  
	  result.SyntaxError.prototype = Error.prototype;
	  
	  return result;
	})();


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// -*- js-indent: 2 -*-
	// Interpreter for bit syntax AST.
	// Grammar:
	//
	// pattern   := segment ("," segment)*
	// segment   := (value | var) (":" size)? ("/" specifier ("-" specifier)*)? | string
	// var       := "_" | identifier
	// size      := integer | var
	// specifier := "little" | "big" | "signed" | "unsigned" | "unit" ":" 0..256 | type
	// type      := "integer" | "binary" | "float"
	//
	// where integer has the obvious meaning, and identifier is anything
	// other than "_" that fits the JavaScript identifier specification.
	//

	// We'll use an object to represent each segment, and an array of
	// segments for a pattern. We won't try to optimise for groups of
	// patterns; we'll just step through each to see if it works. We rely
	// a hypothetical prior step to check that it's a valid pattern.

	// ? compile to intermediate instructions ?

	// A segment looks like
	// {
	//    type: string, // 'string' is special case
	//    size: integer | true, // true means 'all remaining'
	//    name: string | null, // (may be '_')
	//    value: value | null, // either name OR value
	//    unit: integer,
	//    signed: boolean,
	//    bigendian: boolean
	// }

	'use strict';

	var ints = __webpack_require__(25);

	var debug = (process.env.DEBUG) ?
	  function(s) { console.log(s); } : function () {};

	function parse_int(bin, off, sizeInBytes, bigendian, signed) {
	  switch (sizeInBytes) {
	  case 1:
	    return (signed) ? bin.readInt8(off) : bin.readUInt8(off);
	  case 2:
	    return (bigendian) ?
	      (signed) ? bin.readInt16BE(off) : bin.readUInt16BE(off) :
	      (signed) ? bin.readInt16LE(off) : bin.readUInt16LE(off);
	  case 4:
	    return (bigendian) ?
	      (signed) ? bin.readInt32BE(off) : bin.readUInt32BE(off) :
	      (signed) ? bin.readInt32LE(off) : bin.readUInt32LE(off);
	  case 8:
	    return (bigendian) ?
	      ((signed) ? ints.readInt64BE : ints.readUInt64BE)(bin, off) :
	      ((signed) ? ints.readInt64LE : ints.readUInt64LE)(bin, off);
	  default:
	    throw "Integers must be 8-, 16-, 32- or 64-bit";
	  }
	}

	function parse_float(bin, off, sizeInBytes, bigendian) {
	  switch (sizeInBytes) {
	  case 4:
	    return (bigendian) ? bin.readFloatBE(off) : bin.readFloatLE(off);
	  case 8:
	    return (bigendian) ? bin.readDoubleBE(off) : bin.readDoubleLE(off);
	  default:
	    throw "Floats must be 32- or 64-bit";
	  }
	}

	function size_of(segment, bound) {
	  var size = segment.size;
	  if (typeof size === 'string') {
	    return bound[size];
	  }
	  else {
	    return size;
	  }
	}

	function new_scope(env) {
	  function scope() {};
	  scope.prototype = env;
	  return new scope();
	}

	function bindings(scope) {
	  var s = {};
	  for (var k in scope) {
	    if (scope.hasOwnProperty(k)) {
	      s[k] = scope[k];
	    }
	  }
	  return s;
	}

	function match(pattern, binary, boundvars) {
	  var offset = 0, vars = new_scope(boundvars);
	  var binsize = binary.length * 8;

	  function skip_bits(segment) {
	    debug("skip bits"); debug(segment);
	    var size = size_of(segment, vars);
	    if (size === true) {
	      if (offset % 8 === 0) {
	        offset = binsize;
	        return true;
	      }
	      else {
	        return false;
	      }
	    }

	    var bits = segment.unit * size;
	    if (offset + bits > binsize) {
	      return false;
	    }
	    else {
	      offset += bits;
	    }
	  }

	  function get_integer(segment) {
	    debug("get_integer"); debug(segment);
	    // let's do only multiples of eight bits for now
	    var unit = segment.unit, size = size_of(segment, vars);
	    var bitsize = size * unit;
	    var byteoffset = offset / 8; // NB assumes aligned
	    offset += bitsize;
	    if (bitsize % 8 > 0 || (offset > binsize)) {
	      return false;
	    }
	    else {
	      return parse_int(binary, byteoffset, bitsize / 8,
	                       segment.bigendian, segment.signed);
	    }
	  }

	  function get_float(segment) {
	    debug("get_float"); debug(segment);
	    var unit = segment.unit; var size = size_of(segment, vars);
	    var bitsize = size * unit;
	    var byteoffset = offset / 8; // assume aligned
	    offset += bitsize;
	    if (offset > binsize) {
	      return false;
	    }
	    else {
	      return parse_float(binary, byteoffset,
	                         bitsize / 8, segment.bigendian);
	    }
	  }

	  function get_binary(segment) {
	    debug("get_binary"); debug(segment);
	    var unit = segment.unit, size = size_of(segment, vars);
	    var byteoffset = offset / 8; // NB alignment

	    if (size === true) {
	      offset = binsize;
	      return binary.slice(byteoffset);
	    }
	    else {
	      var bitsize = size * unit;
	      if (bitsize % 8 > 0 || (offset + bitsize) > binsize) {
	        return false;
	      }
	      else {
	        offset += bitsize;
	        return binary.slice(byteoffset, byteoffset + bitsize / 8);
	      }
	    }
	  }

	  function get_string(segment) {
	    debug("get_string"); debug(segment);
	    var len = segment.value.length;
	    var byteoffset = offset / 8;

	    offset += len * 8;
	    if (offset > binsize) {
	      return false;
	    }
	    // FIXME bytes vs UTF8 characters
	    return binary.slice(byteoffset, byteoffset + len).toString('utf8');
	  }

	  var patternlen = pattern.length;
	  for (var i = 0;  i < patternlen; i++) {
	    var segment = pattern[i];
	    var result = false;
	    if (segment.name === '_') {
	      result = skip_bits(segment);
	    }
	    else {
	      switch (segment.type) {
	      case 'string':
	        result = get_string(segment);
	        break;
	      case 'integer':
	        result = get_integer(segment);
	        break;
	      case 'float':
	        result = get_float(segment);
	        break;
	      case 'binary':
	        result = get_binary(segment);
	        break;
	      }

	      if (result === false) {
	        return false;
	      }
	      else if (segment.name) {
	        vars[segment.name] = result;
	      }
	      else if (segment.value != result) {
	        return false;
	      }
	    }
	  }
	  if (offset == binsize) {
	    return bindings(vars);
	  }
	  else {
	    return false;
	  }
	}

	module.exports.match = match;
	module.exports.parse_int = parse_int;
	module.exports.parse_float = parse_float;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Compile patterns to recognisers and constructors

	'use strict';

	__webpack_require__(25);
	var $ = __webpack_require__(27).format;

	var parse = __webpack_require__(33).parse;
	var interp = __webpack_require__(36),
	  parse_int = interp.parse_int,
	  parse_float = interp.parse_float;
	var construct = __webpack_require__(32),
	  write_int = construct.write_int,
	  write_float = construct.write_float;

	var lines = [];
	function $start() {
	  lines = [];
	}
	function $line(/* format , args */) {
	  lines.push($.apply(null, arguments));
	}
	function $result() {
	  return lines.join('\n');
	}

	function bits_expr(segment) {
	  if (typeof segment.size === 'string') {
	    return $('%s * %d', var_name(segment.size), segment.unit);
	  }
	  else {
	    return (segment.size * segment.unit).toString();
	  }
	}

	function get_number(segment) {
	  $line('bits = %s;\n', bits_expr(segment));
	  var parser = (segment.type === 'integer') ?
	    'parse_int' : 'parse_float';
	  var be = segment.bigendian, sg = segment.signed;
	  $line("byteoffset = offset / 8; offset += bits");
	  $line("if (offset > binsize) { return false; }");
	  $line("else { result = %s(bin, byteoffset, bits / 8, %s, %s); }",
	        parser, be, sg);
	}

	function get_binary(segment) {
	  $line("byteoffset = offset / 8;");
	  if (segment.size === true) {
	    $line("offset = binsize;");
	    $line("result = bin.slice(byteoffset);");
	  }
	  else {
	    $line("bits = %s;", bits_expr(segment));
	    $line("offset += bits;");
	    $line("if (offset > binsize) { return false; }");
	    $line("else { result = bin.slice(byteoffset,",
	          "byteoffset + bits / 8); }");
	  }
	}

	function get_string(segment) {
	  $line("byteoffset = offset / 8;");
	  var strlen = segment.value.length;
	  var strlenbits = strlen * 8;
	  $line("offset += %d;", strlenbits);
	  $line("if (offset > binsize) { return false; }");
	  $line("else { result = bin.toString(byteoffset,",
	        $("byteoffset + %d); }", strlen));
	}

	function skip_bits(segment) {
	  if (typeof segment.size === 'string') {
	    // Damn. Have to look up the size.
	    $line("var skipbits = %s * %d;",
	          var_name(segment.size), segment.unit);
	    $line("if (offset + skipbits > binsize) { return false; }");
	    $line("else { offset += skipbits; }");
	  }
	  else if (segment.size === true) {
	    $line("if (offset % 8 === 0) { offset = binsize; }");
	    $line("else { return false; }");
	  }
	  else {
	    var bits = segment.unit * segment.size;
	    $line("if (offset + %d > binsize) { return false; }", bits);
	    $line("else { offset += %d; }", bits);
	  }
	}

	function match_seg(segment) {
	  if (segment.name === '_') {
	    skip_bits(segment);
	  }
	  else {
	    var assign_result;
	    switch (segment.type) {
	    case 'integer':
	    case 'float':
	      get_number(segment);
	      break;
	    case 'binary':
	      get_binary(segment);
	      break;
	    case 'string':
	      get_string(segment);
	      break;
	    }
	    $line("if (result === false) return false;");
	    if (segment.name) {
	      // variable is given a value in the environment
	      $line("else if (%s !== undefined) {", var_name(segment.name));
	      // .. and it is not the same as that matched
	      $line("if (%s != result) return false;",
	            var_name(segment.name));
	      $line("}");
	      // variable is free
	      $line('else %s = result;', var_name(segment.name));
	    }
	    else {
	      var repr = JSON.stringify(segment.value);
	      $line("else if (result != %s) return false;", repr);
	    }
	  }
	}

	function var_name(name) {
	  return  'var_' + name;
	}

	function variables(segments) {
	  var names = {};
	  for (var i = 0; i < segments.length; i++) {
	    var name = segments[i].name;
	    if (name && name !== '_') {
	      names[name] = true;
	    }
	    name = segments[i].size;
	    if (typeof name === 'string') {
	      names[name] = true;
	    }
	  }
	  return Object.keys(names);
	}

	function compile_pattern(segments) {
	  $start();
	  $line("return function(binary, env) {");
	  $line("'use strict';");
	  $line("var bin = binary, env = env || {};");
	  $line("var offset = 0, binsize = bin.length * 8;");
	  $line("var bits, result, byteoffset;");
	  var varnames = variables(segments);
	  for (var v = 0; v < varnames.length; v++) {
	    var name = varnames[v];
	    $line("var %s = env['%s'];", var_name(name), name);
	  }

	  var len = segments.length;
	  for (var i = 0; i < len; i++) {
	    var segment = segments[i];
	    $line("// " + JSON.stringify(segment));
	    match_seg(segment);
	  }

	  $line("if (offset == binsize) {");
	  $line("return {");
	  for (var v = 0; v < varnames.length; v++) {
	    var name = varnames[v];
	    $line("%s: %s,", name, var_name(name));
	  }
	  $line('};');
	  $line('}'); // if offset == binsize
	  $line("else return false;");
	  $line("}"); // end function

	  var fn = new Function('parse_int', 'parse_float', $result());
	  return fn(parse_int, parse_float);
	}


	function write_seg(segment) {
	  switch (segment.type) {
	  case 'string':
	    $line("offset += buf.write(%s, offset, 'utf8');",
	          JSON.stringify(segment.value));
	    break;
	  case 'binary':
	    $line("val = bindings['%s'];", segment.name);
	    if (segment.size === true) {
	      $line('size = val.length;');
	    }
	    else if (typeof segment.size === 'string') {
	      $line("size = (bindings['%s'] * %d) / 8;",
	            segment.size, segment.unit);
	    }
	    else {
	      $line("size = %d;", (segment.size * segment.unit) / 8);
	    }
	    $line('val.copy(buf, offset, 0, size);');
	    $line('offset += size;');
	    break;
	  case 'integer':
	  case 'float':
	    write_number(segment);
	    break;
	  }
	}

	function write_number(segment) {
	  if (segment.name) {
	    $line("val = bindings['%s'];", segment.name);
	  }
	  else {
	    $line("val = %d", segment.value);
	  }
	  var writer = (segment.type === 'integer') ?
	    'write_int' : 'write_float';
	  if (typeof segment.size === 'string') {
	    $line("size = (bindings['%s'] * %d) / 8;",
	          segment.size, segment.unit);
	  }
	  else {
	    $line('size = %d;', (segment.size * segment.unit) / 8);
	  }
	  $line('%s(buf, val, offset, size, %s);',
	        writer, segment.bigendian);
	  $line('offset += size;');
	}

	function size_of(segments) {
	  var variable = [];
	  var fixed = 0;

	  for (var i = 0; i < segments.length; i++) {
	    var segment = segments[i];
	    if (typeof segment.size === 'string' ||
	        segment.size === true) {
	      variable.push(segment);
	    }
	    else if (segment.type === 'string') {
	      fixed += Buffer.byteLength(segment.value);
	    }
	    else {
	      fixed += (segment.size * segment.unit) / 8;
	    }
	  }

	  $line('var buffersize = %d;', fixed);

	  if (variable.length > 0) {
	    for (var j = 0; j < variable.length; j++) {
	      var segment = variable[j];
	      if (segment.size === true) {
	        $line("buffersize += bindings['%s'].length;", segment.name);
	      }
	      else {
	        $line("buffersize += (bindings['%s'] * %d) / 8;",
	              segment.size, segment.unit);
	      }
	    }
	  }
	}

	function emit_write(segments) {
	  $line('var val, size;');

	  var len = segments.length;
	  for (var i = 0; i < len; i++) {
	    var segment = segments[i];
	    $line('// %s', JSON.stringify(segment));
	    write_seg(segment);
	  }
	}

	function compile_ctor(segments) {
	  $start();
	  $line('return function(bindings) {');
	  $line("'use strict';");
	  size_of(segments);
	  $line('var buf = new Buffer(buffersize);');
	  $line('var offset = 0;');
	  emit_write(segments);
	  $line('return buf;');
	  $line('}'); // end function

	  return new Function('write_int', 'write_float',
	                      $result())(write_int, write_float);
	}

	module.exports.compile_pattern = compile_pattern;
	module.exports.compile = function() {
	  var str = [].join.call(arguments, ',');
	  var p = parse(str);
	  return compile_pattern(p);
	};
	module.exports.compile_builder = function() {
	  var str = [].join.call(arguments, ',');
	  var p = parse(str);
	  return compile_ctor(p);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, process) {//
	//
	//

	'use strict';

	// A Mux is an object into which other readable streams may be piped;
	// it then writes 'packets' from the upstreams to the given
	// downstream.

	var inherits = __webpack_require__(27).inherits;
	var assert = __webpack_require__(26);

	var schedule = (typeof setImmediate === 'function') ?
	  setImmediate : process.nextTick;

	function Mux(downstream) {
	  this.newStreams = [];
	  this.oldStreams = [];
	  this.blocked = false;
	  this.scheduledRead = false;

	  this.out = downstream;
	  var self = this;
	  downstream.on('drain', function() {
	    self.blocked = false;
	    self._readIncoming();
	  });
	}

	// There are 2 states we can be in:

	// - waiting for outbound capacity, which will be signalled by a
	// - 'drain' event on the downstream; or,

	// - no packets to send, waiting for an inbound buffer to have
	//   packets, which will be signalled by a 'readable' event

	// If we write all packets available whenever there is outbound
	// capacity, we will either run out of outbound capacity (`#write`
	// returns false), or run out of packets (all calls to an
	// `inbound.read()` have returned null).

	Mux.prototype._readIncoming = function() {

	  // We may be sent here speculatively, if an incoming stream has
	  // become readable
	  if (this.blocked) return;

	  var self = this;
	  var accepting = true;
	  var out = this.out;

	  // Try to read a chunk from each stream in turn, until all streams
	  // are empty, or we exhaust our ability to accept chunks.
	  function roundrobin(streams) {
	    var s;
	    // if there's just one incoming stream we don't have to
	    // go through all the dequeue/enqueueing
	    if (streams.length === 1) {
	      s = streams.shift();
	      while (accepting) {
	        var chunk = s.read();
	        if (chunk !== null) {
	          accepting = out.write(chunk);
	        }
	        else break;
	      }
	      if (!accepting) streams.push(s);
	    }
	    else {
	      while (accepting && (s = streams.shift())) {
	        var chunk = s.read();
	        if (chunk !== null) {
	          accepting = out.write(chunk);
	          streams.push(s);
	        }
	      }
	    }
	  }

	  roundrobin(this.newStreams);

	  // Either we exhausted the new queues, or we ran out of capacity. If
	  // we ran out of capacity, all the remaining new streams (i.e.,
	  // those with packets left) become old streams. This effectively
	  // prioritises streams that keep their buffers close to empty over
	  // those that are constantly near full.

	  if (accepting) { // all new queues are exhausted, write as many as
	                   // we can from the old streams
	    assert.equal(0, this.newStreams.length);
	    roundrobin(this.oldStreams);
	  }
	  else { // ran out of room
	    assert(this.newStreams.length > 0, "Expect some new streams to remain");
	    this.oldStreams = this.oldStreams.concat(this.newStreams);
	    this.newStreams = [];
	  }
	  // We may have exhausted all the old queues, or run out of room;
	  // either way, all we need to do is record whether we have capacity
	  // or not, so any speculative reads will know
	  this.blocked = !accepting;
	};

	Mux.prototype._scheduleRead = function() {
	  var self = this;
	  
	  if (!self.scheduledRead) {
	    schedule(function() {
	      self.scheduledRead = false;
	      self._readIncoming();
	    });
	    self.scheduledRead = true;
	  }
	};

	Mux.prototype.pipeFrom = function(readable) {
	  var self = this;

	  function enqueue() {
	    self.newStreams.push(readable);
	    self._scheduleRead();
	  }

	  function cleanup() {
	    readable.removeListener('readable', enqueue);
	    readable.removeListener('error', cleanup);
	    readable.removeListener('end', cleanup);
	    readable.removeListener('unpipeFrom', cleanupIfMe);
	  }
	  function cleanupIfMe(dest) {
	    if (dest === self) cleanup();
	  }

	  readable.on('unpipeFrom', cleanupIfMe);
	  readable.on('end', cleanup);
	  readable.on('error', cleanup);
	  readable.on('readable', enqueue);
	};

	Mux.prototype.unpipeFrom = function(readable) {
	  readable.emit('unpipeFrom', this);
	};

	module.exports.Mux = Mux;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10).setImmediate, __webpack_require__(6)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(40).EventEmitter;
	var inherits = __webpack_require__(41);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(42);
	Stream.Writable = __webpack_require__(53);
	Stream.Duplex = __webpack_require__(54);
	Stream.Transform = __webpack_require__(55);
	Stream.PassThrough = __webpack_require__(56);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(46);
	exports.Stream = __webpack_require__(39);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(50);
	exports.Duplex = __webpack_require__(43);
	exports.Transform = __webpack_require__(51);
	exports.PassThrough = __webpack_require__(52);


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(44);
	util.inherits = __webpack_require__(45);
	/*</replacement>*/

	var Readable = __webpack_require__(46);
	var Writable = __webpack_require__(50);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(47);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(2).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(40).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(39);

	/*<replacement>*/
	var util = __webpack_require__(44);
	util.inherits = __webpack_require__(45);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(48);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(43);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(49).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(43);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(49).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(2).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(2).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(44);
	util.inherits = __webpack_require__(45);
	/*</replacement>*/

	var Stream = __webpack_require__(39);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(43);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(43);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(43);

	/*<replacement>*/
	var util = __webpack_require__(44);
	util.inherits = __webpack_require__(45);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(51);

	/*<replacement>*/
	var util = __webpack_require__(44);
	util.inherits = __webpack_require__(45);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(50)


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(43)


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(51)


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(52)


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(58)


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(59);
	util.inherits = __webpack_require__(60);
	/*</replacement>*/

	var Readable = __webpack_require__(61);
	var Writable = __webpack_require__(65);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(62);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(2).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(40).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(39);

	/*<replacement>*/
	var util = __webpack_require__(59);
	util.inherits = __webpack_require__(60);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(63);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(58);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(64).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(58);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(64).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(2).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(2).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(59);
	util.inherits = __webpack_require__(60);
	/*</replacement>*/

	var Stream = __webpack_require__(39);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(58);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(58);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	//
	//
	//

	// Heartbeats. In AMQP both clients and servers may expect a heartbeat
	// frame if there is no activity on the connection for a negotiated
	// period of time. If there's no activity for two such intervals, the
	// server or client is allowed to close the connection on the
	// presumption that the other party is dead.
	//
	// The client has two jobs here: the first is to send a heartbeat
	// frame if it's not sent any frames for a while, so that the server
	// doesn't think it's dead; the second is to check periodically that
	// it's seen activity from the server, and to advise if there doesn't
	// appear to have been any for over two intervals.
	//
	// Node.JS timers are a bit unreliable, in that they endeavour only to
	// fire at some indeterminate point *after* the given time (rather
	// gives the lie to 'realtime', dunnit). Because the scheduler is just
	// an event loop, it's quite easy to delay timers indefinitely by
	// reacting to some I/O with a lot of computation.
	//
	// To mitigate this I need a bit of creative interpretation:
	//
	//  - I'll schedule a server activity check for every `interval`, and
	//    check just how much time has passed. It will overshoot by at
	//    least a small margin; modulo missing timer deadlines, it'll
	//    notice between two and three intervals after activity actually
	//    stops (otherwise, at some point after two intervals).
	//
	//  - Every `interval / 2` I'll check that we've sent something since
	//    the last check, and if not, send a heartbeat frame. If we're
	//    really too busy to even run the check for two whole heartbeat
	//    intervals, there must be a lot of I (but not O, at least not on
	//    the connection), or computation, in which case perhaps it's best
	//    the server cuts us off anyway. Why `interval / 2`? Because the
	//    edge case is that the client sent a frame just after a
	//    heartbeat, which would mean I only send one after almost two
	//    intervals. (NB a heartbeat counts as a send, so it'll be checked
	//    at least twice before sending another)
	//
	// This design is based largely on RabbitMQ's heartbeating:
	// https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_heartbeat.erl

	// %% Yes, I could apply the same 'actually passage of time' thing to
	// %% send as well as to recv.

	'use strict';

	var inherits = __webpack_require__(27).inherits;
	var EventEmitter = __webpack_require__(40).EventEmitter;

	// Exported so that we can mess with it in tests
	module.exports.UNITS_TO_MS = 1000;

	function Heart(interval, checkSend, checkRecv) {
	  EventEmitter.call(this);
	  this.interval = interval;

	  var intervalMs = interval * module.exports.UNITS_TO_MS;
	  // Function#bind is my new best friend
	  var beat = this.emit.bind(this, 'beat');
	  var timeout = this.emit.bind(this, 'timeout');

	  this.sendTimer = setInterval(
	    this.runHeartbeat.bind(this, checkSend, beat), intervalMs / 2);

	  // A timeout occurs if I see nothing for *two consecutive* intervals
	  var recvMissed = 0;
	  function missedTwo() {
	    if (!checkRecv()) return (++recvMissed < 2);
	    else { recvMissed = 0; return true; }
	  }
	  this.recvTimer = setInterval(
	    this.runHeartbeat.bind(this, missedTwo, timeout), intervalMs);
	}
	inherits(Heart, EventEmitter);

	module.exports.Heart = Heart;

	Heart.prototype.clear = function() {
	  clearInterval(this.sendTimer);
	  clearInterval(this.recvTimer);
	};

	Heart.prototype.runHeartbeat = function(check, fail) {
	  // Have we seen activity?
	  if (!check()) fail();
	};


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	//
	//
	//

	// Stringifying various things

	'use strict';

	var defs = __webpack_require__(23);
	var format = __webpack_require__(27).format;
	var inherits = __webpack_require__(27).inherits;
	var HEARTBEAT = __webpack_require__(30).HEARTBEAT;

	module.exports.closeMessage = function(close) {
	  var code = close.fields.replyCode;
	  return format('%d (%s) with message "%s"',
	                code, defs.constant_strs[code],
	                close.fields.replyText);
	}

	module.exports.methodName = function(id) {
	  return defs.info(id).name;
	};

	module.exports.inspect = function(frame, showFields) {
	  if (frame === HEARTBEAT) {
	    return '<Heartbeat>';
	  }
	  else if (!frame.id) {
	    return format('<Content channel:%d size:%d>',
	                  frame.channel, frame.size);
	  }
	  else {
	    var info = defs.info(frame.id);
	    return format('<%s channel:%d%s>', info.name, frame.channel,
	                  (showFields)
	                  ? ' ' + JSON.stringify(frame.fields, undefined, 2)
	                  : '');
	  }
	}


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	//
	//
	//

	// A bitset implementation, after that in java.util.  Yes there
	// already exist such things, but none implement next{Clear|Set}Bit or
	// equivalent, and none involved me tooling about for an evening.

	'use strict';

	function BitSet(size) {
	  if (size) {
	    var numWords = Math.ceil(size / 32);
	    this.words = new Array(numWords);
	  }
	  else {
	    this.words = [];
	  }
	  this.wordsInUse = 0; // = number, not index
	}

	var P = BitSet.prototype;

	function wordIndex(bitIndex) {
	  return Math.floor(bitIndex / 32);
	}

	// Make sure we have at least numWords
	P.ensureSize = function(numWords) {
	  var wordsPresent = this.words.length;
	  if (wordsPresent < numWords) {
	    this.words = this.words.concat(new Array(numWords - wordsPresent));
	  }
	}

	P.set = function(bitIndex) {
	  var w = wordIndex(bitIndex);
	  if (w >= this.wordsInUse) {
	    this.ensureSize(w + 1);
	    this.wordsInUse = w + 1;
	  }
	  var bit = 1 << bitIndex;
	  this.words[w] |= bit;
	};

	P.clear = function(bitIndex) {
	  var w = wordIndex(bitIndex);
	  if (w >= this.wordsInUse) return;
	  var mask = ~(1 << bitIndex);
	  this.words[w] &= mask;
	};

	P.get = function(bitIndex) {
	  var w = wordIndex(bitIndex);
	  if (w >= this.wordsInUse) return false; // >= since index vs size
	  var bit = 1 << bitIndex;
	  return !!(this.words[w] & bit);
	}

	function trailingZeros(i) {
	  // From Hacker's Delight, via JDK. Probably far less effective here,
	  // since bit ops are not necessarily the quick way to do things in
	  // JS.
	  if (i === 0) return 32;
	  var y, n = 31;
	  y = i << 16; if (y != 0) { n = n -16; i = y; }
	  y = i << 8;  if (y != 0) { n = n - 8; i = y; }
	  y = i << 4;  if (y != 0) { n = n - 4; i = y; }
	  y = i << 2;  if (y != 0) { n = n - 2; i = y; }
	  return n - ((i << 1) >>> 31);
	}

	// Give the next bit that's set on or after fromIndex, or -1 if no such
	// bit
	P.nextSetBit = function(fromIndex) {
	  var w = wordIndex(fromIndex);
	  if (w >= this.wordsInUse) return -1;

	  // the right-hand side is shifted to only test the bits of the first
	  // word that are > fromIndex
	  var word = this.words[w] & (0xffffffff << fromIndex);
	  while (true) {
	    if (word) return (w * 32) + trailingZeros(word);
	    w++;
	    if (w === this.wordsInUse) return -1;
	    word = this.words[w];
	  }
	};

	P.nextClearBit = function(fromIndex) {
	  var w = wordIndex(fromIndex);
	  if (w >= this.wordsInUse) return fromIndex;

	  var word = ~(this.words[w]) & (0xffffffff << fromIndex);
	  while (true) {
	    if (word) return (w * 32) + trailingZeros(word);
	    w++;
	    if (w == this.wordsInUse) return w * 32;
	    word = ~(this.words[w]);
	  }
	};

	module.exports.BitSet = BitSet;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(70)


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(71);

	/*<replacement>*/
	var util = __webpack_require__(59);
	util.inherits = __webpack_require__(60);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(58);

	/*<replacement>*/
	var util = __webpack_require__(59);
	util.inherits = __webpack_require__(60);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(27).inherits;

	function trimStack(stack, num) {
	  return stack && stack.split('\n').slice(num).join('\n');
	}

	function IllegalOperationError(msg, stack) {
	  var tmp = new Error();
	  this.message = msg;
	  this.stack = this.toString() + '\n' + trimStack(tmp.stack, 2);
	  this.stackAtStateChange = stack;
	}
	inherits(IllegalOperationError, Error);

	IllegalOperationError.prototype.name = 'IllegalOperationError';

	function stackCapture(reason) {
	  var e = new Error();
	  return 'Stack capture: ' + reason + '\n' +
	    trimStack(e.stack, 2);
	}

	module.exports.IllegalOperationError = IllegalOperationError;
	module.exports.stackCapture = stackCapture;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
		"name": "amqplib",
		"homepage": "http://squaremo.github.io/amqp.node/",
		"main": "./channel_api.js",
		"version": "0.3.2",
		"description": "An AMQP 0-9-1 (e.g., RabbitMQ) library and client.",
		"repository": {
			"type": "git",
			"url": "https://github.com/squaremo/amqp.node.git"
		},
		"engines": {
			"node": ">=0.8 <0.13 || ^1"
		},
		"dependencies": {
			"bitsyntax": "~0.0.4",
			"buffer-more-ints": "0.0.2",
			"readable-stream": "1.x >=1.1.9",
			"when": "~3.6.2"
		},
		"devDependencies": {
			"mocha": "~1",
			"claire": "0.4.1",
			"uglify-js": "2.4.x",
			"istanbul": "0.1.x"
		},
		"scripts": {
			"test": "make test",
			"prepublish": "make"
		},
		"keywords": [
			"AMQP",
			"AMQP 0-9-1",
			"RabbitMQ"
		],
		"author": {
			"name": "Michael Bridgen",
			"email": "mikeb@squaremobius.net"
		},
		"license": "MIT",
		"gitHead": "93fde0fe29e3fca2b91743b1a63a81ce291effc9",
		"bugs": {
			"url": "https://github.com/squaremo/amqp.node/issues"
		},
		"_id": "amqplib@0.3.2",
		"_shasum": "e77d8fb3842ebcae78cf1c930c490d1e954f4297",
		"_from": "amqplib@*",
		"_npmVersion": "1.4.13",
		"_npmUser": {
			"name": "squaremo",
			"email": "mikeb@squaremobius.net"
		},
		"maintainers": [
			{
				"name": "squaremo",
				"email": "mikeb@squaremobius.net"
			}
		],
		"dist": {
			"shasum": "e77d8fb3842ebcae78cf1c930c490d1e954f4297",
			"tarball": "http://registry.npmjs.org/amqplib/-/amqplib-0.3.2.tgz"
		},
		"directories": {},
		"_resolved": "https://registry.npmjs.org/amqplib/-/amqplib-0.3.2.tgz"
	}

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	//
	//
	//

	'use strict';

	var defs = __webpack_require__(23);
	var when = __webpack_require__(76), defer = when.defer;
	var inherits = __webpack_require__(27).inherits;
	var EventEmitter = __webpack_require__(40).EventEmitter;
	var BaseChannel = __webpack_require__(96).BaseChannel;
	var acceptMessage = __webpack_require__(96).acceptMessage;
	var Args = __webpack_require__(97);

	function ChannelModel(connection) {
	  if (!(this instanceof ChannelModel))
	    return new ChannelModel(connection);
	  this.connection = connection;
	  var self = this;
	  ['error', 'close', 'blocked', 'unblocked'].forEach(function(ev) {
	    connection.on(ev, self.emit.bind(self, ev));
	  });
	}
	inherits(ChannelModel, EventEmitter);

	module.exports.ChannelModel = ChannelModel;

	var CM = ChannelModel.prototype;

	CM.close = function() {
	  var closed = defer();
	  this.connection.close(closed.resolve);
	  return closed.promise;
	};

	// Channels

	function Channel(connection) {
	  BaseChannel.call(this, connection);
	  this.on('delivery', this.handleDelivery.bind(this));
	  this.on('cancel', this.handleCancel.bind(this));
	}
	inherits(Channel, BaseChannel);

	module.exports.Channel = Channel;

	CM.createChannel = function() {
	  var c = new Channel(this.connection);
	  return c.open().then(function(openOk) { return c; });
	};

	var C = Channel.prototype;

	// An RPC that returns a 'proper' promise, which resolves to just the
	// response's fields; this is intended to be suitable for implementing
	// API procedures.
	C.rpc = function(method, fields, expect) {
	  var reply = defer();
	  this._rpc(method, fields, expect, function(err, f) {
	    if (err !== null) reply.reject(err);
	    else reply.resolve(f.fields);
	  });
	  return reply.promise;
	};

	// Do the remarkably simple channel open handshake
	C.open = function() {
	  return when.try(this.allocate.bind(this)).then(
	    function(ch) {
	      return ch.rpc(defs.ChannelOpen, {outOfBand: ""},
	                    defs.ChannelOpenOk);
	    });
	};

	C.close = function() {
	  var closed = defer();
	  this.closeBecause("Goodbye", defs.constants.REPLY_SUCCESS,
	                    closed.resolve)
	  return closed.promise;
	};

	// === Public API, declaring queues and stuff ===

	C.assertQueue = function(queue, options) {
	  return this.rpc(defs.QueueDeclare,
	                  Args.assertQueue(queue, options),
	                  defs.QueueDeclareOk);
	};

	C.checkQueue = function(queue) {
	  return this.rpc(defs.QueueDeclare,
	                  Args.checkQueue(queue),
	                  defs.QueueDeclareOk);
	};

	C.deleteQueue = function(queue, options) {
	  return this.rpc(defs.QueueDelete,
	                  Args.deleteQueue(queue, options),
	                  defs.QueueDeleteOk);
	};

	C.purgeQueue = function(queue) {
	  return this.rpc(defs.QueuePurge,
	                  Args.purgeQueue(queue),
	                  defs.QueuePurgeOk);
	};

	C.bindQueue = function(queue, source, pattern, argt) {
	  return this.rpc(defs.QueueBind,
	                  Args.bindQueue(queue, source, pattern, argt),
	                  defs.QueueBindOk);
	};

	C.unbindQueue = function(queue, source, pattern, argt) {
	  return this.rpc(defs.QueueUnbind,
	                  Args.unbindQueue(queue, source, pattern, argt),
	                  defs.QueueUnbindOk);
	};

	C.assertExchange = function(exchange, type, options) {
	  // The server reply is an empty set of fields, but it's convenient
	  // to have the exchange name handed to the continuation.
	  return this.rpc(defs.ExchangeDeclare,
	                  Args.assertExchange(exchange, type, options),
	                  defs.ExchangeDeclareOk)
	    .then(function(_ok) { return { exchange: exchange }; });
	};

	C.checkExchange = function(exchange) {
	  return this.rpc(defs.ExchangeDeclare,
	                  Args.checkExchange(exchange),
	                  defs.ExchangeDeclareOk);
	};

	C.deleteExchange = function(name, options) {
	  return this.rpc(defs.ExchangeDelete,
	                  Args.deleteExchange(name, options),
	                  defs.ExchangeDeleteOk);
	};

	C.bindExchange = function(dest, source, pattern, argt) {
	  return this.rpc(defs.ExchangeBind,
	                  Args.bindExchange(dest, source, pattern, argt),
	                  defs.ExchangeBindOk);
	};

	C.unbindExchange = function(dest, source, pattern, argt) {
	  return this.rpc(defs.ExchangeUnbind,
	                  Args.unbindExchange(dest, source, pattern, argt),
	                  defs.ExchangeUnbindOk);  
	};

	// Working with messages

	C.publish = function(exchange, routingKey, content, options) {
	  var fieldsAndProps = Args.publish(exchange, routingKey, options);
	  return this.sendMessage(fieldsAndProps, fieldsAndProps, content);
	};

	C.sendToQueue = function(queue, content, options) {
	  return this.publish('', queue, content, options);
	};

	C.consume = function(queue, callback, options) {
	  var self = this;
	  // NB we want the callback to be run synchronously, so that we've
	  // registered the consumerTag before any messages can arrive.
	  var fields = Args.consume(queue, options);
	  var reply = defer();
	  this._rpc(defs.BasicConsume, fields, defs.BasicConsumeOk,
	            function(err, ok) {
	              if (err === null) {
	                self.registerConsumer(ok.fields.consumerTag,
	                                      callback);
	                reply.resolve(ok.fields);
	              }
	              else reply.reject(err);
	            });
	  return reply.promise;
	};

	C.cancel = function(consumerTag) {
	  var self = this;
	  var reply = defer();
	  this._rpc(defs.BasicCancel, Args.cancel(consumerTag),
	            defs.BasicCancelOk,
	            function(err, ok) {
	              if (err === null) {
	                self.unregisterConsumer(consumerTag);
	                reply.resolve(ok.fields);
	              }
	              else reply.reject(err);
	            });
	  return reply.promise;
	};

	C.get = function(queue, options) {
	  var reply = defer();
	  var self = this;
	  var fields = Args.get(queue, options);
	  this.sendOrEnqueue(defs.BasicGet, fields, function(err, f) {
	    if (err === null) {
	      if (f.id === defs.BasicGetEmpty) {
	        reply.resolve(false);
	      }
	      else if (f.id === defs.BasicGetOk) {
	        var fields = f.fields;
	        self.handleMessage = acceptMessage(function(m) {
	          m.fields = fields;
	          reply.resolve(m);
	        });
	      }
	      else {
	        reply.reject(new Error("Unexpected response to BasicGet: " +
	                               inspect(f)));
	      }
	    }
	    else reply.reject(err);
	  });
	  return reply.promise;
	};

	C.ack = function(message, allUpTo) {
	  this.sendImmediately(
	    defs.BasicAck,
	    Args.ack(message.fields.deliveryTag, allUpTo));
	};

	C.ackAll = function() {
	  this.sendImmediately(defs.BasicAck, Args.ack(0, true));
	};

	C.nack = function(message, allUpTo, requeue) {
	  this.sendImmediately(
	    defs.BasicNack,
	    Args.nack(message.fields.deliveryTag, allUpTo, requeue));
	};

	C.nackAll = function(requeue) {
	  this.sendImmediately(defs.BasicNack,
	                       Args.nack(0, true, requeue));
	};

	// `Basic.Nack` is not available in older RabbitMQ versions (or in the
	// AMQP specification), so you have to use the one-at-a-time
	// `Basic.Reject`. This is otherwise synonymous with
	// `#nack(message, false, requeue)`.
	C.reject = function(message, requeue) {
	  this.sendImmediately(
	    defs.BasicReject,
	    Args.reject(message.fields.deliveryTag, requeue));
	};

	// There are more options in AMQP than exposed here; RabbitMQ only
	// implements prefetch based on message count, and only for individual
	// channels or consumers. RabbitMQ v3.3.0 and after treat prefetch
	// (without `global` set) as per-consumer (for consumers following),
	// and prefetch with `global` set as per-channel.
	C.prefetch = C.qos = function(count, global) {
	  return this.rpc(defs.BasicQos,
	                  Args.prefetch(count, global),
	                  defs.BasicQosOk);
	};

	C.recover = function() {
	  return this.rpc(defs.BasicRecover,
	                  Args.recover(),
	                  defs.BasicRecoverOk);
	};

	// Confirm channel. This is a channel with confirms 'switched on',
	// meaning sent messages will provoke a responding 'ack' or 'nack'
	// from the server. The upshot of this is that `publish` and
	// `sendToQueue` both take a callback, which will be called either
	// with `null` as its argument to signify 'ack', or an exception as
	// its argument to signify 'nack'.

	function ConfirmChannel(connection) {
	  Channel.call(this, connection);
	}
	inherits(ConfirmChannel, Channel);

	module.exports.ConfirmChannel = ConfirmChannel;

	CM.createConfirmChannel = function() {
	  var c = new ConfirmChannel(this.connection);
	  return c.open()
	    .then(function(openOk) {
	      return c.rpc(defs.ConfirmSelect, {nowait: false},
	                   defs.ConfirmSelectOk)
	    })
	    .then(function() { return c; });
	};

	var CC = ConfirmChannel.prototype;

	CC.publish = function(exchange, routingKey, content, options, cb) {
	  this.pushConfirmCallback(cb);
	  return C.publish.call(this, exchange, routingKey, content, options);
	};

	CC.sendToQueue = function(queue, content, options, cb) {
	  return this.publish('', queue, content, options, cb);
	};

	CC.waitForConfirms = function() {
	  var await = [];
	  var unconfirmed = this.unconfirmed;
	  unconfirmed.forEach(function(val, index) {
	    if (val === null); // already confirmed
	    else {
	      var confirmed = defer();
	      unconfirmed[index] = function(err) {
	        if (val) val(err);
	        if (err === null) confirmed.resolve();
	        else confirmed.reject(err);
	      };
	      await.push(confirmed.promise);
	    }
	  });
	  return when.all(await);
	};


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */

	/**
	 * Promises/A+ and when() implementation
	 * when is part of the cujoJS family of libraries (http://cujojs.com/)
	 * @author Brian Cavalier
	 * @author John Hann
	 * @version 3.6.4
	 */
	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

		var timed = __webpack_require__(86);
		var array = __webpack_require__(79);
		var flow = __webpack_require__(82);
		var fold = __webpack_require__(83);
		var inspect = __webpack_require__(84);
		var generate = __webpack_require__(85);
		var progress = __webpack_require__(77);
		var withThis = __webpack_require__(90);
		var unhandledRejection = __webpack_require__(91);
		var TimeoutError = __webpack_require__(89);

		var Promise = [array, flow, fold, generate, progress,
			inspect, withThis, timed, unhandledRejection]
			.reduce(function(Promise, feature) {
				return feature(Promise);
			}, __webpack_require__(93));

		var apply = __webpack_require__(81)(Promise);

		// Public API

		when.promise     = promise;              // Create a pending promise
		when.resolve     = Promise.resolve;      // Create a resolved promise
		when.reject      = Promise.reject;       // Create a rejected promise

		when.lift        = lift;                 // lift a function to return promises
		when['try']      = attempt;              // call a function and return a promise
		when.attempt     = attempt;              // alias for when.try

		when.iterate     = Promise.iterate;      // DEPRECATED (use cujojs/most streams) Generate a stream of promises
		when.unfold      = Promise.unfold;       // DEPRECATED (use cujojs/most streams) Generate a stream of promises

		when.join        = join;                 // Join 2 or more promises

		when.all         = all;                  // Resolve a list of promises
		when.settle      = settle;               // Settle a list of promises

		when.any         = lift(Promise.any);    // One-winner race
		when.some        = lift(Promise.some);   // Multi-winner race
		when.race        = lift(Promise.race);   // First-to-settle race

		when.map         = map;                  // Array.map() for promises
		when.filter      = filter;               // Array.filter() for promises
		when.reduce      = lift(Promise.reduce);       // Array.reduce() for promises
		when.reduceRight = lift(Promise.reduceRight);  // Array.reduceRight() for promises

		when.isPromiseLike = isPromiseLike;      // Is something promise-like, aka thenable

		when.Promise     = Promise;              // Promise constructor
		when.defer       = defer;                // Create a {promise, resolve, reject} tuple

		// Error types

		when.TimeoutError = TimeoutError;

		/**
		 * Get a trusted promise for x, or by transforming x with onFulfilled
		 *
		 * @param {*} x
		 * @param {function?} onFulfilled callback to be called when x is
		 *   successfully fulfilled.  If promiseOrValue is an immediate value, callback
		 *   will be invoked immediately.
		 * @param {function?} onRejected callback to be called when x is
		 *   rejected.
		 * @param {function?} onProgress callback to be called when progress updates
		 *   are issued for x. @deprecated
		 * @returns {Promise} a new promise that will fulfill with the return
		 *   value of callback or errback or the completion value of promiseOrValue if
		 *   callback and/or errback is not supplied.
		 */
		function when(x, onFulfilled, onRejected, onProgress) {
			var p = Promise.resolve(x);
			if (arguments.length < 2) {
				return p;
			}

			return p.then(onFulfilled, onRejected, onProgress);
		}

		/**
		 * Creates a new promise whose fate is determined by resolver.
		 * @param {function} resolver function(resolve, reject, notify)
		 * @returns {Promise} promise whose fate is determine by resolver
		 */
		function promise(resolver) {
			return new Promise(resolver);
		}

		/**
		 * Lift the supplied function, creating a version of f that returns
		 * promises, and accepts promises as arguments.
		 * @param {function} f
		 * @returns {Function} version of f that returns promises
		 */
		function lift(f) {
			return function() {
				for(var i=0, l=arguments.length, a=new Array(l); i<l; ++i) {
					a[i] = arguments[i];
				}
				return apply(f, this, a);
			};
		}

		/**
		 * Call f in a future turn, with the supplied args, and return a promise
		 * for the result.
		 * @param {function} f
		 * @returns {Promise}
		 */
		function attempt(f /*, args... */) {
			/*jshint validthis:true */
			for(var i=0, l=arguments.length-1, a=new Array(l); i<l; ++i) {
				a[i] = arguments[i+1];
			}
			return apply(f, this, a);
		}

		/**
		 * Creates a {promise, resolver} pair, either or both of which
		 * may be given out safely to consumers.
		 * @return {{promise: Promise, resolve: function, reject: function, notify: function}}
		 */
		function defer() {
			return new Deferred();
		}

		function Deferred() {
			var p = Promise._defer();

			function resolve(x) { p._handler.resolve(x); }
			function reject(x) { p._handler.reject(x); }
			function notify(x) { p._handler.notify(x); }

			this.promise = p;
			this.resolve = resolve;
			this.reject = reject;
			this.notify = notify;
			this.resolver = { resolve: resolve, reject: reject, notify: notify };
		}

		/**
		 * Determines if x is promise-like, i.e. a thenable object
		 * NOTE: Will return true for *any thenable object*, and isn't truly
		 * safe, since it may attempt to access the `then` property of x (i.e.
		 *  clever/malicious getters may do weird things)
		 * @param {*} x anything
		 * @returns {boolean} true if x is promise-like
		 */
		function isPromiseLike(x) {
			return x && typeof x.then === 'function';
		}

		/**
		 * Return a promise that will resolve only once all the supplied arguments
		 * have resolved. The resolution value of the returned promise will be an array
		 * containing the resolution values of each of the arguments.
		 * @param {...*} arguments may be a mix of promises and values
		 * @returns {Promise}
		 */
		function join(/* ...promises */) {
			return Promise.all(arguments);
		}

		/**
		 * Return a promise that will fulfill once all input promises have
		 * fulfilled, or reject when any one input promise rejects.
		 * @param {array|Promise} promises array (or promise for an array) of promises
		 * @returns {Promise}
		 */
		function all(promises) {
			return when(promises, Promise.all);
		}

		/**
		 * Return a promise that will always fulfill with an array containing
		 * the outcome states of all input promises.  The returned promise
		 * will only reject if `promises` itself is a rejected promise.
		 * @param {array|Promise} promises array (or promise for an array) of promises
		 * @returns {Promise} promise for array of settled state descriptors
		 */
		function settle(promises) {
			return when(promises, Promise.settle);
		}

		/**
		 * Promise-aware array map function, similar to `Array.prototype.map()`,
		 * but input array may contain promises or values.
		 * @param {Array|Promise} promises array of anything, may contain promises and values
		 * @param {function(x:*, index:Number):*} mapFunc map function which may
		 *  return a promise or value
		 * @returns {Promise} promise that will fulfill with an array of mapped values
		 *  or reject if any input promise rejects.
		 */
		function map(promises, mapFunc) {
			return when(promises, function(promises) {
				return Promise.map(promises, mapFunc);
			});
		}

		/**
		 * Filter the provided array of promises using the provided predicate.  Input may
		 * contain promises and values
		 * @param {Array|Promise} promises array of promises and values
		 * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
		 *  Must return truthy (or promise for truthy) for items to retain.
		 * @returns {Promise} promise that will fulfill with an array containing all items
		 *  for which predicate returned truthy.
		 */
		function filter(promises, predicate) {
			return when(promises, function(promises) {
				return Promise.filter(promises, predicate);
			});
		}

		return when;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(78));


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function progress(Promise) {

			/**
			 * @deprecated
			 * Register a progress handler for this promise
			 * @param {function} onProgress
			 * @returns {Promise}
			 */
			Promise.prototype.progress = function(onProgress) {
				return this.then(void 0, void 0, onProgress);
			};

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

		var state = __webpack_require__(80);
		var applier = __webpack_require__(81);

		return function array(Promise) {

			var applyFold = applier(Promise);
			var toPromise = Promise.resolve;
			var all = Promise.all;

			var ar = Array.prototype.reduce;
			var arr = Array.prototype.reduceRight;
			var slice = Array.prototype.slice;

			// Additional array combinators

			Promise.any = any;
			Promise.some = some;
			Promise.settle = settle;

			Promise.map = map;
			Promise.filter = filter;
			Promise.reduce = reduce;
			Promise.reduceRight = reduceRight;

			/**
			 * When this promise fulfills with an array, do
			 * onFulfilled.apply(void 0, array)
			 * @param {function} onFulfilled function to apply
			 * @returns {Promise} promise for the result of applying onFulfilled
			 */
			Promise.prototype.spread = function(onFulfilled) {
				return this.then(all).then(function(array) {
					return onFulfilled.apply(this, array);
				});
			};

			return Promise;

			/**
			 * One-winner competitive race.
			 * Return a promise that will fulfill when one of the promises
			 * in the input array fulfills, or will reject when all promises
			 * have rejected.
			 * @param {array} promises
			 * @returns {Promise} promise for the first fulfilled value
			 */
			function any(promises) {
				var p = Promise._defer();
				var resolver = p._handler;
				var l = promises.length>>>0;

				var pending = l;
				var errors = [];

				for (var h, x, i = 0; i < l; ++i) {
					x = promises[i];
					if(x === void 0 && !(i in promises)) {
						--pending;
						continue;
					}

					h = Promise._handler(x);
					if(h.state() > 0) {
						resolver.become(h);
						Promise._visitRemaining(promises, i, h);
						break;
					} else {
						h.visit(resolver, handleFulfill, handleReject);
					}
				}

				if(pending === 0) {
					resolver.reject(new RangeError('any(): array must not be empty'));
				}

				return p;

				function handleFulfill(x) {
					/*jshint validthis:true*/
					errors = null;
					this.resolve(x); // this === resolver
				}

				function handleReject(e) {
					/*jshint validthis:true*/
					if(this.resolved) { // this === resolver
						return;
					}

					errors.push(e);
					if(--pending === 0) {
						this.reject(errors);
					}
				}
			}

			/**
			 * N-winner competitive race
			 * Return a promise that will fulfill when n input promises have
			 * fulfilled, or will reject when it becomes impossible for n
			 * input promises to fulfill (ie when promises.length - n + 1
			 * have rejected)
			 * @param {array} promises
			 * @param {number} n
			 * @returns {Promise} promise for the earliest n fulfillment values
			 *
			 * @deprecated
			 */
			function some(promises, n) {
				/*jshint maxcomplexity:7*/
				var p = Promise._defer();
				var resolver = p._handler;

				var results = [];
				var errors = [];

				var l = promises.length>>>0;
				var nFulfill = 0;
				var nReject;
				var x, i; // reused in both for() loops

				// First pass: count actual array items
				for(i=0; i<l; ++i) {
					x = promises[i];
					if(x === void 0 && !(i in promises)) {
						continue;
					}
					++nFulfill;
				}

				// Compute actual goals
				n = Math.max(n, 0);
				nReject = (nFulfill - n + 1);
				nFulfill = Math.min(n, nFulfill);

				if(n > nFulfill) {
					resolver.reject(new RangeError('some(): array must contain at least '
					+ n + ' item(s), but had ' + nFulfill));
				} else if(nFulfill === 0) {
					resolver.resolve(results);
				}

				// Second pass: observe each array item, make progress toward goals
				for(i=0; i<l; ++i) {
					x = promises[i];
					if(x === void 0 && !(i in promises)) {
						continue;
					}

					Promise._handler(x).visit(resolver, fulfill, reject, resolver.notify);
				}

				return p;

				function fulfill(x) {
					/*jshint validthis:true*/
					if(this.resolved) { // this === resolver
						return;
					}

					results.push(x);
					if(--nFulfill === 0) {
						errors = null;
						this.resolve(results);
					}
				}

				function reject(e) {
					/*jshint validthis:true*/
					if(this.resolved) { // this === resolver
						return;
					}

					errors.push(e);
					if(--nReject === 0) {
						results = null;
						this.reject(errors);
					}
				}
			}

			/**
			 * Apply f to the value of each promise in a list of promises
			 * and return a new list containing the results.
			 * @param {array} promises
			 * @param {function(x:*, index:Number):*} f mapping function
			 * @returns {Promise}
			 */
			function map(promises, f) {
				return Promise._traverse(f, promises);
			}

			/**
			 * Filter the provided array of promises using the provided predicate.  Input may
			 * contain promises and values
			 * @param {Array} promises array of promises and values
			 * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
			 *  Must return truthy (or promise for truthy) for items to retain.
			 * @returns {Promise} promise that will fulfill with an array containing all items
			 *  for which predicate returned truthy.
			 */
			function filter(promises, predicate) {
				var a = slice.call(promises);
				return Promise._traverse(predicate, a).then(function(keep) {
					return filterSync(a, keep);
				});
			}

			function filterSync(promises, keep) {
				// Safe because we know all promises have fulfilled if we've made it this far
				var l = keep.length;
				var filtered = new Array(l);
				for(var i=0, j=0; i<l; ++i) {
					if(keep[i]) {
						filtered[j++] = Promise._handler(promises[i]).value;
					}
				}
				filtered.length = j;
				return filtered;

			}

			/**
			 * Return a promise that will always fulfill with an array containing
			 * the outcome states of all input promises.  The returned promise
			 * will never reject.
			 * @param {Array} promises
			 * @returns {Promise} promise for array of settled state descriptors
			 */
			function settle(promises) {
				return all(promises.map(settleOne));
			}

			function settleOne(p) {
				var h = Promise._handler(p);
				return h.state() === 0 ? toPromise(p).then(state.fulfilled, state.rejected)
						: state.inspect(h);
			}

			/**
			 * Traditional reduce function, similar to `Array.prototype.reduce()`, but
			 * input may contain promises and/or values, and reduceFunc
			 * may return either a value or a promise, *and* initialValue may
			 * be a promise for the starting value.
			 * @param {Array|Promise} promises array or promise for an array of anything,
			 *      may contain a mix of promises and values.
			 * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
			 * @returns {Promise} that will resolve to the final reduced value
			 */
			function reduce(promises, f /*, initialValue */) {
				return arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2])
						: ar.call(promises, liftCombine(f));
			}

			/**
			 * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but
			 * input may contain promises and/or values, and reduceFunc
			 * may return either a value or a promise, *and* initialValue may
			 * be a promise for the starting value.
			 * @param {Array|Promise} promises array or promise for an array of anything,
			 *      may contain a mix of promises and values.
			 * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
			 * @returns {Promise} that will resolve to the final reduced value
			 */
			function reduceRight(promises, f /*, initialValue */) {
				return arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2])
						: arr.call(promises, liftCombine(f));
			}

			function liftCombine(f) {
				return function(z, x, i) {
					return applyFold(f, void 0, [z,x,i]);
				};
			}
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return {
			pending: toPendingState,
			fulfilled: toFulfilledState,
			rejected: toRejectedState,
			inspect: inspect
		};

		function toPendingState() {
			return { state: 'pending' };
		}

		function toRejectedState(e) {
			return { state: 'rejected', reason: e };
		}

		function toFulfilledState(x) {
			return { state: 'fulfilled', value: x };
		}

		function inspect(handler) {
			var state = handler.state();
			return state === 0 ? toPendingState()
				 : state > 0   ? toFulfilledState(handler.value)
				               : toRejectedState(handler.value);
		}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		makeApply.tryCatchResolve = tryCatchResolve;

		return makeApply;

		function makeApply(Promise, call) {
			if(arguments.length < 2) {
				call = tryCatchResolve;
			}

			return apply;

			function apply(f, thisArg, args) {
				var p = Promise._defer();
				var l = args.length;
				var params = new Array(l);
				callAndResolve({ f:f, thisArg:thisArg, args:args, params:params, i:l-1, call:call }, p._handler);

				return p;
			}

			function callAndResolve(c, h) {
				if(c.i < 0) {
					return call(c.f, c.thisArg, c.params, h);
				}

				var handler = Promise._handler(c.args[c.i]);
				handler.fold(callAndResolveNext, c, void 0, h);
			}

			function callAndResolveNext(c, x, h) {
				c.params[c.i] = x;
				c.i -= 1;
				callAndResolve(c, h);
			}
		}

		function tryCatchResolve(f, thisArg, args, resolver) {
			try {
				resolver.resolve(f.apply(thisArg, args));
			} catch(e) {
				resolver.reject(e);
			}
		}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));




/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function flow(Promise) {

			var resolve = Promise.resolve;
			var reject = Promise.reject;
			var origCatch = Promise.prototype['catch'];

			/**
			 * Handle the ultimate fulfillment value or rejection reason, and assume
			 * responsibility for all errors.  If an error propagates out of result
			 * or handleFatalError, it will be rethrown to the host, resulting in a
			 * loud stack track on most platforms and a crash on some.
			 * @param {function?} onResult
			 * @param {function?} onError
			 * @returns {undefined}
			 */
			Promise.prototype.done = function(onResult, onError) {
				this._handler.visit(this._handler.receiver, onResult, onError);
			};

			/**
			 * Add Error-type and predicate matching to catch.  Examples:
			 * promise.catch(TypeError, handleTypeError)
			 *   .catch(predicate, handleMatchedErrors)
			 *   .catch(handleRemainingErrors)
			 * @param onRejected
			 * @returns {*}
			 */
			Promise.prototype['catch'] = Promise.prototype.otherwise = function(onRejected) {
				if (arguments.length < 2) {
					return origCatch.call(this, onRejected);
				}

				if(typeof onRejected !== 'function') {
					return this.ensure(rejectInvalidPredicate);
				}

				return origCatch.call(this, createCatchFilter(arguments[1], onRejected));
			};

			/**
			 * Wraps the provided catch handler, so that it will only be called
			 * if the predicate evaluates truthy
			 * @param {?function} handler
			 * @param {function} predicate
			 * @returns {function} conditional catch handler
			 */
			function createCatchFilter(handler, predicate) {
				return function(e) {
					return evaluatePredicate(e, predicate)
						? handler.call(this, e)
						: reject(e);
				};
			}

			/**
			 * Ensures that onFulfilledOrRejected will be called regardless of whether
			 * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT
			 * receive the promises' value or reason.  Any returned value will be disregarded.
			 * onFulfilledOrRejected may throw or return a rejected promise to signal
			 * an additional error.
			 * @param {function} handler handler to be called regardless of
			 *  fulfillment or rejection
			 * @returns {Promise}
			 */
			Promise.prototype['finally'] = Promise.prototype.ensure = function(handler) {
				if(typeof handler !== 'function') {
					return this;
				}

				return this.then(function(x) {
					return runSideEffect(handler, this, identity, x);
				}, function(e) {
					return runSideEffect(handler, this, reject, e);
				});
			};

			function runSideEffect (handler, thisArg, propagate, value) {
				var result = handler.call(thisArg);
				return maybeThenable(result)
					? propagateValue(result, propagate, value)
					: propagate(value);
			}

			function propagateValue (result, propagate, x) {
				return resolve(result).then(function () {
					return propagate(x);
				});
			}

			/**
			 * Recover from a failure by returning a defaultValue.  If defaultValue
			 * is a promise, it's fulfillment value will be used.  If defaultValue is
			 * a promise that rejects, the returned promise will reject with the
			 * same reason.
			 * @param {*} defaultValue
			 * @returns {Promise} new promise
			 */
			Promise.prototype['else'] = Promise.prototype.orElse = function(defaultValue) {
				return this.then(void 0, function() {
					return defaultValue;
				});
			};

			/**
			 * Shortcut for .then(function() { return value; })
			 * @param  {*} value
			 * @return {Promise} a promise that:
			 *  - is fulfilled if value is not a promise, or
			 *  - if value is a promise, will fulfill with its value, or reject
			 *    with its reason.
			 */
			Promise.prototype['yield'] = function(value) {
				return this.then(function() {
					return value;
				});
			};

			/**
			 * Runs a side effect when this promise fulfills, without changing the
			 * fulfillment value.
			 * @param {function} onFulfilledSideEffect
			 * @returns {Promise}
			 */
			Promise.prototype.tap = function(onFulfilledSideEffect) {
				return this.then(onFulfilledSideEffect)['yield'](this);
			};

			return Promise;
		};

		function rejectInvalidPredicate() {
			throw new TypeError('catch predicate must be a function');
		}

		function evaluatePredicate(e, predicate) {
			return isError(predicate) ? e instanceof predicate : predicate(e);
		}

		function isError(predicate) {
			return predicate === Error
				|| (predicate != null && predicate.prototype instanceof Error);
		}

		function maybeThenable(x) {
			return (typeof x === 'object' || typeof x === 'function') && x !== null;
		}

		function identity(x) {
			return x;
		}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */
	/** @author Jeff Escalante */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function fold(Promise) {

			Promise.prototype.fold = function(f, z) {
				var promise = this._beget();

				this._handler.fold(function(z, x, to) {
					Promise._handler(z).fold(function(x, z, to) {
						to.resolve(f.call(this, z, x));
					}, x, this, to);
				}, z, promise._handler.receiver, promise._handler);

				return promise;
			};

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

		var inspect = __webpack_require__(80).inspect;

		return function inspection(Promise) {

			Promise.prototype.inspect = function() {
				return inspect(Promise._handler(this));
			};

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function generate(Promise) {

			var resolve = Promise.resolve;

			Promise.iterate = iterate;
			Promise.unfold = unfold;

			return Promise;

			/**
			 * @deprecated Use github.com/cujojs/most streams and most.iterate
			 * Generate a (potentially infinite) stream of promised values:
			 * x, f(x), f(f(x)), etc. until condition(x) returns true
			 * @param {function} f function to generate a new x from the previous x
			 * @param {function} condition function that, given the current x, returns
			 *  truthy when the iterate should stop
			 * @param {function} handler function to handle the value produced by f
			 * @param {*|Promise} x starting value, may be a promise
			 * @return {Promise} the result of the last call to f before
			 *  condition returns true
			 */
			function iterate(f, condition, handler, x) {
				return unfold(function(x) {
					return [x, f(x)];
				}, condition, handler, x);
			}

			/**
			 * @deprecated Use github.com/cujojs/most streams and most.unfold
			 * Generate a (potentially infinite) stream of promised values
			 * by applying handler(generator(seed)) iteratively until
			 * condition(seed) returns true.
			 * @param {function} unspool function that generates a [value, newSeed]
			 *  given a seed.
			 * @param {function} condition function that, given the current seed, returns
			 *  truthy when the unfold should stop
			 * @param {function} handler function to handle the value produced by unspool
			 * @param x {*|Promise} starting value, may be a promise
			 * @return {Promise} the result of the last value produced by unspool before
			 *  condition returns true
			 */
			function unfold(unspool, condition, handler, x) {
				return resolve(x).then(function(seed) {
					return resolve(condition(seed)).then(function(done) {
						return done ? seed : resolve(unspool(seed)).spread(next);
					});
				});

				function next(item, newSeed) {
					return resolve(handler(item)).then(function() {
						return unfold(unspool, condition, handler, newSeed);
					});
				}
			}
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

		var env = __webpack_require__(87);
		var TimeoutError = __webpack_require__(89);

		function setTimeout(f, ms, x, y) {
			return env.setTimer(function() {
				f(x, y, ms);
			}, ms);
		}

		return function timed(Promise) {
			/**
			 * Return a new promise whose fulfillment value is revealed only
			 * after ms milliseconds
			 * @param {number} ms milliseconds
			 * @returns {Promise}
			 */
			Promise.prototype.delay = function(ms) {
				var p = this._beget();
				this._handler.fold(handleDelay, ms, void 0, p._handler);
				return p;
			};

			function handleDelay(ms, x, h) {
				setTimeout(resolveDelay, ms, x, h);
			}

			function resolveDelay(x, h) {
				h.resolve(x);
			}

			/**
			 * Return a new promise that rejects after ms milliseconds unless
			 * this promise fulfills earlier, in which case the returned promise
			 * fulfills with the same value.
			 * @param {number} ms milliseconds
			 * @param {Error|*=} reason optional rejection reason to use, defaults
			 *   to a TimeoutError if not provided
			 * @returns {Promise}
			 */
			Promise.prototype.timeout = function(ms, reason) {
				var p = this._beget();
				var h = p._handler;

				var t = setTimeout(onTimeout, ms, reason, p._handler);

				this._handler.visit(h,
					function onFulfill(x) {
						env.clearTimer(t);
						this.resolve(x); // this = h
					},
					function onReject(x) {
						env.clearTimer(t);
						this.reject(x); // this = h
					},
					h.notify);

				return p;
			};

			function onTimeout(reason, h, ms) {
				var e = typeof reason === 'undefined'
					? new TimeoutError('timed out after ' + ms + 'ms')
					: reason;
				h.reject(e);
			}

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;var require;/* WEBPACK VAR INJECTION */(function(process) {/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/
	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
		/*jshint maxcomplexity:6*/

		// Sniff "best" async scheduling option
		// Prefer process.nextTick or MutationObserver, then check for
		// setTimeout, and finally vertx, since its the only env that doesn't
		// have setTimeout

		var MutationObs;
		var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;

		// Default env
		var setTimer = function(f, ms) { return setTimeout(f, ms); };
		var clearTimer = function(t) { return clearTimeout(t); };
		var asap = function (f) { return capturedSetTimeout(f, 0); };

		// Detect specific env
		if (isNode()) { // Node
			asap = function (f) { return process.nextTick(f); };

		} else if (MutationObs = hasMutationObserver()) { // Modern browser
			asap = initMutationObserver(MutationObs);

		} else if (!capturedSetTimeout) { // vert.x
			var vertxRequire = require;
			var vertx = __webpack_require__(88);
			setTimer = function (f, ms) { return vertx.setTimer(ms, f); };
			clearTimer = vertx.cancelTimer;
			asap = vertx.runOnLoop || vertx.runOnContext;
		}

		return {
			setTimer: setTimer,
			clearTimer: clearTimer,
			asap: asap
		};

		function isNode () {
			return typeof process !== 'undefined' && process !== null &&
				typeof process.nextTick === 'function';
		}

		function hasMutationObserver () {
			return (typeof MutationObserver === 'function' && MutationObserver) ||
				(typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);
		}

		function initMutationObserver(MutationObserver) {
			var scheduled;
			var node = document.createTextNode('');
			var o = new MutationObserver(run);
			o.observe(node, { characterData: true });

			function run() {
				var f = scheduled;
				scheduled = void 0;
				f();
			}

			var i = 0;
			return function (f) {
				scheduled = f;
				node.data = (i ^= 1);
			};
		}
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		/**
		 * Custom error type for promises rejected by promise.timeout
		 * @param {string} message
		 * @constructor
		 */
		function TimeoutError (message) {
			Error.call(this);
			this.message = message;
			this.name = TimeoutError.name;
			if (typeof Error.captureStackTrace === 'function') {
				Error.captureStackTrace(this, TimeoutError);
			}
		}

		TimeoutError.prototype = Object.create(Error.prototype);
		TimeoutError.prototype.constructor = TimeoutError;

		return TimeoutError;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function addWith(Promise) {
			/**
			 * Returns a promise whose handlers will be called with `this` set to
			 * the supplied receiver.  Subsequent promises derived from the
			 * returned promise will also have their handlers called with receiver
			 * as `this`. Calling `with` with undefined or no arguments will return
			 * a promise whose handlers will again be called in the usual Promises/A+
			 * way (no `this`) thus safely undoing any previous `with` in the
			 * promise chain.
			 *
			 * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+
			 * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)
			 *
			 * @param {object} receiver `this` value for all handlers attached to
			 *  the returned promise.
			 * @returns {Promise}
			 */
			Promise.prototype['with'] = Promise.prototype.withThis = function(receiver) {
				var p = this._beget();
				var child = p._handler;
				child.receiver = receiver;
				this._handler.chain(child, receiver);
				return p;
			};

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));



/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

		var setTimer = __webpack_require__(87).setTimer;
		var format = __webpack_require__(92);

		return function unhandledRejection(Promise) {
			var logError = noop;
			var logInfo = noop;
			var localConsole;

			if(typeof console !== 'undefined') {
				// Alias console to prevent things like uglify's drop_console option from
				// removing console.log/error. Unhandled rejections fall into the same
				// category as uncaught exceptions, and build tools shouldn't silence them.
				localConsole = console;
				logError = typeof localConsole.error !== 'undefined'
					? function (e) { localConsole.error(e); }
					: function (e) { localConsole.log(e); };

				logInfo = typeof localConsole.info !== 'undefined'
					? function (e) { localConsole.info(e); }
					: function (e) { localConsole.log(e); };
			}

			Promise.onPotentiallyUnhandledRejection = function(rejection) {
				enqueue(report, rejection);
			};

			Promise.onPotentiallyUnhandledRejectionHandled = function(rejection) {
				enqueue(unreport, rejection);
			};

			Promise.onFatalRejection = function(rejection) {
				enqueue(throwit, rejection.value);
			};

			var tasks = [];
			var reported = [];
			var running = null;

			function report(r) {
				if(!r.handled) {
					reported.push(r);
					logError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));
				}
			}

			function unreport(r) {
				var i = reported.indexOf(r);
				if(i >= 0) {
					reported.splice(i, 1);
					logInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));
				}
			}

			function enqueue(f, x) {
				tasks.push(f, x);
				if(running === null) {
					running = setTimer(flush, 0);
				}
			}

			function flush() {
				running = null;
				while(tasks.length > 0) {
					tasks.shift()(tasks.shift());
				}
			}

			return Promise;
		};

		function throwit(e) {
			throw e;
		}

		function noop() {}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return {
			formatError: formatError,
			formatObject: formatObject,
			tryStringify: tryStringify
		};

		/**
		 * Format an error into a string.  If e is an Error and has a stack property,
		 * it's returned.  Otherwise, e is formatted using formatObject, with a
		 * warning added about e not being a proper Error.
		 * @param {*} e
		 * @returns {String} formatted string, suitable for output to developers
		 */
		function formatError(e) {
			var s = typeof e === 'object' && e !== null && e.stack ? e.stack : formatObject(e);
			return e instanceof Error ? s : s + ' (WARNING: non-Error used)';
		}

		/**
		 * Format an object, detecting "plain" objects and running them through
		 * JSON.stringify if possible.
		 * @param {Object} o
		 * @returns {string}
		 */
		function formatObject(o) {
			var s = String(o);
			if(s === '[object Object]' && typeof JSON !== 'undefined') {
				s = tryStringify(o, s);
			}
			return s;
		}

		/**
		 * Try to return the result of JSON.stringify(x).  If that fails, return
		 * defaultValue
		 * @param {*} x
		 * @param {*} defaultValue
		 * @returns {String|*} JSON.stringify(x) or defaultValue
		 */
		function tryStringify(x, defaultValue) {
			try {
				return JSON.stringify(x);
			} catch(e) {
				return defaultValue;
			}
		}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

		var makePromise = __webpack_require__(94);
		var Scheduler = __webpack_require__(95);
		var async = __webpack_require__(87).asap;

		return makePromise({
			scheduler: new Scheduler(async)
		});

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(78));


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function makePromise(environment) {

			var tasks = environment.scheduler;

			var objectCreate = Object.create ||
				function(proto) {
					function Child() {}
					Child.prototype = proto;
					return new Child();
				};

			/**
			 * Create a promise whose fate is determined by resolver
			 * @constructor
			 * @returns {Promise} promise
			 * @name Promise
			 */
			function Promise(resolver, handler) {
				this._handler = resolver === Handler ? handler : init(resolver);
			}

			/**
			 * Run the supplied resolver
			 * @param resolver
			 * @returns {Pending}
			 */
			function init(resolver) {
				var handler = new Pending();

				try {
					resolver(promiseResolve, promiseReject, promiseNotify);
				} catch (e) {
					promiseReject(e);
				}

				return handler;

				/**
				 * Transition from pre-resolution state to post-resolution state, notifying
				 * all listeners of the ultimate fulfillment or rejection
				 * @param {*} x resolution value
				 */
				function promiseResolve (x) {
					handler.resolve(x);
				}
				/**
				 * Reject this promise with reason, which will be used verbatim
				 * @param {Error|*} reason rejection reason, strongly suggested
				 *   to be an Error type
				 */
				function promiseReject (reason) {
					handler.reject(reason);
				}

				/**
				 * @deprecated
				 * Issue a progress event, notifying all progress listeners
				 * @param {*} x progress event payload to pass to all listeners
				 */
				function promiseNotify (x) {
					handler.notify(x);
				}
			}

			// Creation

			Promise.resolve = resolve;
			Promise.reject = reject;
			Promise.never = never;

			Promise._defer = defer;
			Promise._handler = getHandler;

			/**
			 * Returns a trusted promise. If x is already a trusted promise, it is
			 * returned, otherwise returns a new trusted Promise which follows x.
			 * @param  {*} x
			 * @return {Promise} promise
			 */
			function resolve(x) {
				return isPromise(x) ? x
					: new Promise(Handler, new Async(getHandler(x)));
			}

			/**
			 * Return a reject promise with x as its reason (x is used verbatim)
			 * @param {*} x
			 * @returns {Promise} rejected promise
			 */
			function reject(x) {
				return new Promise(Handler, new Async(new Rejected(x)));
			}

			/**
			 * Return a promise that remains pending forever
			 * @returns {Promise} forever-pending promise.
			 */
			function never() {
				return foreverPendingPromise; // Should be frozen
			}

			/**
			 * Creates an internal {promise, resolver} pair
			 * @private
			 * @returns {Promise}
			 */
			function defer() {
				return new Promise(Handler, new Pending());
			}

			// Transformation and flow control

			/**
			 * Transform this promise's fulfillment value, returning a new Promise
			 * for the transformed result.  If the promise cannot be fulfilled, onRejected
			 * is called with the reason.  onProgress *may* be called with updates toward
			 * this promise's fulfillment.
			 * @param {function=} onFulfilled fulfillment handler
			 * @param {function=} onRejected rejection handler
			 * @param {function=} onProgress @deprecated progress handler
			 * @return {Promise} new promise
			 */
			Promise.prototype.then = function(onFulfilled, onRejected, onProgress) {
				var parent = this._handler;
				var state = parent.join().state();

				if ((typeof onFulfilled !== 'function' && state > 0) ||
					(typeof onRejected !== 'function' && state < 0)) {
					// Short circuit: value will not change, simply share handler
					return new this.constructor(Handler, parent);
				}

				var p = this._beget();
				var child = p._handler;

				parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);

				return p;
			};

			/**
			 * If this promise cannot be fulfilled due to an error, call onRejected to
			 * handle the error. Shortcut for .then(undefined, onRejected)
			 * @param {function?} onRejected
			 * @return {Promise}
			 */
			Promise.prototype['catch'] = function(onRejected) {
				return this.then(void 0, onRejected);
			};

			/**
			 * Creates a new, pending promise of the same type as this promise
			 * @private
			 * @returns {Promise}
			 */
			Promise.prototype._beget = function() {
				return begetFrom(this._handler, this.constructor);
			};

			function begetFrom(parent, Promise) {
				var child = new Pending(parent.receiver, parent.join().context);
				return new Promise(Handler, child);
			}

			// Array combinators

			Promise.all = all;
			Promise.race = race;
			Promise._traverse = traverse;

			/**
			 * Return a promise that will fulfill when all promises in the
			 * input array have fulfilled, or will reject when one of the
			 * promises rejects.
			 * @param {array} promises array of promises
			 * @returns {Promise} promise for array of fulfillment values
			 */
			function all(promises) {
				return traverseWith(snd, null, promises);
			}

			/**
			 * Array<Promise<X>> -> Promise<Array<f(X)>>
			 * @private
			 * @param {function} f function to apply to each promise's value
			 * @param {Array} promises array of promises
			 * @returns {Promise} promise for transformed values
			 */
			function traverse(f, promises) {
				return traverseWith(tryCatch2, f, promises);
			}

			function traverseWith(tryMap, f, promises) {
				var handler = typeof f === 'function' ? mapAt : settleAt;

				var resolver = new Pending();
				var pending = promises.length >>> 0;
				var results = new Array(pending);

				for (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {
					x = promises[i];

					if (x === void 0 && !(i in promises)) {
						--pending;
						continue;
					}

					traverseAt(promises, handler, i, x, resolver);
				}

				if(pending === 0) {
					resolver.become(new Fulfilled(results));
				}

				return new Promise(Handler, resolver);

				function mapAt(i, x, resolver) {
					if(!resolver.resolved) {
						traverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);
					}
				}

				function settleAt(i, x, resolver) {
					results[i] = x;
					if(--pending === 0) {
						resolver.become(new Fulfilled(results));
					}
				}
			}

			function traverseAt(promises, handler, i, x, resolver) {
				if (maybeThenable(x)) {
					var h = getHandlerMaybeThenable(x);
					var s = h.state();

					if (s === 0) {
						h.fold(handler, i, void 0, resolver);
					} else if (s > 0) {
						handler(i, h.value, resolver);
					} else {
						resolver.become(h);
						visitRemaining(promises, i+1, h);
					}
				} else {
					handler(i, x, resolver);
				}
			}

			Promise._visitRemaining = visitRemaining;
			function visitRemaining(promises, start, handler) {
				for(var i=start; i<promises.length; ++i) {
					markAsHandled(getHandler(promises[i]), handler);
				}
			}

			function markAsHandled(h, handler) {
				if(h === handler) {
					return;
				}

				var s = h.state();
				if(s === 0) {
					h.visit(h, void 0, h._unreport);
				} else if(s < 0) {
					h._unreport();
				}
			}

			/**
			 * Fulfill-reject competitive race. Return a promise that will settle
			 * to the same state as the earliest input promise to settle.
			 *
			 * WARNING: The ES6 Promise spec requires that race()ing an empty array
			 * must return a promise that is pending forever.  This implementation
			 * returns a singleton forever-pending promise, the same singleton that is
			 * returned by Promise.never(), thus can be checked with ===
			 *
			 * @param {array} promises array of promises to race
			 * @returns {Promise} if input is non-empty, a promise that will settle
			 * to the same outcome as the earliest input promise to settle. if empty
			 * is empty, returns a promise that will never settle.
			 */
			function race(promises) {
				if(typeof promises !== 'object' || promises === null) {
					return reject(new TypeError('non-iterable passed to race()'));
				}

				// Sigh, race([]) is untestable unless we return *something*
				// that is recognizable without calling .then() on it.
				return promises.length === 0 ? never()
					 : promises.length === 1 ? resolve(promises[0])
					 : runRace(promises);
			}

			function runRace(promises) {
				var resolver = new Pending();
				var i, x, h;
				for(i=0; i<promises.length; ++i) {
					x = promises[i];
					if (x === void 0 && !(i in promises)) {
						continue;
					}

					h = getHandler(x);
					if(h.state() !== 0) {
						resolver.become(h);
						visitRemaining(promises, i+1, h);
						break;
					} else {
						h.visit(resolver, resolver.resolve, resolver.reject);
					}
				}
				return new Promise(Handler, resolver);
			}

			// Promise internals
			// Below this, everything is @private

			/**
			 * Get an appropriate handler for x, without checking for cycles
			 * @param {*} x
			 * @returns {object} handler
			 */
			function getHandler(x) {
				if(isPromise(x)) {
					return x._handler.join();
				}
				return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);
			}

			/**
			 * Get a handler for thenable x.
			 * NOTE: You must only call this if maybeThenable(x) == true
			 * @param {object|function|Promise} x
			 * @returns {object} handler
			 */
			function getHandlerMaybeThenable(x) {
				return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);
			}

			/**
			 * Get a handler for potentially untrusted thenable x
			 * @param {*} x
			 * @returns {object} handler
			 */
			function getHandlerUntrusted(x) {
				try {
					var untrustedThen = x.then;
					return typeof untrustedThen === 'function'
						? new Thenable(untrustedThen, x)
						: new Fulfilled(x);
				} catch(e) {
					return new Rejected(e);
				}
			}

			/**
			 * Handler for a promise that is pending forever
			 * @constructor
			 */
			function Handler() {}

			Handler.prototype.when
				= Handler.prototype.become
				= Handler.prototype.notify // deprecated
				= Handler.prototype.fail
				= Handler.prototype._unreport
				= Handler.prototype._report
				= noop;

			Handler.prototype._state = 0;

			Handler.prototype.state = function() {
				return this._state;
			};

			/**
			 * Recursively collapse handler chain to find the handler
			 * nearest to the fully resolved value.
			 * @returns {object} handler nearest the fully resolved value
			 */
			Handler.prototype.join = function() {
				var h = this;
				while(h.handler !== void 0) {
					h = h.handler;
				}
				return h;
			};

			Handler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {
				this.when({
					resolver: to,
					receiver: receiver,
					fulfilled: fulfilled,
					rejected: rejected,
					progress: progress
				});
			};

			Handler.prototype.visit = function(receiver, fulfilled, rejected, progress) {
				this.chain(failIfRejected, receiver, fulfilled, rejected, progress);
			};

			Handler.prototype.fold = function(f, z, c, to) {
				this.when(new Fold(f, z, c, to));
			};

			/**
			 * Handler that invokes fail() on any handler it becomes
			 * @constructor
			 */
			function FailIfRejected() {}

			inherit(Handler, FailIfRejected);

			FailIfRejected.prototype.become = function(h) {
				h.fail();
			};

			var failIfRejected = new FailIfRejected();

			/**
			 * Handler that manages a queue of consumers waiting on a pending promise
			 * @constructor
			 */
			function Pending(receiver, inheritedContext) {
				Promise.createContext(this, inheritedContext);

				this.consumers = void 0;
				this.receiver = receiver;
				this.handler = void 0;
				this.resolved = false;
			}

			inherit(Handler, Pending);

			Pending.prototype._state = 0;

			Pending.prototype.resolve = function(x) {
				this.become(getHandler(x));
			};

			Pending.prototype.reject = function(x) {
				if(this.resolved) {
					return;
				}

				this.become(new Rejected(x));
			};

			Pending.prototype.join = function() {
				if (!this.resolved) {
					return this;
				}

				var h = this;

				while (h.handler !== void 0) {
					h = h.handler;
					if (h === this) {
						return this.handler = cycle();
					}
				}

				return h;
			};

			Pending.prototype.run = function() {
				var q = this.consumers;
				var handler = this.join();
				this.consumers = void 0;

				for (var i = 0; i < q.length; ++i) {
					handler.when(q[i]);
				}
			};

			Pending.prototype.become = function(handler) {
				if(this.resolved) {
					return;
				}

				this.resolved = true;
				this.handler = handler;
				if(this.consumers !== void 0) {
					tasks.enqueue(this);
				}

				if(this.context !== void 0) {
					handler._report(this.context);
				}
			};

			Pending.prototype.when = function(continuation) {
				if(this.resolved) {
					tasks.enqueue(new ContinuationTask(continuation, this.handler));
				} else {
					if(this.consumers === void 0) {
						this.consumers = [continuation];
					} else {
						this.consumers.push(continuation);
					}
				}
			};

			/**
			 * @deprecated
			 */
			Pending.prototype.notify = function(x) {
				if(!this.resolved) {
					tasks.enqueue(new ProgressTask(x, this));
				}
			};

			Pending.prototype.fail = function(context) {
				var c = typeof context === 'undefined' ? this.context : context;
				this.resolved && this.handler.join().fail(c);
			};

			Pending.prototype._report = function(context) {
				this.resolved && this.handler.join()._report(context);
			};

			Pending.prototype._unreport = function() {
				this.resolved && this.handler.join()._unreport();
			};

			/**
			 * Wrap another handler and force it into a future stack
			 * @param {object} handler
			 * @constructor
			 */
			function Async(handler) {
				this.handler = handler;
			}

			inherit(Handler, Async);

			Async.prototype.when = function(continuation) {
				tasks.enqueue(new ContinuationTask(continuation, this));
			};

			Async.prototype._report = function(context) {
				this.join()._report(context);
			};

			Async.prototype._unreport = function() {
				this.join()._unreport();
			};

			/**
			 * Handler that wraps an untrusted thenable and assimilates it in a future stack
			 * @param {function} then
			 * @param {{then: function}} thenable
			 * @constructor
			 */
			function Thenable(then, thenable) {
				Pending.call(this);
				tasks.enqueue(new AssimilateTask(then, thenable, this));
			}

			inherit(Pending, Thenable);

			/**
			 * Handler for a fulfilled promise
			 * @param {*} x fulfillment value
			 * @constructor
			 */
			function Fulfilled(x) {
				Promise.createContext(this);
				this.value = x;
			}

			inherit(Handler, Fulfilled);

			Fulfilled.prototype._state = 1;

			Fulfilled.prototype.fold = function(f, z, c, to) {
				runContinuation3(f, z, this, c, to);
			};

			Fulfilled.prototype.when = function(cont) {
				runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);
			};

			var errorId = 0;

			/**
			 * Handler for a rejected promise
			 * @param {*} x rejection reason
			 * @constructor
			 */
			function Rejected(x) {
				Promise.createContext(this);

				this.id = ++errorId;
				this.value = x;
				this.handled = false;
				this.reported = false;

				this._report();
			}

			inherit(Handler, Rejected);

			Rejected.prototype._state = -1;

			Rejected.prototype.fold = function(f, z, c, to) {
				to.become(this);
			};

			Rejected.prototype.when = function(cont) {
				if(typeof cont.rejected === 'function') {
					this._unreport();
				}
				runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);
			};

			Rejected.prototype._report = function(context) {
				tasks.afterQueue(new ReportTask(this, context));
			};

			Rejected.prototype._unreport = function() {
				if(this.handled) {
					return;
				}
				this.handled = true;
				tasks.afterQueue(new UnreportTask(this));
			};

			Rejected.prototype.fail = function(context) {
				Promise.onFatalRejection(this, context === void 0 ? this.context : context);
			};

			function ReportTask(rejection, context) {
				this.rejection = rejection;
				this.context = context;
			}

			ReportTask.prototype.run = function() {
				if(!this.rejection.handled) {
					this.rejection.reported = true;
					Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);
				}
			};

			function UnreportTask(rejection) {
				this.rejection = rejection;
			}

			UnreportTask.prototype.run = function() {
				if(this.rejection.reported) {
					Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);
				}
			};

			// Unhandled rejection hooks
			// By default, everything is a noop

			// TODO: Better names: "annotate"?
			Promise.createContext
				= Promise.enterContext
				= Promise.exitContext
				= Promise.onPotentiallyUnhandledRejection
				= Promise.onPotentiallyUnhandledRejectionHandled
				= Promise.onFatalRejection
				= noop;

			// Errors and singletons

			var foreverPendingHandler = new Handler();
			var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);

			function cycle() {
				return new Rejected(new TypeError('Promise cycle'));
			}

			// Task runners

			/**
			 * Run a single consumer
			 * @constructor
			 */
			function ContinuationTask(continuation, handler) {
				this.continuation = continuation;
				this.handler = handler;
			}

			ContinuationTask.prototype.run = function() {
				this.handler.join().when(this.continuation);
			};

			/**
			 * Run a queue of progress handlers
			 * @constructor
			 */
			function ProgressTask(value, handler) {
				this.handler = handler;
				this.value = value;
			}

			ProgressTask.prototype.run = function() {
				var q = this.handler.consumers;
				if(q === void 0) {
					return;
				}

				for (var c, i = 0; i < q.length; ++i) {
					c = q[i];
					runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);
				}
			};

			/**
			 * Assimilate a thenable, sending it's value to resolver
			 * @param {function} then
			 * @param {object|function} thenable
			 * @param {object} resolver
			 * @constructor
			 */
			function AssimilateTask(then, thenable, resolver) {
				this._then = then;
				this.thenable = thenable;
				this.resolver = resolver;
			}

			AssimilateTask.prototype.run = function() {
				var h = this.resolver;
				tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);

				function _resolve(x) { h.resolve(x); }
				function _reject(x)  { h.reject(x); }
				function _notify(x)  { h.notify(x); }
			};

			function tryAssimilate(then, thenable, resolve, reject, notify) {
				try {
					then.call(thenable, resolve, reject, notify);
				} catch (e) {
					reject(e);
				}
			}

			/**
			 * Fold a handler value with z
			 * @constructor
			 */
			function Fold(f, z, c, to) {
				this.f = f; this.z = z; this.c = c; this.to = to;
				this.resolver = failIfRejected;
				this.receiver = this;
			}

			Fold.prototype.fulfilled = function(x) {
				this.f.call(this.c, this.z, x, this.to);
			};

			Fold.prototype.rejected = function(x) {
				this.to.reject(x);
			};

			Fold.prototype.progress = function(x) {
				this.to.notify(x);
			};

			// Other helpers

			/**
			 * @param {*} x
			 * @returns {boolean} true iff x is a trusted Promise
			 */
			function isPromise(x) {
				return x instanceof Promise;
			}

			/**
			 * Test just enough to rule out primitives, in order to take faster
			 * paths in some code
			 * @param {*} x
			 * @returns {boolean} false iff x is guaranteed *not* to be a thenable
			 */
			function maybeThenable(x) {
				return (typeof x === 'object' || typeof x === 'function') && x !== null;
			}

			function runContinuation1(f, h, receiver, next) {
				if(typeof f !== 'function') {
					return next.become(h);
				}

				Promise.enterContext(h);
				tryCatchReject(f, h.value, receiver, next);
				Promise.exitContext();
			}

			function runContinuation3(f, x, h, receiver, next) {
				if(typeof f !== 'function') {
					return next.become(h);
				}

				Promise.enterContext(h);
				tryCatchReject3(f, x, h.value, receiver, next);
				Promise.exitContext();
			}

			/**
			 * @deprecated
			 */
			function runNotify(f, x, h, receiver, next) {
				if(typeof f !== 'function') {
					return next.notify(x);
				}

				Promise.enterContext(h);
				tryCatchReturn(f, x, receiver, next);
				Promise.exitContext();
			}

			function tryCatch2(f, a, b) {
				try {
					return f(a, b);
				} catch(e) {
					return reject(e);
				}
			}

			/**
			 * Return f.call(thisArg, x), or if it throws return a rejected promise for
			 * the thrown exception
			 */
			function tryCatchReject(f, x, thisArg, next) {
				try {
					next.become(getHandler(f.call(thisArg, x)));
				} catch(e) {
					next.become(new Rejected(e));
				}
			}

			/**
			 * Same as above, but includes the extra argument parameter.
			 */
			function tryCatchReject3(f, x, y, thisArg, next) {
				try {
					f.call(thisArg, x, y, next);
				} catch(e) {
					next.become(new Rejected(e));
				}
			}

			/**
			 * @deprecated
			 * Return f.call(thisArg, x), or if it throws, *return* the exception
			 */
			function tryCatchReturn(f, x, thisArg, next) {
				try {
					next.notify(f.call(thisArg, x));
				} catch(e) {
					next.notify(e);
				}
			}

			function inherit(Parent, Child) {
				Child.prototype = objectCreate(Parent.prototype);
				Child.prototype.constructor = Child;
			}

			function snd(x, y) {
				return y;
			}

			function noop() {}

			return Promise;
		};
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		// Credit to Twisol (https://github.com/Twisol) for suggesting
		// this type of extensible queue + trampoline approach for next-tick conflation.

		/**
		 * Async task scheduler
		 * @param {function} async function to schedule a single async function
		 * @constructor
		 */
		function Scheduler(async) {
			this._async = async;
			this._running = false;

			this._queue = new Array(1<<16);
			this._queueLen = 0;
			this._afterQueue = new Array(1<<4);
			this._afterQueueLen = 0;

			var self = this;
			this.drain = function() {
				self._drain();
			};
		}

		/**
		 * Enqueue a task
		 * @param {{ run:function }} task
		 */
		Scheduler.prototype.enqueue = function(task) {
			this._queue[this._queueLen++] = task;
			this.run();
		};

		/**
		 * Enqueue a task to run after the main task queue
		 * @param {{ run:function }} task
		 */
		Scheduler.prototype.afterQueue = function(task) {
			this._afterQueue[this._afterQueueLen++] = task;
			this.run();
		};

		Scheduler.prototype.run = function() {
			if (!this._running) {
				this._running = true;
				this._async(this.drain);
			}
		};

		/**
		 * Drain the handler queue entirely, and then the after queue
		 */
		Scheduler.prototype._drain = function() {
			var i = 0;
			for (; i < this._queueLen; ++i) {
				this._queue[i].run();
				this._queue[i] = void 0;
			}

			this._queueLen = 0;
			this._running = false;

			for (i = 0; i < this._afterQueueLen; ++i) {
				this._afterQueue[i].run();
				this._afterQueue[i] = void 0;
			}

			this._afterQueueLen = 0;
		};

		return Scheduler;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(78)));


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {//
	//
	//

	// Channel machinery.

	'use strict';

	var defs = __webpack_require__(23);
	var closeMsg = __webpack_require__(67).closeMessage;
	var inspect = __webpack_require__(67).inspect;
	var methodName = __webpack_require__(67).methodName;
	var assert = __webpack_require__(26);
	var inherits = __webpack_require__(27).inherits;
	var EventEmitter = __webpack_require__(40).EventEmitter;
	var fmt = __webpack_require__(27).format;
	var IllegalOperationError = __webpack_require__(72).IllegalOperationError;
	var stackCapture = __webpack_require__(72).stackCapture;

	function Channel(connection) {
	  this.connection = connection;
	  // for the presently outstanding RPC
	  this.reply = null;
	  // for the RPCs awaiting action
	  this.pending = [];
	  // for unconfirmed messages
	  this.lwm = 1; // the least, unconfirmed deliveryTag
	  this.unconfirmed = []; // rolling window of delivery callbacks
	  this.on('ack', this.handleConfirm.bind(this, function(cb) {
	    if (cb) cb(null);
	  }));
	  this.on('nack', this.handleConfirm.bind(this, function(cb) {
	    if (cb) cb(new Error('message nacked'));
	  }));
	  // message frame state machine
	  this.handleMessage = acceptDeliveryOrReturn;
	}
	inherits(Channel, EventEmitter);

	module.exports.Channel = Channel;
	module.exports.acceptMessage = acceptMessage;

	var C = Channel.prototype;

	C.allocate = function() {
	  this.ch = this.connection.freshChannel(this);
	  return this;
	}

	// Incoming frames are either notifications of e.g., message delivery,
	// or replies to something we've sent. In general I deal with the
	// former by emitting an event, and with the latter by keeping a track
	// of what's expecting a reply.
	//
	// The AMQP specification implies that RPCs can't be pipelined; that
	// is, you can have only one outstanding RPC on a channel at a
	// time. Certainly that's what RabbitMQ and its clients assume. For
	// this reason, I buffer RPCs if the channel is already waiting for a
	// reply.

	// Just send the damn frame.
	C.sendImmediately = function(method, fields) {
	  return this.connection.sendMethod(this.ch, method, fields);
	};

	// Invariant: !this.reply -> pending.length == 0. That is, whenever we
	// clear a reply, we must send another RPC (and thereby fill
	// this.reply) if there is one waiting. The invariant relevant here
	// and in `accept`.
	C.sendOrEnqueue = function(method, fields, reply) {
	  if (!this.reply) { // if no reply waiting, we can go
	    assert(this.pending.length === 0);
	    this.reply = reply;
	    this.sendImmediately(method, fields);
	  }
	  else {
	    this.pending.push({method: method,
	                       fields: fields,
	                       reply: reply});
	  }
	};

	C.sendMessage = function(fields, properties, content) {
	  return this.connection.sendMessage(
	    this.ch,
	    defs.BasicPublish, fields,
	    defs.BasicProperties, properties,
	    content);
	};

	// Internal, synchronously resolved RPC; the return value is resolved
	// with the whole frame.
	C._rpc = function(method, fields, expect, cb) {
	  var self = this;

	  function reply(err, f) {
	    if (err === null) {
	      if (f.id === expect) {
	        return cb(null, f);
	      }
	      else {
	        // We have detected a problem, so it's up to us to close the
	        // channel
	        var expectedName = methodName(expect);
	        var e = new Error(fmt("Expected %s; got %s",
	                              expectedName, inspect(f, false)));
	        self.closeWithError(fmt('Expected %s; got %s',
	                                expectedName, methodName(f.id)),
	                            defs.constants.UNEXPECTED_FRAME, e);
	        return cb(e);
	      }
	    }
	    // An error will be given if, for example, this is waiting to be
	    // sent and the connection closes
	    else if (err instanceof Error) return cb(err);
	    // A close frame will be given if this is the RPC awaiting reply
	    // and the channel is closed by the server
	    else {
	      // otherwise, it's a close frame
	      var closeReason =
	        (err.fields.classId << 16) + err.fields.methodId;
	      var e = (method === closeReason)
	        ? fmt("Operation failed: %s; %s",
	              methodName(method), closeMsg(err))
	        : fmt("Channel closed by server: %s", closeMsg(err));
	      return cb(new Error(e));
	    }
	  }

	  this.sendOrEnqueue(method, fields, reply);
	};

	// Shutdown protocol. There's three scenarios:
	//
	// 1. The application decides to shut the channel
	// 2. The server decides to shut the channel, possibly because of
	// something the application did
	// 3. The connection is closing, so there won't be any more frames
	// going back and forth.
	//
	// 1 and 2 involve an exchange of method frames (Close and CloseOk),
	// while 3 doesn't; the connection simply says "shutdown" to the
	// channel, which then acts as if it's closing, without going through
	// the exchange.

	function invalidOp(msg, stack) {
	  return function() {
	    throw new IllegalOperationError(msg, stack);
	  };
	}

	function invalidateSend(ch, msg, stack) {
	  ch.sendImmediately = ch.sendOrEnqueue = ch.sendMessage =
	    invalidOp(msg, stack);
	}

	// Move to entirely closed state.
	C.toClosed = function(capturedStack) {
	  this._rejectPending();
	  invalidateSend(this, 'Channel closed', capturedStack);
	  this.accept = invalidOp('Channel closed', capturedStack);
	  this.connection.releaseChannel(this.ch);
	  this.emit('close');
	};

	// Stop being able to send and receive methods and content. Used when
	// we close the channel. Invokes the continuation once the server has
	// acknowledged the close, but before the channel is moved to the
	// closed state.
	C.toClosing = function(capturedStack, k) {
	  var send = this.sendImmediately.bind(this);
	  invalidateSend(this, 'Channel closing', capturedStack);

	  this.accept = function(f) {
	    if (f.id === defs.ChannelCloseOk) {
	      if (k) k();
	      var s = stackCapture('ChannelCloseOk frame received');
	      this.toClosed(s);
	    }
	    else if (f.id === defs.ChannelClose) {
	      send(defs.ChannelCloseOk, {});
	    }
	    // else ignore frame
	  };
	};

	C._rejectPending = function() {
	  function rej(r) { 
	    r(new Error("Channel ended, no reply will be forthcoming"));
	  }
	  if (this.reply !== null) rej(this.reply);
	  this.reply = null;

	  var discard;
	  while (discard = this.pending.shift()) rej(discard.reply);
	  this.pending = null; // so pushes will break
	};

	C.closeBecause = function(reason, code, k) {
	  this.sendImmediately(defs.ChannelClose, {
	    replyText: reason,
	    replyCode: code,
	    methodId:0, classId: 0
	  });
	  var s = stackCapture('closeBecause called: ' + reason);
	  this.toClosing(s, k);
	};

	// If we close because there's been an error, we need to distinguish
	// between what we tell the server (`reason`) and what we report as
	// the cause in the client (`error`).
	C.closeWithError = function(reason, code, error) {
	  var self = this;
	  this.closeBecause(reason, code, function() {
	    self.emit('error', error);
	  });
	};

	// A trampolining state machine for message frames on a channel. A
	// message arrives in at least two frames: first, a method announcing
	// the message (either a BasicDeliver or BasicGetOk); then, a message
	// header with the message properties; then, zero or more content
	// frames.

	// Keep the try/catch localised, in an attempt to avoid disabling
	// optimisation
	C.acceptMessageFrame = function(f) {
	  try {
	    this.handleMessage = this.handleMessage(f);
	  }
	  catch (msg) {
	    if (typeof msg === 'string') {
	      this.closeWithError(msg, defs.constants.UNEXPECTED_FRAME,
	                          new Error(msg));
	    }
	    else if (msg instanceof Error) {
	      this.closeWithError('Error while processing message',
	                          defs.constants.INTERNAL_ERROR, msg);
	    }
	    else {
	      this.closeWithError('Internal error while processing message',
	                          defs.constants.INTERNAL_ERROR,
	                          new Error(msg.toString()));
	    }
	  }
	};

	// Kick off a message delivery given a BasicDeliver or BasicReturn
	// frame (BasicGet uses the RPC mechanism)
	function acceptDeliveryOrReturn(f) {
	  var event;
	  if (f.id === defs.BasicDeliver) event = 'delivery';
	  else if (f.id === defs.BasicReturn) event = 'return';
	  else throw fmt("Expected BasicDeliver or BasicReturn; got %s",
	                 inspect(f));

	  var self = this;
	  var fields = f.fields;
	  return acceptMessage(function(message) {
	    message.fields = fields;
	    self.emit(event, message);
	  });
	}

	// Move to the state of waiting for message frames (headers, then
	// one or more content frames)
	function acceptMessage(continuation) {
	  var totalSize = 0, remaining = 0;
	  var buffers = null;

	  var message = {
	    fields: null,
	    properties: null,
	    content: null
	  };

	  return headers;

	  // expect a headers frame
	  function headers(f) {
	    if (f.id === defs.BasicProperties) {
	      message.properties = f.fields;
	      totalSize = remaining = f.size;
	      
	      // for zero-length messages, content frames aren't required.
	      if (totalSize === 0) {
	        message.content = new Buffer(0);
	        continuation(message);
	        return acceptDeliveryOrReturn;
	      }
	      else {
	        return content;        
	      }
	    }
	    else {
	      throw "Expected headers frame after delivery";
	    }
	  }

	  // expect a content frame
	  // %%% TODO cancelled messages (sent as zero-length content frame)
	  function content(f) {
	    if (f.content) {
	      var size = f.content.length;
	      remaining -= size;
	      if (remaining === 0) {
	        if (buffers !== null) {
	          buffers.push(f.content);
	          message.content = Buffer.concat(buffers);
	        }
	        else {
	          message.content = f.content;
	        }
	        continuation(message);
	        return acceptDeliveryOrReturn;
	      }
	      else if (remaining < 0) {
	        throw fmt("Too much content sent! Expected %d bytes",
	                  totalSize);
	      }
	      else {
	        if (buffers !== null)
	          buffers.push(f.content);
	        else
	          buffers = [f.content];
	        return content;
	      }
	    }
	    else throw "Expected content frame after headers"
	  }
	}

	C.handleConfirm = function(handle, f) {
	  var tag = f.deliveryTag;
	  var multi = f.multiple;

	  if (multi) {
	    var confirmed = this.unconfirmed.splice(0, tag - this.lwm + 1);
	    this.lwm = tag + 1;
	    confirmed.forEach(handle);
	  }
	  else {
	    var c;
	    if (tag === this.lwm) {
	      c = this.unconfirmed.shift();
	      this.lwm++;
	      // Advance the LWM and the window to the next non-gap, or
	      // possibly to the end
	      while (this.unconfirmed[0] === null) {
	        this.unconfirmed.shift();
	        this.lwm++;
	      }
	    }
	    else {
	      c = this.unconfirmed[tag - this.lwm];
	      this.unconfirmed[tag - this.lwm] = null;
	    }
	    // Technically, in the single-deliveryTag case, I should report a
	    // protocol breach if it's already been confirmed.
	    handle(c);
	  }
	};

	C.pushConfirmCallback = function(cb) {
	  // `null` is used specifically for marking already confirmed slots,
	  // so I coerce `undefined` and `null` to false; functions are never
	  // falsey.
	  this.unconfirmed.push(cb || false);
	};

	// Interface for connection to use

	C.accept = function(f) {

	  switch (f.id) {

	    // Message frames
	  case undefined: // content frame!
	  case defs.BasicDeliver:
	  case defs.BasicReturn:
	  case defs.BasicProperties:
	    return this.acceptMessageFrame(f);

	    // confirmations, need to do confirm.select first
	  case defs.BasicAck:
	    return this.emit('ack', f.fields);
	  case defs.BasicNack:
	    return this.emit('nack', f.fields);
	  case defs.BasicCancel:
	    // The broker can send this if e.g., the queue is deleted.
	    return this.emit('cancel', f.fields);

	  case defs.ChannelClose:
	    // Any remote closure is an error to us. Reject the pending reply
	    // with the close frame, so it can see whether it was that
	    // operation that caused it to close.
	    if (this.reply) {
	      var reply = this.reply; this.reply = null;
	      reply(f);
	    }
	    var emsg = "Channel closed by server: " + closeMsg(f);
	    this.sendImmediately(defs.ChannelCloseOk, {});
	    this.emit('error', new Error(emsg));
	    var s = stackCapture(emsg);
	    this.toClosed(s);
	    return;

	  case defs.BasicFlow:
	    // RabbitMQ doesn't send this, it just blocks the TCP socket
	    return this.closeWithError("Flow not implemented",
	                               defs.constants.NOT_IMPLEMENTED,
	                               new Error('Flow not implemented'));

	  default: // assume all other things are replies
	    // Resolving the reply may lead to another RPC; to make sure we
	    // don't hold that up, clear this.reply
	    var reply = this.reply; this.reply = null;
	    // however, maybe there's an RPC waiting to go? If so, that'll
	    // fill this.reply again, restoring the invariant. This does rely
	    // on any response being recv'ed after resolving the promise,
	    // below; hence, I use synchronous defer.
	    if (this.pending.length > 0) {
	      var send = this.pending.shift();
	      this.reply = send.reply;
	      this.sendImmediately(send.method, send.fields);
	    }
	    return reply(null, f);
	  }
	};

	C.onBufferDrain = function() {
	  this.emit('drain');
	};


	// This adds just a bit more stuff useful for the APIs, but not
	// low-level machinery.
	function BaseChannel(connection) {
	  Channel.call(this, connection);
	  this.consumers = {};
	}
	inherits(BaseChannel, Channel);

	module.exports.BaseChannel = BaseChannel;

	// Not sure I like the ff, it's going to be changing hidden classes
	// all over the place. On the other hand, whaddya do.
	BaseChannel.prototype.registerConsumer = function(tag, callback) {
	  this.consumers[tag] = callback;
	};

	BaseChannel.prototype.unregisterConsumer = function(tag) {
	  delete this.consumers[tag];
	};

	BaseChannel.prototype.dispatchMessage = function(fields, message) {
	  var consumerTag = fields.consumerTag;
	  var consumer = this.consumers[consumerTag];
	  if (consumer) {
	    return consumer(message);
	  }
	  else {
	    // %%% Surely a race here
	    throw new Error("Unknown consumer: " + consumerTag);
	  }
	};

	BaseChannel.prototype.handleDelivery = function(message) {
	  return this.dispatchMessage(message.fields, message);
	};

	BaseChannel.prototype.handleCancel = function(fields) {
	  return this.dispatchMessage(fields, null);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	//
	//
	//

	'use strict';

	/*
	The channel (promise) and callback APIs have similar signatures, and
	in particular, both need AMQP fields prepared from the same arguments
	and options. The arguments marshalling is done here. Each of the
	procedures below takes arguments and options (the latter in an object)
	particular to the operation it represents, and returns an object with
	fields for handing to the encoder.
	*/

	// A number of AMQP methods have a table-typed field called
	// `arguments`, that is intended to carry extension-specific
	// values. RabbitMQ uses this in a number of places; e.g., to specify
	// an 'alternate exchange'.
	//
	// Many of the methods in this API have an `options` argument, from
	// which I take both values that have a default in AMQP (e.g.,
	// autoDelete in QueueDeclare) *and* values that are specific to
	// RabbitMQ (e.g., 'alternate-exchange'), which would normally be
	// supplied in `arguments`. So that extensions I don't support yet can
	// be used, I include `arguments` itself among the options.
	//
	// The upshot of this is that I often need to prepare an `arguments`
	// value that has any values passed in `options.arguments` as well as
	// any I've promoted to being options themselves. Since I don't want
	// to mutate anything passed in, the general pattern is to create a
	// fresh object with the `arguments` value given as its prototype; all
	// fields in the supplied value will be serialised, as well as any I
	// set on the fresh object. What I don't want to do, however, is set a
	// field to undefined by copying possibly missing field values,
	// because that will mask a value in the prototype.
	//
	// NB the `arguments` field already has a default value of `{}`, so
	// there's no need to explicitly default it unless I'm setting values.
	function setIfDefined(obj, prop, value) {
	  if (value != undefined) obj[prop] = value;
	}

	var EMPTY_OPTIONS = Object.freeze({});

	var Args = {};

	Args.assertQueue = function(queue, options) {
	  queue = queue || '';
	  options = options || EMPTY_OPTIONS;

	  var argt = Object.create(options.arguments || null);
	  setIfDefined(argt, 'x-expires', options.expires);
	  setIfDefined(argt, 'x-message-ttl', options.messageTtl);
	  setIfDefined(argt, 'x-dead-letter-exchange',
	               options.deadLetterExchange);
	  setIfDefined(argt, 'x-dead-letter-routing-key',
	               options.deadLetterRoutingKey);
	  setIfDefined(argt, 'x-max-length', options.maxLength);

	  return {
	    queue: queue,
	    exclusive: !!options.exclusive,
	    durable: (options.durable === undefined) ? true : options.durable,
	    autoDelete: !!options.autoDelete,
	    arguments: argt,
	    passive: false,
	    // deprecated but we have to include it
	    ticket: 0,
	    nowait: false
	  };
	};

	Args.checkQueue = function(queue) {
	  return {
	    queue: queue,
	    passive: true, // switch to "completely different" mode
	    nowait: false,
	    durable: true, autoDelete: false, exclusive: false, // ignored
	    ticket: 0,
	  };
	};

	Args.deleteQueue = function(queue, options) {
	  options = options || EMPTY_OPTIONS;
	  return {
	    queue: queue,
	    ifUnused: !!options.ifUnused,
	    ifEmpty: !!options.ifEmpty,
	    ticket: 0, nowait: false
	  };
	};

	Args.purgeQueue = function(queue) {
	  return {
	    queue: queue,
	    ticket: 0, nowait: false
	  };
	};

	Args.bindQueue = function(queue, source, pattern, argt) {
	  return {
	    queue: queue,
	    exchange: source,
	    routingKey: pattern,
	    arguments: argt,
	    ticket: 0, nowait: false
	  };
	};

	Args.unbindQueue = function(queue, source, pattern, argt) {
	  return {
	    queue: queue,
	    exchange: source,
	    routingKey: pattern,
	    arguments: argt,
	    ticket: 0, nowait: false
	  };
	};

	Args.assertExchange = function(exchange, type, options) {
	  options = options || EMPTY_OPTIONS;
	  var argt = Object.create(options.arguments || null);
	  setIfDefined(argt, 'alternate-exchange', options.alternateExchange);
	  return {
	    exchange: exchange,
	    ticket: 0,
	    type: type,
	    passive: false,
	    durable: (options.durable === undefined) ? true : options.durable,
	    autoDelete: !!options.autoDelete,
	    internal: !!options.internal,
	    nowait: false,
	    arguments: argt
	  };
	};

	Args.checkExchange = function(exchange) {
	  return {
	    exchange: exchange,
	    passive: true, // switch to 'may as well be another method' mode
	    nowait: false,
	    // ff are ignored
	    durable: true, internal: false,  type: '',  autoDelete: false,
	    ticket: 0
	  };
	};

	Args.deleteExchange = function(exchange, options) {
	  options = options || EMPTY_OPTIONS;
	  return {
	    exchange: exchange,
	    ifUnused: !!options.ifUnused,
	    ticket: 0, nowait: false
	  };
	};

	Args.bindExchange = function(dest, source, pattern, argt) {
	  return {
	    source: source,
	    destination: dest,
	    routingKey: pattern,
	    arguments: argt,
	    ticket: 0, nowait: false
	  };
	};

	Args.unbindExchange = function(dest, source, pattern, argt) {
	  return {
	    source: source,
	    destination: dest,
	    routingKey: pattern,
	    arguments: argt,
	    ticket: 0, nowait: false
	  };
	};

	// It's convenient to construct the properties and the method fields
	// at the same time, since in the APIs, values for both can appear in
	// `options`. Since the property or mthod field names don't overlap, I
	// just return one big object that can be used for both purposes, and
	// the encoder will pick out what it wants.
	Args.publish = function(exchange, routingKey, options) {
	  options = options || EMPTY_OPTIONS;

	  // The CC and BCC fields expect an array of "longstr", which would
	  // normally be buffer values in JavaScript; however, since a field
	  // array (or table) cannot have shortstr values, the codec will
	  // encode all strings as longstrs anyway.
	  function convertCC(cc) {
	    if (cc === undefined) {
	      return undefined;
	    }
	    else if (Array.isArray(cc)) {
	      return cc.map(String);
	    }
	    else return [String(cc)];
	  }

	  var headers = Object.create(options.headers || null);
	  setIfDefined(headers, 'CC', convertCC(options.CC));
	  setIfDefined(headers, 'BCC', convertCC(options.BCC));

	  var deliveryMode; // undefined will default to 1 (non-persistent)

	  // Previously I overloaded deliveryMode be a boolean meaning
	  // 'persistent or not'; better is to name this option for what it
	  // is, but I need to have backwards compatibility for applications
	  // that either supply a numeric or boolean value.
	  if (options.persistent !== undefined)
	    deliveryMode = (options.persistent) ? 2 : 1;
	  else if (typeof options.deliveryMode === 'number')
	    deliveryMode = options.deliveryMode;
	  else if (options.deliveryMode) // is supplied and truthy
	    deliveryMode = 2;

	  var expiration = options.expiration;
	  if (expiration !== undefined) expiration = expiration.toString();

	  return {
	    // method fields
	    exchange: exchange,
	    routingKey: routingKey,
	    mandatory: !!options.mandatory,
	    immediate: false, // RabbitMQ doesn't implement this any more
	    ticket: undefined,
	    // properties
	    contentType: options.contentType,
	    contentEncoding: options.contentEncoding,
	    headers: headers,
	    deliveryMode: deliveryMode,
	    priority: options.priority,
	    correlationId: options.correlationId,
	    replyTo: options.replyTo,
	    expiration: expiration,
	    messageId: options.messageId,
	    timestamp: options.timestamp,
	    type: options.type,
	    userId: options.userId,
	    appId: options.appId,
	    clusterId: undefined
	  };
	};

	Args.consume = function(queue, options) {
	  options = options || EMPTY_OPTIONS;
	  var argt = Object.create(options.arguments || null);
	  setIfDefined(argt, 'x-priority', options.priority);
	  return {
	    ticket: 0,
	    queue: queue,
	    consumerTag: options.consumerTag || '',
	    noLocal: !!options.noLocal,
	    noAck: !!options.noAck,
	    exclusive: !!options.exclusive,
	    nowait: false,
	    arguments: argt
	  };
	};

	Args.cancel = function(consumerTag) {
	  return {
	    consumerTag: consumerTag,
	    nowait: false
	  };
	};

	Args.get = function(queue, options) {
	  options = options || EMPTY_OPTIONS;
	  return {
	    ticket: 0,
	    queue: queue,
	    noAck: !!options.noAck
	  };
	};

	Args.ack = function(tag, allUpTo) {
	  return {
	    deliveryTag: tag,
	    multiple: !!allUpTo
	  };
	};

	Args.nack = function(tag, allUpTo, requeue) {
	  return {
	    deliveryTag: tag,
	    multiple: !!allUpTo,
	    requeue: (requeue === undefined) ? true : requeue
	  };
	};

	Args.reject = function(tag, requeue) {
	  return {
	    deliveryTag: tag,
	    requeue: (requeue === undefined) ? true : requeue
	  };
	};

	Args.prefetch = function(count, global) {
	  return {
	    prefetchCount: count || 0,
	    prefetchSize: 0,
	    global: !!global
	  };
	};

	Args.recover = function() {
	  return {requeue: true};
	};

	module.exports = Object.freeze(Args);


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A module that exports the base SpaceBunny client
	 * @module SpaceBunny
	 */

	'use strict';

	// Import some helpers modules
	var merge = __webpack_require__(7);
	var CONFIG = __webpack_require__(99).CONFIG;
	var request = __webpack_require__(102);

	// Import Space Bunny errors
	var SpaceBunnyErrors = __webpack_require__(110);

	/**
	 * @constructor
	 * @param {Object} opts - constructor options may contain api-key or connection options
	 */
	var SpaceBunny = function (opts) {
	  this._opts = merge({},opts);
	  this._connectionParams = this._opts.connection;
	  this._apiKey = this._opts.apiKey;
	  this._endPoint = this._opts.endPoint;
	  this._channels = this._opts.channels || [];
	  this._endPointConfigs = this._opts.endPointConfigs;
	  this._deviceId = this._opts.deviceId;
	};

	/**
	 * Check if api-key or connection parameters have already been passed
	 * If at least api-key is passed ask the endpoint for the configurations
	 * else if also connection parameters are not passed raise an exception
	 *
	 * @return an Object containing the connection parameters
	 */
	SpaceBunny.prototype.connection = function() {
	  if(this._apiKey !== undefined && this._connectionParams === undefined)
	    this._connectionParams = this._endPointConfigurations().connection;
	  else if (this._apiKey === undefined && this._connectionParams === undefined)
	    throw new SpaceBunnyErrors.ApiKeyOrConfigurationsRequired('Missing configurations');
	  return this._connectionParams;
	};

	/**
	 * @return all channels configured for the current device
	 */
	SpaceBunny.prototype.channels = function () {
	  this._channels = this._channels || this._endPointConfigs.channels;
	  return this._channels.map(function(obj) {return obj.name});
	};

	/**
	 * @return the device ID for the current device
	 */
	SpaceBunny.prototype.deviceId = function () {
	  this._deviceId = this._deviceId || this._connectionParams.username;
	  return this._deviceId;
	};

	// ------------ PRIVATE METHODS -------------------

	/**
	 * @private
	 * Return configs from the Space Bunny ndpoint
	 * it caches configurations so if you ask multiple
	 * time for configurations it makes only one request
	 *
	 * @return an Object containing endpoint configurations
	 */
	SpaceBunny.prototype._endPointConfigurations = function() {
	  if(this._endPointConfigs !== undefined)
	    return this._endPointConfigs;

	  // Contact endpoint to retrieve configs
	  var uri = "http://".concat(CONFIG.endpoint.url, CONFIG.endpoint.api_version, CONFIG.endpoint.path);
	  var response;
	  try {
	    var args = { headers: { 'Api-Key': this._apiKey } };
	    var response = request('GET', uri, args);
	    this._endPointConfigs = JSON.parse(response.getBody());
	    return this._endPointConfigs;
	  } catch(e) {
	    throw new SpaceBunnyErrors.EndPointError(e);
	  }
	};

	module.exports = SpaceBunny;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__(100)(exports);

	// or multiple
	define({
	    CONFIG: {
	      endpoint: {
	        url: 'localhost:3000', // 'https://api.spacebunny.io',
	        api_version: '/v1',
	        path: '/device_configurations'
	      }
	    }
	});


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(101);


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Provides short-hand for creating a definer right away
	 *
	 * @param {object} [object]  The object to bind the constants to
	 *
	 * @returns {function}  @see exports.definer
	 */
	module.exports = function (object) {
	    return module.exports.definer(object);
	};

	/**
	 * Binds a new "constant" property to an input object
	 *
	 * @param {object} object
	 * @param {string} name
	 * @param {mixed}  value
	 *
	 * @return {object}  The input object
	 */
	module.exports.define = function (object, name, value) {
	    var key;

	    // if an object, loop the properties for the definitions
	    if (typeof name === "object") {
	        for (key in name) {
	            if (name.hasOwnProperty(key)) {
	                module.exports.define(object, key, name[key]);
	            }
	        }
	    // otherwise, just operate on a single property
	    } else {
	        Object.defineProperty(object, name, {
	            value:        value,
	            enumerable:   true,
	            writable:     false,
	            configurable: false
	        });
	    }

	    return object;
	};

	/**
	 * Creates a "definer" function that is bound to an input object (or a new empty object)
	 *
	 * @param {object} [object]
	 *
	 * @return {function}
	 */
	module.exports.definer = function (object) {
	    object = object || Object.create(null);
	    return function (name, value) {
	        return module.exports.define(object, name, value);
	    };
	};


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Response = __webpack_require__(103);
	var handleQs = __webpack_require__(104);

	module.exports = doRequest;
	function doRequest(method, url, options, callback) {
	  var xhr = new window.XMLHttpRequest();

	  // check types of arguments

	  if (typeof method !== 'string') {
	    throw new TypeError('The method must be a string.');
	  }
	  if (typeof url !== 'string') {
	    throw new TypeError('The URL/path must be a string.');
	  }
	  if (typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  if (options === null || options === undefined) {
	    options = {};
	  }
	  if (typeof options !== 'object') {
	    throw new TypeError('Options must be an object (or null).');
	  }
	  if (typeof callback !== 'function') {
	    callback = undefined;
	  }

	  method = method.toUpperCase();
	  options.headers = options.headers || {};

	  // handle cross domain

	  var match;
	  var crossDomain = !!((match = /^([\w-]+:)?\/\/([^\/]+)/.exec(options.uri)) && (match[2] != window.location.host));
	  if (!crossDomain) options.headers['X-Requested-With'] = 'XMLHttpRequest';

	  // handle query string
	  if (options.qs) {
	    url = handleQs(url, options.qs);
	  }

	  // handle json body
	  if (options.json) {
	    options.body = JSON.stringify(options.json);
	    options.headers['content-type'] = 'application/json';
	  }

	  // method, url, async
	  xhr.open(method, url, false);

	  for (var name in options.headers) {
	    xhr.setRequestHeader(name.toLowerCase(), options.headers[name]);
	  }

	  // avoid sending empty string (#319)
	  xhr.send(options.body ? options.body : null);


	  var headers = {};
	  xhr.getAllResponseHeaders().split('\r\n').forEach(function (header) {
	    var h = header.split(':');
	    if (h.length > 1) {
	      headers[h[0].toLowerCase()] = h.slice(1).join(':').trim();
	    }
	  });
	  return new Response(xhr.status, headers, xhr.responseText);
	}


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = Response;

	/**
	 * A response from a web request
	 *
	 * @param {Number} statusCode
	 * @param {Object} headers
	 * @param {Buffer} body
	 */
	function Response(statusCode, headers, body) {
	  if (typeof statusCode !== 'number') {
	    throw new TypeError('statusCode must be a number but was ' + (typeof statusCode));
	  }
	  if (headers === null) {
	    throw new TypeError('headers cannot be null');
	  }
	  if (typeof headers !== 'object') {
	    throw new TypeError('headers must be an object but was ' + (typeof headers));
	  }
	  this.statusCode = statusCode;
	  this.headers = {};
	  for (var key in headers) {
	    this.headers[key.toLowerCase()] = headers[key];
	  }
	  this.body = body;
	}

	Response.prototype.getBody = function (encoding) {
	  if (this.statusCode >= 300) {
	    var err = new Error('Server responded with status code '
	                    + this.statusCode + ':\n' + this.body.toString());
	    err.statusCode = this.statusCode;
	    err.headers = this.headers;
	    err.body = this.body;
	    throw err;
	  }
	  return encoding ? this.body.toString(encoding) : this.body;
	};


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parse = __webpack_require__(105).parse;
	var stringify = __webpack_require__(105).stringify;

	module.exports = handleQs;
	function handleQs(url, query) {
	  url = url.split('?');
	  var start = url[0];
	  var qs = (url[1] || '').split('#')[0];
	  var end = url[1] && url[1].split('#').length > 1 ? '#' + url[1].split('#')[1] : '';

	  var baseQs = parse(qs);
	  for (var i in query) {
	    baseQs[i] = query[i];
	  }
	  qs = stringify(baseQs);
	  if (qs !== '') {
	    qs = '?' + qs;
	  }
	  return start + qs + end;
	}


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(106);


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Stringify = __webpack_require__(107);
	var Parse = __webpack_require__(109);


	// Declare internals

	var internals = {};


	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(108);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function (prefix, key) {
	            return prefix + '[]';
	        },
	        indices: function (prefix, key) {
	            return prefix + '[' + key + ']';
	        },
	        repeat: function (prefix, key) {
	            return prefix;
	        }
	    }
	};


	internals.stringify = function (obj, prefix, generateArrayPrefix) {

	    if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    }
	    else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    }
	    else if (obj === null) {
	        obj = '';
	    }

	    if (typeof obj === 'string' ||
	        typeof obj === 'number' ||
	        typeof obj === 'boolean') {

	        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
	        }
	        else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
	        }
	    }

	    return values;
	};


	module.exports = function (obj, options) {

	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

	    var keys = [];

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    }
	    else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    }
	    else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
	    }

	    return keys.join(delimiter);
	};


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules


	// Declare internals

	var internals = {};


	exports.arrayToObject = function (source) {

	    var obj = {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {

	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};


	exports.merge = function (target, source) {

	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        }
	        else {
	            target[source] = true;
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }

	    if (Array.isArray(target) &&
	        !Array.isArray(source)) {

	        target = exports.arrayToObject(target);
	    }

	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];

	        if (!target[key]) {
	            target[key] = value;
	        }
	        else {
	            target[key] = exports.merge(target[key], value);
	        }
	    }

	    return target;
	};


	exports.decode = function (str) {

	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};


	exports.compact = function (obj, refs) {

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return obj;
	    }

	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};


	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};


	exports.isBuffer = function (obj) {

	    if (obj === null ||
	        typeof obj === 'undefined') {

	        return false;
	    }

	    return !!(obj.constructor &&
	        obj.constructor.isBuffer &&
	        obj.constructor.isBuffer(obj));
	};


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(108);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000
	};


	internals.parseValues = function (str, options) {

	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';
	        }
	        else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (!Object.prototype.hasOwnProperty.call(obj, key)) {
	                obj[key] = val;
	            }
	            else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }

	    return obj;
	};


	internals.parseObject = function (chain, val, options) {

	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj = {};
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    }
	    else {
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) &&
	            root !== cleanRoot &&
	            indexString === cleanRoot &&
	            index >= 0 &&
	            index <= options.arrayLimit) {

	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        }
	        else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};


	internals.parseKeys = function (key, val, options) {

	    if (!key) {
	        return;
	    }

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Don't allow them to overwrite object prototype properties

	    if (Object.prototype.hasOwnProperty(segment[1])) {
	        return;
	    }

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {

	        ++i;
	        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            keys.push(segment[1]);
	        }
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};


	module.exports = function (str, options) {

	    if (str === '' ||
	        str === null ||
	        typeof str === 'undefined') {

	        return {};
	    }

	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj);
	    }

	    return Utils.compact(obj);
	};


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var errorFactory = __webpack_require__(111);

	exports.MissingProtocolHandler = errorFactory('MissingProtocolHandler');
	exports.ApiKeyOrConfigurationsRequired = errorFactory('ApiKeyOrConfigurationsRequired');
	exports.EndPointNotReachable = errorFactory('EndPointNotReachable');
	exports.EndPointError = errorFactory('EndPointError');


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Module Error Factory
	*/


	const ERR_MSG_TOKENS = /\{\{([^\}]+)\}\}/g;
	const ARG_EXTRACT_PATTERN = /^function [\w\-_]*\(([^\)]*)\)/;
	const ARG_SPLITTER_PATTERN = /\s*,\s*/;

	var util = __webpack_require__(27);
	var varValidator = __webpack_require__(112);

	var varValidatorOptions = {
	  enableScope: true,
	  enableBrackets: false,
	  allowLowerCase: true,
	  allowUpperCase: true
	};

	/**
	Error cache
	*/
	var cache = {};

	/**
	Auto update stack trace on message update
	*/
	var autoUpdateStack = false;



	/**
	Expose factory method
	*/
	module.exports = errorFactory;

	/**
	Expose ErrorProperty
	*/
	module.exports.ErrorProperty = ErrorProperty;


	/**
	Expose autoUpdateStack flag on message update
	*/
	Object.defineProperty(module.exports, 'autoUpdateStack', {
	  enumerable: true,
	  configurable: false,
	  get: function isAutoUpdateStack() {
	    return autoUpdateStack;
	  },
	  set: function setAutoUpdateStack(b) {
	    autoUpdateStack = b;
	  }
	});


	/**
	Create a new error class with the specified name and argument/properties
	configuration. Optionally, the error may extend the given type
	*/
	function errorFactory(name, config, baseType) {
	  var CustomError;
	  var keys;
	  var key;
	  var argList = [];
	  var superConstructor;
	  var customProperties = '';
	  var definedProperties;
	  var fnArgs;
	  var fnBody;
	  var typeName;

	  if (!name) {
	    throw new Error('Empty error name');
	  } else if (typeof name !== 'string') {
	    throw new Error('Error name must be a string');
	  } else if (!varValidator.isValid(name, varValidatorOptions)) {
	    throw new Error('Invalid error name `' + name + '`');
	  } else if ((arguments.length > 2) && !(baseType && (baseType === Error || baseType.prototype instanceof Error))) {
	    throw new Error('Invalid base type `' + baseType + '`');
	  }

	  if (cache[name]) {
	    return cache[name];
	  }

	  typeName = name.split('.').pop();
	  definedProperties = {
	    message: {
	      enumerable: true,
	      configurable: false,
	      get: errorMessageRenderer,
	      set: errorMessage
	    }
	  };

	  if (config instanceof Array) {
	    for (var i = 0, len = config.length; i < len; ++i) {
	      customProperties = customProperties + generateCustomProperty(config[i], undefined, definedProperties, argList);
	    }
	  } else if (config !== null && typeof config === 'object') {
	    if ('_message' in config) {
	      throw new Error('Property "_message" should be "message": ' + JSON.stringify(config._message));
	    } else if ('stack' in config) {
	      throw new Error('Property "stack" is an invalid argument name: ' + JSON.stringify(config.stack));
	    }

	    keys = Object.keys(config);

	    for (var i = 0, len = keys.length; i < len; ++i) {
	      key = keys[i];

	      customProperties = customProperties + generateCustomProperty(key, config[key], definedProperties, argList);
	    }
	  }

	  if (!customProperties) {
	    // NOTE : unless explicit argument are provided, this is mocking the Error default behaviour
	    customProperties = customProperties + generateCustomProperty('message', undefined, definedProperties, argList);
	  }

	  fnArgs = 'definedProperties,stackTraceCleanup' +
	           (baseType ? (',' + baseType.name) : '');

	  fnBody = 'return function ' + typeName + '(' + argList.join(',') + '){' +
	    'if(!(this instanceof ' + typeName + ')){' +
	      'return new ' + typeName + '(' + argList.join(',') + ');' +
	    '}' +
	    customProperties +
	    'this._message=this._message||this.message||"' + typeName + '";' +
	    (baseType
	      ? buildSuperConstructorCall(baseType, argList)
	      : 'Error.apply(this,arguments);' +
	        'Object.defineProperties(this,definedProperties);' +
	        'Error.captureStackTrace(this,this.constructor);' +
	        'this.stack=stackTraceCleanup(this.stack);') +
	  '}';

	  CustomError = Function(fnArgs, fnBody)(definedProperties, stackTraceCleanup, baseType);

	  util.inherits(CustomError, baseType || Error);

	  Object.defineProperties(CustomError.prototype, {
	    'name': {
	      enumerable: true,
	      configurable: false,
	      writable: false,
	      value: typeName
	    },
	    'canonicalName': {
	      enumerable: true,
	      configurable: false,
	      writable: false,
	      value: name
	    }
	  });
	  Object.defineProperties(CustomError, {
	    'canonicalName': {
	      enumerable: true,
	      configurable: false,
	      writable: false,
	      value: name
	    }
	  });

	  // save to cache
	  cache[name] = CustomError;

	  return CustomError;
	}


	function generateCustomProperty(property, value, definedProperties, argList) {
	  var constructorArgument = true;

	  if (!varValidator.isValid(property, varValidatorOptions)) {
	    throw new Error('Invalid named argument : `' + String(property));
	  }

	  if (value instanceof ErrorProperty) {
	    constructorArgument = value.constructorArgument;

	    definedProperties[property] = value.description;

	    if (constructorArgument) {
	      value = value.description.value;

	      delete definedProperties[property].value;
	    }
	  }

	  if (constructorArgument) {
	    argList.push(property);

	    if (value === undefined) {
	      return '(' + property + '!==undefined)&&(this.' + property + '=' + property + ');';
	    } else {
	      return 'this.' + property + '=' + property + '!==undefined?' + property + ':' + JSON.stringify(value) + ';';
	    }
	  } else {
	    return '';
	  }
	}


	function buildSuperConstructorCall(base, args) {
	  var undef = 'undefined';
	  var baseArgs = ARG_EXTRACT_PATTERN.exec(base.toString())[1].split(ARG_SPLITTER_PATTERN).filter(function (v) {
	    return v;
	  }).map(function (arg) {
	    return (args.indexOf(arg) > -1) ? arg : undef;
	  });

	  while (baseArgs.length && baseArgs[baseArgs.length - 1] === undef) {
	    baseArgs.pop();
	  }

	  return base.name + '.call(this,' + baseArgs.join(',') + ');';
	}




	/**
	Contains information about an Error property

	@param description {Object}        an object compatible with Object.defineProperty
	@param constructorArgument {bool}  tells if this property is a constructor named argument (default false)
	*/
	function ErrorProperty(description, constructorArgument) {
	  if (!(this instanceof ErrorProperty)) {
	    return new ErrorProperty(description, constructorArgument);
	  }

	  if ((description === null) || (description.__proto__.constructor !== Object)) {
	    throw new TypeError('Property description must be an object: ' + JSON.stringify(description));
	  }

	  this.description = description;
	  this.constructorArgument = constructorArgument;
	}



	function errorMessageRenderer() {
	  var msg = this._message || this.name;
	  var data = this.messageData;

	  if (data) {
	    return msg.replace(ERR_MSG_TOKENS, function (m, t) {
	      return t in data ? data[t] : m;
	    });
	  }

	  return msg;
	}

	function errorMessage(message) {
	  var oldMsg;

	  if (autoUpdateStack) {
	    oldMsg = this.message;
	  }

	  this._message = message;

	  if (autoUpdateStack) {
	    this.stack = this.stack.replace(oldMsg, this.message);
	  }
	}


	function stackTraceCleanup(stack) {
	  stack = stack.split('\n');
	  stack.splice(1, 1);
	  return stack.join('\n');
	}


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Model/Type Name validator
	*/

	const DEFAULT_ENABLE_SCOPE = true;
	const DEFAULT_ENABLE_BRACKETS = false;
	const DEFAULT_ALLOW_UPPERCASE = true;
	const DEFAULT_ALLOW_LOWERCASE = true;

	const TYPE_NAME_REGEX = new RegExp('^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)'
	  + '[$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374'
	  + '\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527'
	  + '\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5'
	  + '\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5'
	  + '\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961'
	  + '\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce'
	  + '\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35'
	  + '\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2'
	  + '\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33'
	  + '\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a'
	  + '\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33'
	  + '\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9'
	  + '\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f'
	  + '\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82'
	  + '\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2'
	  + '\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f'
	  + '\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa'
	  + '\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5'
	  + '\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4'
	  + '\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751'
	  + '\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c'
	  + '\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b'
	  + '\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5'
	  + '\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d'
	  + '\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4'
	  + '\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d'
	  + '\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee'
	  + '\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6'
	  + '\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035'
	  + '\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba'
	  + '\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e'
	  + '\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801'
	  + '\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946'
	  + '\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5'
	  + '\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16'
	  + '\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06'
	  + '\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d'
	  + '\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7'
	  + '\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc][$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4'
	  + '\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481'
	  + '\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5'
	  + '\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa'
	  + '\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977'
	  + '\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd'
	  + '\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39'
	  + '\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd'
	  + '\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d'
	  + '\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4'
	  + '\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59'
	  + '\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2'
	  + '\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb'
	  + '\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97'
	  + '\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00'
	  + '\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070'
	  + '\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d'
	  + '\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310'
	  + '\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0'
	  + '\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877'
	  + '\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16'
	  + '\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f'
	  + '\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d'
	  + '\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3'
	  + '\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115'
	  + '\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e'
	  + '\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96'
	  + '\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f'
	  + '\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d'
	  + '\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f'
	  + '\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa'
	  + '\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925'
	  + '\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf'
	  + '\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e'
	  + '\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d'
	  + '\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44'
	  + '\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a'
	  + '\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf'
	  + '\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed'
	  + '\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827'
	  + '\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f'
	  + '\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c'
	  + '\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9'
	  + '\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62'
	  + '\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44'
	  + '\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8'
	  + '\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62'
	  + '\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e'
	  + '\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39'
	  + '\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059'
	  + '\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734'
	  + '\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b'
	  + '\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99'
	  + '\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37'
	  + '\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f'
	  + '\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629'
	  + '\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1'
	  + '\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59'
	  + '\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9'
	  + '\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f]*$');

	const SCOPE_SEPARATOR = '.';
	const BRACKET_PATTERN = /^([^\[\]]+)(?:\s*\[\s*(["']?)\s*(.*)?\s*\2\s*\])?$/;
	const NUMERIC_KEY_PATTERN = /^[0-9]+$/;

	var defaultOptions = {
	  enableScope: DEFAULT_ENABLE_SCOPE,
	  enableBrackets: DEFAULT_ENABLE_BRACKETS,
	  allowUpperCase: DEFAULT_ALLOW_UPPERCASE,
	  allowLowerCase: DEFAULT_ALLOW_LOWERCASE
	};
	var optionsKeys = Object.keys(defaultOptions);

	/**
	Expose function as module
	*/
	module.exports.isValid = validateName;

	/**
	Expose default settings
	*/
	Object.defineProperties(module.exports, {
	  enableScope: {
	    enumerable: true,
	    configurable: false,
	    get: function getEnableScope()  { return defaultOptions.enableScope; },
	    set: function setEnableScope(v) { defaultOptions.enableScope = v; }
	  },
	  enableBrackets: {
	    enumerable: true,
	    configurable: false,
	    get: function getEnableBrackets()  { return defaultOptions.enableBrackets; },
	    set: function setEnableBrackets(v) { defaultOptions.enableBrackets = v; }
	  },
	  allowUpperCase: {
	    enumerable: true,
	    configurable: false,
	    get: function getAllowUpperCase()  { return defaultOptions.allowUpperCase; },
	    set: function setAllowUpCerCase(v) { defaultOptions.allowUpperCase = v; }
	  },
	  allowLowerCase: {
	    enumerable: true,
	    configurable: false,
	    get: function getAllowLowerCase()  { return defaultOptions.allowLowerCase; },
	    set: function setAllowLowerCase(v) { defaultOptions.allowLowerCase = v; }
	  }
	});

	/**
	Validate the given name and make sure it is valid. The value must be a valid String

	@param {String} name                 the name to validate
	@param {Object} options   (optional) option overrides
	@return {Boolean}                    true if the val is valid, false otherwise
	*/
	function validateName(name, options) {
	  var nameParts;
	  var i;
	  var iLen;
	  var key;
	  var keyMatch;
	  var keyKey;
	  var opt;

	  if (options && (options.constructor.name === 'Object')) {
	    opt = {};

	    for (i = 0, iLen = optionsKeys.length; i < iLen; ++i) {
	      key = optionsKeys[i];
	      if (key in options) {
	        opt[key] = options[key];
	      } else {
	        opt[key] = defaultOptions[key];
	      }
	    }
	  } else {
	    opt = defaultOptions;
	  }

	  function invalidVar(v) {
	    return !TYPE_NAME_REGEX.test(v) ||
	           (!opt.allowLowerCase && v.toLocaleUpperCase() != v) ||
	           (!opt.allowUpperCase && v.toLocaleLowerCase() != v)
	  }

	  if (typeof name === 'string') {
	    if (opt.enableScope) {
	      nameParts = name.split(SCOPE_SEPARATOR);
	    } else {
	      nameParts = [name];
	    }

	    for (i = 0, iLen = nameParts.length; i < iLen; ++i) {
	      key = nameParts[i];

	      if (opt.enableBrackets) {
	        keyMatch = key.match(BRACKET_PATTERN);

	        if (!keyMatch ||
	            invalidVar(keyMatch[1].trim()) ||
	            (!keyMatch[2] && keyMatch[3] && !NUMERIC_KEY_PATTERN.test(keyKey = keyMatch[3].trim()) && invalidVar(keyKey))
	           ) {

	          return false;
	        }
	      } else if (invalidVar(key)) {

	        return false;
	      }
	    }

	    return true;
	  } else {

	    return false;
	  }
	}


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/**
	 * A module that exports an MqttClient client
	 * which inherits from the SpaceBunny base client
	 * @module MqttClient
	 */

	'use strict';


	// Import some helpers modules
	var merge = __webpack_require__(7);
	var Promise = __webpack_require__(9);

	// Import mqtt library
	var mqtt = __webpack_require__(114);

	// Import SpaceBunny main module from which MqttClient inherits
	var SpaceBunny = __webpack_require__(98);
	var inherits = __webpack_require__(27).inherits;

	/**
	 * @constructor
	 * @param {Object} opts - constructor options may contain api-key or connection options
	 */
	var MqttClient = function (opts) {
	  SpaceBunny.call(this,opts);
	  this._client = undefined;
	  this._connectionOpts = { qos: 1 };
	  this._connectTimeout = 5;
	  this.connection();
	};
	inherits(MqttClient, SpaceBunny);

	/**
	 * Subscribe to input channel
	 *
	 * @param {function} callback - function called every time a message is receviced
	 * passing the current message as argument
	 * @param {Object} options - subscription options
	 * @return promise containing the result of the subscription
	 */
	MqttClient.prototype.onReceive = function (callback, opts) {
	  var parent = this;
	  // subscribe for input messages
	  return new Promise(function (resolve, reject) {
	    parent._connect().then(function(client) {
	      client.subscribe(parent._topicFor('input'), merge(parent._connectionOpts,opts), function(err, granted){
	        if(err)
	          reject(false)
	        else {
	          client.on('message', function (topic, message) {
	            callback(topic, message);
	          });
	          resolve(true);
	        }
	      });
	    }).catch(function(reason) {
	      reject(reason);
	    });
	  });
	};

	/**
	 * Publish a message on a specific channel
	 *
	 * @param {String} channel - channel name on which you want to publish a message
	 * @param {Object} message - the message payload
	 * @param {Object} message - the message payload
	 * @return promise containing true if the
	 */
	MqttClient.prototype.publish = function (channel, message, opts) {
	  var parent = this;
	  // Publish message
	  return new Promise(function (resolve, reject) {
	    parent._connect().then(function(client) {
	      client.publish(parent._topicFor(channel), new Buffer(message), merge(parent._connectionOpts,opts), function(res) {
	        resolve(true);
	      });
	    }).catch(function(reason) {
	      reject(reason);
	    });
	  });
	};

	/**
	 * Destroy the connection between the mqtt client and broker
	 *
	 * @return a promise containing the result of the operation
	 */
	MqttClient.prototype.disconnect = function () {
	  var parent = this;
	  return new Promise(function (resolve, reject) {
	    if(parent._client === undefined)
	      reject('Invalid connection');
	    else {
	      parent._client.end().then(function (data) {
	        resolve(true);
	      }).catch(function (reason) {
	        reject(reason);
	      });
	    }
	  });
	};

	// ------------ PRIVATE METHODS -------------------

	/**
	 * @private
	 * Establish an mqtt connection with the broker
	 * using configurations retrieved from the endpoint
	 *
	 * @param {Object} opts - connection options
	 * @return a promise containing current connection
	 */
	MqttClient.prototype._connect = function (opts) {
	  opts = merge({}, opts);
	  var connectionParams = this._connectionParams;
	  var parent = this;

	  return new Promise(function (resolve, reject) {
	    if (parent._client !== undefined)
	      resolve(parent._client);
	    else {
	      try {
	        var client = mqtt.connect({
	          host: connectionParams.host,
	          port: connectionParams.protocols.mqtt.port,
	          username: connectionParams.vhost + ':' + connectionParams.username,
	          password: connectionParams.password,
	          clientId: connectionParams.username,
	          connectTimeout: opts.connectTimeout || parent._connectTimeout
	        });
	        client.on('error', function (reason) {
	          reject(reason);
	        });
	        client.on('close', function (reason) {
	          reject(reason);
	        });
	        parent._client = client;
	        resolve(parent._client);
	      } catch(reason) {
	        reject(reason);
	      }
	    }
	  });
	};

	/**
	 * @private
	 * Generate the topic for a specific channel
	 *
	 * @param {String} channel - channel name on which you want to publish a message
	 * @return a string that represents the topic name for that channel
	 */
	MqttClient.prototype._topicFor = function (channel) {
	  return this.deviceId().concat('/',channel);
	};

	module.exports = MqttClient;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	var MqttClient = __webpack_require__(116),
	  url = __webpack_require__(14),
	  xtend = __webpack_require__(138),
	  protocols = {},
	  protocolList = [];

	if ('browser' !== process.title) {
	  protocols.mqtt = __webpack_require__(139);
	  protocols.tcp = __webpack_require__(139);
	  protocols.ssl = __webpack_require__(115);
	  protocols.tls = __webpack_require__(115);
	  protocols.mqtts = __webpack_require__(115);
	}

	protocols.ws = __webpack_require__(140);
	protocols.wss = __webpack_require__(140);

	protocolList = [
	  'mqtt',
	  'mqtts',
	  'ws',
	  'wss'
	];


	/**
	 * Parse the auth attribute and merge username and password in the options object.
	 *
	 * @param {Object} [opts] option object
	 */
	function parseAuthOptions (opts) {
	  var matches;
	  if (opts.auth) {
	    matches = opts.auth.match(/^(.+):(.+)$/);
	    if (matches) {
	      opts.username = matches[1];
	      opts.password = matches[2];
	    } else {
	      opts.username = opts.auth;
	    }
	  }
	}

	/**
	 * connect - connect to an MQTT broker.
	 *
	 * @param {String} [brokerUrl] - url of the broker, optional
	 * @param {Object} opts - see MqttClient#constructor
	 */
	function connect (brokerUrl, opts) {

	  if (('object' === typeof brokerUrl) && !opts) {
	    opts = brokerUrl;
	    brokerUrl = null;
	  }

	  opts = opts || {};

	  if (brokerUrl) {
	    opts = xtend(url.parse(brokerUrl, true), opts);
	    opts.protocol = opts.protocol.replace(/\:$/, '');
	  }

	  // merge in the auth options if supplied
	  parseAuthOptions(opts);

	  // support clientId passed in the query string of the url
	  if (opts.query && 'string' === typeof opts.query.clientId) {
	    opts.clientId = opts.query.clientId;
	  }

	  if (opts.cert && opts.key) {
	    if (opts.protocol) {
	      if (-1 === ['mqtts', 'wss'].indexOf(opts.protocol)) {
	        /*
	         * jshint and eslint
	         * complains that break from default cannot be reached after throw
	         * it is a foced exit from a control structure
	         * maybe add a check after switch to see if it went through default
	         * and then throw the error
	        */
	        /*jshint -W027*/
	        /*eslint no-unreachable:1*/
	        switch (opts.protocol) {
	          case 'mqtt':
	            opts.protocol = 'mqtts';
	            break;
	          case 'ws':
	            opts.protocol = 'wss';
	            break;
	          default:
	            throw new Error('Unknown protocol for secure conenction: "' + opts.protocol + '"!');
	            break;
	        }
	        /*eslint no-unreachable:0*/
	        /*jshint +W027*/
	      }
	    } else {
	      // don't know what protocol he want to use, mqtts or wss
	      throw new Error('Missing secure protocol key');
	    }
	  }

	  if (!protocols[opts.protocol]) {
	    opts.protocol = protocolList.filter(function (key) {
	      return 'function' === typeof protocols[key];
	    })[0];
	  }

	  if (false === opts.clean && !opts.clientId) {
	    throw new Error('Missing clientId for unclean clients');
	  }


	  function wrapper (client) {
	    if (opts.servers) {
	      if (!client._reconnectCount || client._reconnectCount === opts.servers.length) {
	        client._reconnectCount = 0;
	      }

	      opts.host = opts.servers[client._reconnectCount].host;
	      opts.port = opts.servers[client._reconnectCount].port;

	      client._reconnectCount++;
	    }

	    return protocols[opts.protocol](client, opts);
	  }

	  return new MqttClient(wrapper, opts);
	}

	module.exports = connect;
	module.exports.connect = connect;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var tls = __webpack_require__(74);

	function buildBuilder (mqttClient, opts) {
	  var connection;
	  opts.port = opts.port || 8883;
	  opts.host = opts.hostname || opts.host || 'localhost';

	  /**
	   * this should be further investigated
	   * the result is opts.rejectUnauthorized = opts.rejectUnauthorized
	   * do you want to check for undefined and set it to false default ?
	   */
	  /*jshint ignore:start */
	  opts.rejectUnauthorized = !(false === opts.rejectUnauthorized);
	  /*jshint ignore:end */

	  connection = tls.connect(opts);
	  /*eslint no-use-before-define: [2, "nofunc"]*/
	  connection.on('secureConnect', function () {
	    if (opts.rejectUnauthorized && !connection.authorized) {
	      connection.emit('error', new Error('TLS not authorized'));
	    } else {
	      connection.removeListener('error', handleTLSerrors);
	    }
	  });

	  /*
	   * to comply with strict rules, a function must be
	   * declared before it can be used
	   * so i moved it has to be  moved before its first call
	   * later on maybe we can move all of them to the top of the file
	   * for now i just suppressed the warning
	   */
	  /*jshint latedef:false*/
	  function handleTLSerrors (err) {
	    // How can I get verify this error is a tls error?
	    if (opts.rejectUnauthorized) {
	      mqttClient.emit('error', err);
	    }

	    // close this connection to match the behaviour of net
	    // otherwise all we get is an error from the connection
	    // and close event doesn't fire. This is a work around
	    // to enable the reconnect code to work the same as with
	    // net.createConnection
	    connection.end();
	  }
	  /*jshint latedef:false*/

	  connection.on('error', handleTLSerrors);
	  return connection;
	}

	module.exports = buildBuilder;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {'use strict';
	/**
	 * Module dependencies
	 */
	/*global setImmediate:true*/
	var events = __webpack_require__(40),
	  Store = __webpack_require__(131),
	  eos = __webpack_require__(135),
	  mqttPacket = __webpack_require__(117),
	  Writable = __webpack_require__(132).Writable,
	  inherits = __webpack_require__(123),
	  setImmediate = global.setImmediate || function (callback) {
	    // works in node v0.8
	    process.nextTick(callback);
	  },
	  defaultConnectOptions = {
	    keepalive: 10,
	    protocolId: 'MQTT',
	    protocolVersion: 4,
	    reconnectPeriod: 1000,
	    connectTimeout: 30 * 1000,
	    clean: true
	  };

	function defaultId () {
	  return 'mqttjs_' + Math.random().toString(16).substr(2, 8);
	}

	function sendPacket (client, packet, cb) {
	  try {
	    var buf = mqttPacket.generate(packet);
	    if (!client.stream.write(buf) && cb) {
	      client.stream.once('drain', cb);
	    } else if (cb) {
	      cb();
	    }
	  } catch (err) {
	    if (cb) {
	      cb(err);
	    } else {
	      client.emit('error', err);
	    }
	  }
	}

	function storeAndSend (client, packet, cb) {
	  client.outgoingStore.put(packet, function storedPacket (err) {
	    if (err) {
	      return cb && cb(err);
	    }
	    sendPacket(client, packet, cb);
	  });
	}

	function nop () {}

	/**
	 * MqttClient constructor
	 *
	 * @param {Stream} stream - stream
	 * @param {Object} [options] - connection options
	 * (see Connection#connect)
	 */
	function MqttClient (streamBuilder, options) {
	  var k,
	    that = this;

	  if (!(this instanceof MqttClient)) {
	    return new MqttClient(streamBuilder, options);
	  }

	  this.options = options || {};

	  // Defaults
	  for (k in defaultConnectOptions) {
	    if ('undefined' === typeof this.options[k]) {
	      this.options[k] = defaultConnectOptions[k];
	    } else {
	      this.options[k] = options[k];
	    }
	  }

	  this.options.clientId = this.options.clientId || defaultId();

	  this.streamBuilder = streamBuilder;

	  // Inflight message storages
	  this.outgoingStore = this.options.outgoingStore || new Store();
	  this.incomingStore = this.options.incomingStore || new Store();

	  // Ping timer, setup in _setupPingTimer
	  this.pingTimer = null;
	  // Is the client connected?
	  this.connected = false;
	  // Are we disconnecting?
	  this.disconnecting = false;
	  // Packet queue
	  this.queue = [];
	  // Are we intentionally disconnecting?
	  this.disconnecting = false;
	  // connack timer
	  this.connackTimer = null;
	  // Reconnect timer
	  this.reconnectTimer = null;
	  // MessageIDs starting with 1
	  this.nextId = Math.floor(Math.random() * 65535);

	  // Inflight callbacks
	  this.outgoing = {};

	  // Mark connected on connect
	  this.on('connect', function () {
	    this.connected = true;
	  });

	  // Mark disconnected on stream close
	  this.on('close', function () {
	    this.connected = false;
	  });

	  // Setup ping timer
	  this.on('connect', this._setupPingTimer);

	  // Send queued packets
	  this.on('connect', function () {
	    var queue = this.queue;

	    function deliver () {
	      var entry = queue.shift(),
	        packet = null;

	      if (!entry) {
	        return;
	      }

	      packet = entry.packet;

	      that._sendPacket(
	        packet,
	        function (err) {
	          if (entry.cb) {
	            entry.cb(err);
	          }
	          deliver();
	        }
	      );
	    }

	    deliver();
	  });


	  // Clear ping timer
	  this.on('close', function () {
	    if (null !== that.pingTimer) {
	      clearInterval(that.pingTimer);
	      that.pingTimer = null;
	    }
	  });

	  // Setup reconnect timer on disconnect
	  this.on('close', this._setupReconnect);

	  events.EventEmitter.call(this);

	  this._setupStream();
	}
	inherits(MqttClient, events.EventEmitter);

	/**
	 * setup the event handlers in the inner stream.
	 *
	 * @api private
	 */
	MqttClient.prototype._setupStream = function () {
	  var connectPacket,
	    that = this,
	    writable = new Writable(),
	    parser = mqttPacket.parser(this.options),
	    completeParse = null,
	    outStore = null,
	    packets = [];

	  this._clearReconnect();

	  this.stream = this.streamBuilder(this);

	  parser.on('packet', function (packet) {
	    packets.push(packet);
	  });

	  function process () {
	    var packet = packets.shift(),
	      done = completeParse;
	    if (packet) {
	      that._handlePacket(packet, process);
	    } else {
	      completeParse = null;
	      done();
	    }
	  }

	  writable._write = function (buf, enc, done) {
	    completeParse = done;
	    parser.parse(buf);
	    process();
	  };

	  this.stream.pipe(writable);

	  // Suppress connection errors
	  this.stream.on('error', nop);

	  // Echo stream close
	  eos(this.stream, this.emit.bind(this, 'close'));

	  // Send a connect packet
	  connectPacket = Object.create(this.options);
	  connectPacket.cmd = 'connect';
	  // avoid message queue
	  sendPacket(this, connectPacket);

	  // Echo connection errors
	  parser.on('error', this.emit.bind(this, 'error'));

	  outStore = this.outgoingStore.createStream();

	  // Control of stored messages
	  outStore.once('readable', function () {
	      function storeDeliver () {
	        var packet = outStore.read(1);
	        if (!packet) {
	          return;
	        }
	        // Avoid unnecesary stream read operations when disconnected
	        if (!that.disconnecting && !that.reconnectTimer && (0 < that.options.reconnectPeriod)) {
	          outStore.read(0);
	          // Ensure that the next message will only be read after callback is issued
	          that.outgoing[packet.messageId] = function () {
	            storeDeliver();
	          };
	          that._sendPacket(packet);
	        } else {
	          outStore.close();
	        }
	      }
	      storeDeliver();
	    })
	    .on('error', this.emit.bind(this, 'error'));

	  this.connackTimer = setTimeout(function () {
	    that._cleanUp(true);
	  }, this.options.connectTimeout);
	};

	MqttClient.prototype._handlePacket = function (packet, done) {
	  switch (packet.cmd) {
	    case 'publish':
	      this._handlePublish(packet, done);
	      break;
	    case 'puback':
	    case 'pubrec':
	    case 'pubcomp':
	    case 'suback':
	    case 'unsuback':
	      this._handleAck(packet);
	      done();
	      break;
	    case 'pubrel':
	      this._handlePubrel(packet, done);
	      break;
	    case 'connack':
	      this._handleConnack(packet);
	      done();
	      break;
	    case 'pingresp':
	      this._handlePingresp(packet);
	      done();
	      break;
	    default:
	      // do nothing
	      // maybe we should do an error handling
	      // or just log it
	      break;
	  }
	};

	MqttClient.prototype._checkDisconnecting = function (callback) {
	  if (this.disconnecting) {
	    if (callback) {
	      callback(new Error('client disconnecting'));
	    } else {
	      this.emit(new Error('client disconnecting'));
	    }
	  }
	  return this.disconnecting;
	};

	/**
	 * publish - publish <message> to <topic>
	 *
	 * @param {String} topic - topic to publish to
	 * @param {String, Buffer} message - message to publish
	 * @param {Object} [opts] - publish options, includes:
	 *    {Number} qos - qos level to publish on
	 *    {Boolean} retain - whether or not to retain the message
	 * @param {Function} [callback] - function(err){}
	 *    called when publish succeeds or fails
	 * @returns {MqttClient} this - for chaining
	 * @api public
	 *
	 * @example client.publish('topic', 'message');
	 * @example
	 *     client.publish('topic', 'message', {qos: 1, retain: true});
	 * @example client.publish('topic', 'message', console.log);
	 */
	MqttClient.prototype.publish = function (topic, message, opts, callback) {
	  var packet;

	  // .publish(topic, payload, cb);
	  if ('function' === typeof opts) {
	    callback = opts;
	    opts = null;
	  }

	  // Default opts
	  if (!opts) {
	    opts = {qos: 0, retain: false};
	  }

	  if (this._checkDisconnecting(callback)) {
	    return this;
	  }

	  callback = callback || nop;

	  packet = {
	    cmd: 'publish',
	    topic: topic,
	    payload: message,
	    qos: opts.qos,
	    retain: opts.retain,
	    messageId: this._nextId()
	  };

	  switch (opts.qos) {
	    case 1:
	    case 2:
	      // Add to callbacks
	      this.outgoing[packet.messageId] = callback;
	      this._sendPacket(packet);
	      break;
	    default:
	      this._sendPacket(packet, callback);
	      break;
	  }

	  return this;
	};

	/**
	 * subscribe - subscribe to <topic>
	 *
	 * @param {String, Array, Object} topic - topic(s) to subscribe to, supports objects in the form {'topic': qos}
	 * @param {Object} [opts] - optional subscription options, includes:
	 *    {Number} qos - subscribe qos level
	 * @param {Function} [callback] - function(err, granted){} where:
	 *    {Error} err - subscription error (none at the moment!)
	 *    {Array} granted - array of {topic: 't', qos: 0}
	 * @returns {MqttClient} this - for chaining
	 * @api public
	 * @example client.subscribe('topic');
	 * @example client.subscribe('topic', {qos: 1});
	 * @example client.subscribe({'topic': 0, 'topic2': 1}, console.log);
	 * @example client.subscribe('topic', console.log);
	 */
	MqttClient.prototype.subscribe = function () {
	  var packet,
	    args = Array.prototype.slice.call(arguments),
	    subs = [],
	    obj = args.shift(),
	    callback = args.pop() || nop,
	    opts = args.pop();

	  if ('string' === typeof obj) {
	    obj = [obj];
	  }

	  if (this._checkDisconnecting(callback)) {
	    return this;
	  }

	  if ('function' !== typeof callback) {
	    opts = callback;
	    callback = nop;
	  }

	  if (!opts) {
	    opts = { qos: 0 };
	  }

	  if (Array.isArray(obj)) {
	    obj.forEach(function (topic) {
	      subs.push({
	        topic: topic,
	        qos: opts.qos
	      });
	    });
	  } else {
	    Object
	      .keys(obj)
	      .forEach(function (k) {
	        subs.push({
	          topic: k,
	          qos: obj[k]
	        });
	      });
	  }

	  packet = {
	    cmd: 'subscribe',
	    subscriptions: subs,
	    qos: 1,
	    retain: false,
	    dup: false,
	    messageId: this._nextId()
	  };

	  this.outgoing[packet.messageId] = callback;

	  this._sendPacket(packet);

	  return this;
	};

	/**
	 * unsubscribe - unsubscribe from topic(s)
	 *
	 * @param {String, Array} topic - topics to unsubscribe from
	 * @param {Function} [callback] - callback fired on unsuback
	 * @returns {MqttClient} this - for chaining
	 * @api public
	 * @example client.unsubscribe('topic');
	 * @example client.unsubscribe('topic', console.log);
	 */
	MqttClient.prototype.unsubscribe = function (topic, callback) {
	  var packet = {
	    cmd: 'unsubscribe',
	    qos: 1,
	    messageId: this._nextId()
	  };

	  callback = callback || nop;

	  if (this._checkDisconnecting(callback)) {
	    return this;
	  }

	  if ('string' === typeof topic) {
	    packet.unsubscriptions = [topic];
	  } else if ('object' === typeof topic && topic.length) {
	    packet.unsubscriptions = topic;
	  }

	  this.outgoing[packet.messageId] = callback;

	  this._sendPacket(packet);

	  return this;
	};

	/**
	 * end - close connection
	 *
	 * @returns {MqttClient} this - for chaining
	 * @api public
	 */
	MqttClient.prototype.end = function (cb) {
	  var that = this;

	  function closeStores () {
	    that.incomingStore.close(function () {
	      that.outgoingStore.close(cb);
	    });
	  }

	  function finish () {
	    that._cleanUp(false, closeStores);
	  }

	  if (this.disconnecting) {
	    return true;
	  }

	  this.disconnecting = true;

	  if (0 < Object.keys(this.outgoing).length) {
	    // wait 10ms, just to be sure we received all of it
	    this.once('outgoingEmpty', setTimeout.bind(null, finish, 10));
	  } else {
	    finish();
	  }

	  return this;
	};

	/**
	 * _reconnect - implement reconnection
	 * @api privateish
	 */
	MqttClient.prototype._reconnect = function () {
	  this.emit('reconnect');
	  this._setupStream();
	};

	/**
	 * _setupReconnect - setup reconnect timer
	 */
	MqttClient.prototype._setupReconnect = function () {
	  var that = this;

	  if (!that.disconnecting && !that.reconnectTimer && (0 < that.options.reconnectPeriod)) {
	    this.emit('offline');
	    that.reconnectTimer = setInterval(function () {
	      that._reconnect();
	    }, that.options.reconnectPeriod);
	  }
	};

	/**
	 * _clearReconnect - clear the reconnect timer
	 */
	MqttClient.prototype._clearReconnect = function () {
	  if (this.reconnectTimer) {
	    clearInterval(this.reconnectTimer);
	    this.reconnectTimer = false;
	  }
	};


	/**
	 * _cleanUp - clean up on connection end
	 * @api private
	 */
	MqttClient.prototype._cleanUp = function (forced, done) {
	  if (done) {
	    this.stream.on('close', done);
	  }

	  if (forced) {
	    this.stream.destroy();
	  } else {
	    this._sendPacket(
	      { cmd: 'disconnect' },
	      setImmediate.bind(
	        null,
	        this.stream.end.bind(this.stream)
	      )
	    );
	  }

	  this._clearReconnect();

	  if (null !== this.pingTimer) {
	    clearInterval(this.pingTimer);
	    this.pingTimer = null;
	  }
	};

	/**
	 * _sendPacket - send or queue a packet
	 * @param {String} type - packet type (see `protocol`)
	 * @param {Object} packet - packet options
	 * @param {Function} cb - callback when the packet is sent
	 * @api private
	 */
	MqttClient.prototype._sendPacket = function (packet, cb) {
	  if (!this.connected) {
	    return this.queue.push({ packet: packet, cb: cb });
	  }

	  switch (packet.qos) {
	    case 2:
	    case 1:
	      storeAndSend(this, packet, cb);
	      break;
	    /**
	     * no need of case here since it will be caught by default
	     * and jshint comply that before default it must be a break
	     * anyway it will result in -1 evaluation
	     */
	    case 0:
	      /* falls through */
	    default:
	      sendPacket(this, packet, cb);
	      break;
	  }
	};

	/**
	 * _setupPingTimer - setup the ping timer
	 *
	 * @api private
	 */
	MqttClient.prototype._setupPingTimer = function () {
	  var that = this;

	  if (!this.pingTimer && this.options.keepalive) {
	    this.pingResp = true;
	    this.pingTimer = setInterval(function () {
	      that._checkPing();
	    }, this.options.keepalive * 1000);
	  }
	};

	/**
	 * _checkPing - check if a pingresp has come back, and ping the server again
	 *
	 * @api private
	 */
	MqttClient.prototype._checkPing = function () {
	  if (this.pingResp) {
	    this.pingResp = false;
	    this._sendPacket({ cmd: 'pingreq' });
	  } else {
	    // do a forced cleanup since socket will be in bad shape
	    this._cleanUp(true);
	  }
	};

	/**
	 * _handlePingresp - handle a pingresp
	 *
	 * @api private
	 */
	MqttClient.prototype._handlePingresp = function () {
	  this.pingResp = true;
	};

	/**
	 * _handleConnack
	 *
	 * @param {Object} packet
	 * @api private
	 */

	MqttClient.prototype._handleConnack = function (packet) {
	  var rc = packet.returnCode,
	    // TODO: move to protocol
	    errors = [
	      '',
	      'Unacceptable protocol version',
	      'Identifier rejected',
	      'Server unavailable',
	      'Bad username or password',
	      'Not authorized'
	    ];

	  clearTimeout(this.connackTimer);

	  if (0 === rc) {
	    this.emit('connect');
	  } else if (0 < rc) {
	    this.emit('error',
	        new Error('Connection refused: ' + errors[rc]));
	  }
	};

	/**
	 * _handlePublish
	 *
	 * @param {Object} packet
	 * @api private
	 */
	/*
	those late 2 case should be rewrite to comply with coding style:

	case 1:
	case 0:
	  // do not wait sending a puback
	  // no callback passed
	  if (1 === qos) {
	    this._sendPacket({
	      cmd: 'puback',
	      messageId: mid
	    });
	  }
	  // emit the message event for both qos 1 and 0
	  this.emit('message', topic, message, packet);
	  this.handleMessage(packet, done);
	  break;
	default:
	  // do nothing but every switch mus have a default
	  // log or throw an error about unknown qos
	  break;

	for now i just suppressed the warnings
	*/
	MqttClient.prototype._handlePublish = function (packet, done) {
	  var topic = packet.topic.toString(),
	    message = packet.payload,
	    qos = packet.qos,
	    mid = packet.messageId,
	    that = this;

	  switch (qos) {
	    case 2:
	      this.incomingStore.put(packet, function () {
	        that._sendPacket({cmd: 'pubrec', messageId: mid}, done);
	      });
	      break;
	    case 1:
	      // do not wait sending a puback
	      // no callback passed
	      this._sendPacket({
	        cmd: 'puback',
	        messageId: mid
	      });
	      /* falls through */
	    case 0:
	      // emit the message event for both qos 1 and 0
	      this.emit('message', topic, message, packet);
	      this.handleMessage(packet, done);
	      break;
	    default:
	      // do nothing
	      // log or throw an error about unknown qos
	      break;
	  }
	};

	/**
	 * Handle messages with backpressure support, one at a time.
	 * Override at will.
	 *
	 * @param Packet packet the packet
	 * @param Function callback call when finished
	 * @api public
	 */
	MqttClient.prototype.handleMessage = function (packet, callback) {
	  callback();
	};

	/**
	 * _handleAck
	 *
	 * @param {Object} packet
	 * @api private
	 */

	MqttClient.prototype._handleAck = function (packet) {
	  var mid = packet.messageId,
	    type = packet.cmd,
	    response = null,
	    cb = this.outgoing[mid],
	    that = this;

	  if (!cb) {
	    // Server sent an ack in error, ignore it.
	    return;
	  }

	  // Process
	  switch (type) {
	    case 'pubcomp':
	      // same thing as puback for QoS 2
	    case 'puback':
	      // Callback - we're done
	      delete this.outgoing[mid];
	      this.outgoingStore.del(packet, cb);
	      break;
	    case 'pubrec':
	      response = {
	        cmd: 'pubrel',
	        qos: 2,
	        messageId: mid
	      };

	      this._sendPacket(response);
	      break;
	    case 'suback':
	      delete this.outgoing[mid];
	      this.outgoingStore.del(packet, function (err, original) {
	        var i,
	          origSubs = original.subscriptions,
	          granted = packet.granted;

	        if (err) {
	          // missing packet, what should we do?
	          return that.emit('error', err);
	        }

	        for (i = 0; i < granted.length; i += 1) {
	          origSubs[i].qos = granted[i];
	        }

	        cb(null, origSubs);
	      });
	      break;
	    case 'unsuback':
	      delete this.outgoing[mid];
	      this.outgoingStore.del(packet, cb);
	      break;
	    default:
	      that.emit('error', new Error('unrecognized packet type'));
	  }

	  if (this.disconnecting &&
	      0 === Object.keys(this.outgoing).length) {
	    this.emit('outgoingEmpty');
	  }
	};

	/**
	 * _handlePubrel
	 *
	 * @param {Object} packet
	 * @api private
	 */

	MqttClient.prototype._handlePubrel = function (packet, callback) {
	  var mid = packet.messageId,
	    that = this;

	  that.incomingStore.get(packet, function (err, pub) {
	    if (err) {
	      return that.emit('error', err);
	    }

	    if ('pubrel' !== pub.cmd) {
	      that.emit('message', pub.topic, pub.payload, pub);
	      that.incomingStore.put(packet);
	    }

	    that._sendPacket({cmd: 'pubcomp', messageId: mid}, callback);
	  });
	};

	/**
	 * _nextId
	 */
	MqttClient.prototype._nextId = function () {
	  var id = this.nextId++;
	  // Ensure 16 bit unsigned int:
	  if (65535 === id) {
	    this.nextId = 1;
	  }
	  return id;
	};

	module.exports = MqttClient;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(6)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';

	exports.parser          = __webpack_require__(118)
	exports.generate        = __webpack_require__(130)


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	
	var bl        = __webpack_require__(119)
	  , inherits  = __webpack_require__(123)
	  , EE        = __webpack_require__(40).EventEmitter
	  , Packet    = __webpack_require__(128)
	  , constants = __webpack_require__(129)

	function Parser() {
	  if (!(this instanceof Parser)) {
	    return new Parser()
	  }

	  this._list = bl()
	  this._newPacket()

	  this._states = [
	      '_parseHeader'
	    , '_parseLength'
	    , '_parsePayload'
	    , '_newPacket'
	  ]
	  this._stateCounter = 0
	}

	inherits(Parser, EE)

	Parser.prototype._newPacket = function () {
	  if (this.packet) {
	    this._list.consume(this.packet.length)
	    this.emit('packet', this.packet)
	  }

	  this.packet = new Packet()

	  return true
	}

	Parser.prototype.parse = function (buf) {
	  this._list.append(buf)

	  while ((this.packet.length != -1 || this._list.length > 0) &&
	         this[this._states[this._stateCounter]]()) {
	    this._stateCounter++

	    if (this._stateCounter >= this._states.length) {
	      this._stateCounter = 0
	    }
	  }

	  return this._list.length
	}

	Parser.prototype._parseHeader = function () {

	  // there is at least one byte in the buffer
	  var zero = this._list.readUInt8(0)
	  this.packet.cmd = constants.types[zero >> constants.CMD_SHIFT]
	  this.packet.retain = (zero & constants.RETAIN_MASK) !== 0
	  this.packet.qos = (zero >> constants.QOS_SHIFT) & constants.QOS_MASK
	  this.packet.dup = (zero & constants.DUP_MASK) !== 0

	  this._list.consume(1)

	  return true
	}


	Parser.prototype._parseLength = function () {
	  // there is at least one byte in the list
	  var bytes    = 0
	    , mul      = 1
	    , length   = 0
	    , result   = true
	    , current

	  while (bytes < 5) {
	    current = this._list.readUInt8(bytes++)
	    length += mul * (current & constants.LENGTH_MASK)
	    mul *= 0x80

	    if ((current & constants.LENGTH_FIN_MASK) === 0) {
	      break
	    }

	    if (this._list.length <= bytes) {
	      result = false
	      break
	    }
	  }

	  if (result) {
	    this.packet.length = length
	    this._list.consume(bytes)
	  }

	  return result
	}

	Parser.prototype._parsePayload = function () {
	  var result = false

	  // Do we have a payload? Do we have enough data to complete the payload?
	  // PINGs have no payload
	  if (this.packet.length === 0 || this._list.length >= this.packet.length) {

	    this._pos = 0

	    switch (this.packet.cmd) {
	      case 'connect':
	        this._parseConnect()
	        break
	      case 'connack':
	        this._parseConnack()
	        break
	      case 'publish':
	        this._parsePublish()
	        break
	      case 'puback':
	      case 'pubrec':
	      case 'pubrel':
	      case 'pubcomp':
	        this._parseMessageId()
	        break
	      case 'subscribe':
	        this._parseSubscribe()
	        break
	      case 'suback':
	        this._parseSuback()
	        break
	      case 'unsubscribe':
	        this._parseUnsubscribe()
	        break
	      case 'unsuback':
	        this._parseUnsuback()
	        break
	      case 'pingreq':
	      case 'pingresp':
	      case 'disconnect':
	        // these are empty, nothing to do
	        break
	      default:
	        this.emit('error', new Error('not supported'))
	    }

	    result = true
	  }

	  return result
	}

	Parser.prototype._parseConnect = function () {
	  var protocolId // constants id
	    , clientId // Client id
	    , topic // Will topic
	    , payload // Will payload
	    , password // Password
	    , username // Username
	    , flags = {}
	    , packet = this.packet

	  // Parse constants id
	  protocolId = this._parseString()
	  if (protocolId === null)
	    return this.emit('error', new Error('cannot parse protocol id'))

	  packet.protocolId = protocolId

	  // Parse constants version number
	  if(this._pos > this._list.length)
	    return this.emit('error', new Error('packet too short'))

	  packet.protocolVersion = this._list.readUInt8(this._pos)
	  this._pos++

	  // Parse connect flags
	  flags.username  = (this._list.readUInt8(this._pos) & constants.USERNAME_MASK)
	  flags.password  = (this._list.readUInt8(this._pos) & constants.PASSWORD_MASK)
	  flags.will      = (this._list.readUInt8(this._pos) & constants.WILL_FLAG_MASK)

	  if (flags.will) {
	    packet.will         = {}
	    packet.will.retain  = (this._list.readUInt8(this._pos) & constants.WILL_RETAIN_MASK) !== 0
	    packet.will.qos     = (this._list.readUInt8(this._pos) &
	                          constants.WILL_QOS_MASK) >> constants.WILL_QOS_SHIFT
	  }

	  packet.clean = (this._list.readUInt8(this._pos) & constants.CLEAN_SESSION_MASK) !== 0
	  this._pos++

	  // Parse keepalive
	  packet.keepalive = this._parseNum()
	  if(packet.keepalive === -1)
	    return this.emit('error', new Error('packet too short'))

	  // Parse client ID
	  clientId = this._parseString()
	  if(clientId === null)
	    return this.emit('error', new Error('packet too short'))
	  packet.clientId = clientId

	  if (flags.will) {
	    // Parse will topic
	    topic = this._parseString()
	    if (topic === null)
	      return this.emit('error', new Error('cannot parse will topic'))
	    packet.will.topic = topic

	    // Parse will payload
	    payload = this._parseBuffer()
	    if (payload === null)
	      return this.emit('error', new Error('cannot parse will payload'))
	    packet.will.payload = payload
	  }

	  // Parse username
	  if (flags.username) {
	    username = this._parseString()
	    if(username === null)
	      return this.emit('error', new Error('cannot parse username'))
	    packet.username = username
	  }

	  // Parse password
	  if(flags.password) {
	    password = this._parseBuffer()
	    if(password === null)
	      return this.emit('error', new Error('cannot parse username'))
	    packet.password = password
	  }

	  return packet
	}

	Parser.prototype._parseConnack = function () {
	  var packet = this.packet
	  packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & constants.SESSIONPRESENT_MASK)
	  packet.returnCode = this._list.readUInt8(this._pos)
	  if(packet.returnCode === -1)
	    return this.emit('error', new Error('cannot parse return code'))
	}

	Parser.prototype._parsePublish = function () {
	  var packet = this.packet
	  packet.topic = this._parseString()

	  if(packet.topic === null)
	    return this.emit('error', new Error('cannot parse topic'))

	  // Parse message ID
	  if (packet.qos > 0) {
	    if (!this._parseMessageId()) { return }
	  }

	  packet.payload = this._list.slice(this._pos, packet.length)
	}

	Parser.prototype._parseSubscribe = function() {
	  var packet = this.packet
	    , topic
	    , qos

	  if (packet.qos != 1) {
	    return this.emit('error', new Error('wrong subscribe header'))
	  }

	  packet.subscriptions = []

	  if (!this._parseMessageId()) { return }

	  while (this._pos < packet.length) {

	    // Parse topic
	    topic = this._parseString()
	    if (topic === null)
	      return this.emit('error', new Error('Parse error - cannot parse topic'))

	    qos = this._list.readUInt8(this._pos++)

	    // Push pair to subscriptions
	    packet.subscriptions.push({ topic: topic, qos: qos });
	  }
	}

	Parser.prototype._parseSuback = function() {
	  this.packet.granted = []

	  if (!this._parseMessageId()) { return }

	  // Parse granted QoSes
	  while (this._pos < this.packet.length) {
	    this.packet.granted.push(this._list.readUInt8(this._pos++));
	  }
	}

	Parser.prototype._parseUnsubscribe = function() {
	  var packet = this.packet

	  packet.unsubscriptions = []

	  // Parse message ID
	  if (!this._parseMessageId()) { return }

	  while (this._pos < packet.length) {
	    var topic;

	    // Parse topic
	    topic = this._parseString()
	    if (topic === null)
	      return this.emit('error', new Error('cannot parse topic'))

	    // Push topic to unsubscriptions
	    packet.unsubscriptions.push(topic);
	  }
	}

	Parser.prototype._parseUnsuback = function() {
	  if (!this._parseMessageId())
	    return this.emit('error', new Error('cannot parse message id'))
	}

	Parser.prototype._parseMessageId = function() {
	  var packet = this.packet

	  packet.messageId = this._parseNum()

	  if(packet.messageId === null) {
	    this.emit('error', new Error('cannot parse message id'))
	    return false
	  }

	  return true
	}

	Parser.prototype._parseString = function(maybeBuffer) {
	  var length = this._parseNum()
	    , result

	  if(length === -1 || length + this._pos > this._list.length)
	    return null

	  result = this._list.toString('utf8', this._pos, this._pos + length)

	  this._pos += length

	  return result
	}

	Parser.prototype._parseBuffer = function() {
	  var length = this._parseNum()
	    , result

	  if(length === -1 || length + this._pos > this._list.length)
	    return null

	  result = this._list.slice(this._pos, this._pos + length)

	  this._pos += length

	  return result
	}

	Parser.prototype._parseNum = function() {
	  if(2 > this._pos + this._list.length) return -1

	  var result = this._list.readUInt16BE(this._pos)
	  this._pos += 2
	  return result
	}

	module.exports = Parser


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var DuplexStream = __webpack_require__(120)
	  , util         = __webpack_require__(27)

	function BufferList (callback) {
	  if (!(this instanceof BufferList))
	    return new BufferList(callback)

	  this._bufs  = []
	  this.length = 0

	  if (typeof callback == 'function') {
	    this._callback = callback

	    var piper = function (err) {
	      if (this._callback) {
	        this._callback(err)
	        this._callback = null
	      }
	    }.bind(this)

	    this.on('pipe', function (src) {
	      src.on('error', piper)
	    })
	    this.on('unpipe', function (src) {
	      src.removeListener('error', piper)
	    })
	  }
	  else if (Buffer.isBuffer(callback))
	    this.append(callback)
	  else if (Array.isArray(callback)) {
	    callback.forEach(function (b) {
	      Buffer.isBuffer(b) && this.append(b)
	    }.bind(this))
	  }

	  DuplexStream.call(this)
	}

	util.inherits(BufferList, DuplexStream)

	BufferList.prototype._offset = function (offset) {
	  var tot = 0, i = 0, _t
	  for (; i < this._bufs.length; i++) {
	    _t = tot + this._bufs[i].length
	    if (offset < _t)
	      return [ i, offset - tot ]
	    tot = _t
	  }
	}

	BufferList.prototype.append = function (buf) {
	  var isBuffer = Buffer.isBuffer(buf) ||
	                 buf instanceof BufferList

	  this._bufs.push(isBuffer ? buf : new Buffer(buf))
	  this.length += buf.length
	  return this
	}

	BufferList.prototype._write = function (buf, encoding, callback) {
	  this.append(buf)
	  if (callback)
	    callback()
	}

	BufferList.prototype._read = function (size) {
	  if (!this.length)
	    return this.push(null)
	  size = Math.min(size, this.length)
	  this.push(this.slice(0, size))
	  this.consume(size)
	}

	BufferList.prototype.end = function (chunk) {
	  DuplexStream.prototype.end.call(this, chunk)

	  if (this._callback) {
	    this._callback(null, this.slice())
	    this._callback = null
	  }
	}

	BufferList.prototype.get = function (index) {
	  return this.slice(index, index + 1)[0]
	}

	BufferList.prototype.slice = function (start, end) {
	  return this.copy(null, 0, start, end)
	}

	BufferList.prototype.copy = function (dst, dstStart, srcStart, srcEnd) {
	  if (typeof srcStart != 'number' || srcStart < 0)
	    srcStart = 0
	  if (typeof srcEnd != 'number' || srcEnd > this.length)
	    srcEnd = this.length
	  if (srcStart >= this.length)
	    return dst || new Buffer(0)
	  if (srcEnd <= 0)
	    return dst || new Buffer(0)

	  var copy   = !!dst
	    , off    = this._offset(srcStart)
	    , len    = srcEnd - srcStart
	    , bytes  = len
	    , bufoff = (copy && dstStart) || 0
	    , start  = off[1]
	    , l
	    , i

	  // copy/slice everything
	  if (srcStart === 0 && srcEnd == this.length) {
	    if (!copy) // slice, just return a full concat
	      return Buffer.concat(this._bufs)

	    // copy, need to copy individual buffers
	    for (i = 0; i < this._bufs.length; i++) {
	      this._bufs[i].copy(dst, bufoff)
	      bufoff += this._bufs[i].length
	    }

	    return dst
	  }

	  // easy, cheap case where it's a subset of one of the buffers
	  if (bytes <= this._bufs[off[0]].length - start) {
	    return copy
	      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
	      : this._bufs[off[0]].slice(start, start + bytes)
	  }

	  if (!copy) // a slice, we need something to copy in to
	    dst = new Buffer(len)

	  for (i = off[0]; i < this._bufs.length; i++) {
	    l = this._bufs[i].length - start

	    if (bytes > l) {
	      this._bufs[i].copy(dst, bufoff, start)
	    } else {
	      this._bufs[i].copy(dst, bufoff, start, start + bytes)
	      break
	    }

	    bufoff += l
	    bytes -= l

	    if (start)
	      start = 0
	  }

	  return dst
	}

	BufferList.prototype.toString = function (encoding, start, end) {
	  return this.slice(start, end).toString(encoding)
	}

	BufferList.prototype.consume = function (bytes) {
	  while (this._bufs.length) {
	    if (bytes > this._bufs[0].length) {
	      bytes -= this._bufs[0].length
	      this.length -= this._bufs[0].length
	      this._bufs.shift()
	    } else {
	      this._bufs[0] = this._bufs[0].slice(bytes)
	      this.length -= bytes
	      break
	    }
	  }
	  return this
	}

	BufferList.prototype.duplicate = function () {
	  var i = 0
	    , copy = new BufferList()

	  for (; i < this._bufs.length; i++)
	    copy.append(this._bufs[i])

	  return copy
	}

	BufferList.prototype.destroy = function () {
	  this._bufs.length = 0;
	  this.length = 0;
	  this.push(null);
	}

	;(function () {
	  var methods = {
	      'readDoubleBE' : 8
	    , 'readDoubleLE' : 8
	    , 'readFloatBE'  : 4
	    , 'readFloatLE'  : 4
	    , 'readInt32BE'  : 4
	    , 'readInt32LE'  : 4
	    , 'readUInt32BE' : 4
	    , 'readUInt32LE' : 4
	    , 'readInt16BE'  : 2
	    , 'readInt16LE'  : 2
	    , 'readUInt16BE' : 2
	    , 'readUInt16LE' : 2
	    , 'readInt8'     : 1
	    , 'readUInt8'    : 1
	  }

	  for (var m in methods) {
	    (function (m) {
	      BufferList.prototype[m] = function (offset) {
	        return this.slice(offset, offset + methods[m])[m](0)
	      }
	    }(m))
	  }
	}())

	module.exports = BufferList

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(121)


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(122);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	var Readable = __webpack_require__(124);
	var Writable = __webpack_require__(127);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(125);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(2).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(40).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(39);

	/*<replacement>*/
	var util = __webpack_require__(122);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	var StringDecoder;

	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = false;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // In streams that never have any data, and do push(null) right away,
	  // the consumer can miss the 'end' event if they do some I/O before
	  // consuming the stream.  So, we don't emit('end') until some reading
	  // happens.
	  this.calledRead = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(126).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (typeof chunk === 'string' && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null || chunk === undefined) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      // update the buffer info.
	      state.length += state.objectMode ? 1 : chunk.length;
	      if (addToFront) {
	        state.buffer.unshift(chunk);
	      } else {
	        state.reading = false;
	        state.buffer.push(chunk);
	      }

	      if (state.needReadable)
	        emitReadable(stream);

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(126).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (n === null || isNaN(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  var state = this._readableState;
	  state.calledRead = true;
	  var nOrig = n;
	  var ret;

	  if (typeof n !== 'number' || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    ret = null;

	    // In cases where the decoder did not receive enough data
	    // to produce a full chunk, then immediately received an
	    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
	    // howMuchToRead will see this and coerce the amount to
	    // read to zero (because it's looking at the length of the
	    // first <Buffer > in state.buffer), and we'll end up here.
	    //
	    // This can only happen via state.decoder -- no other venue
	    // exists for pushing a zero-length chunk into state.buffer
	    // and triggering this behavior. In this case, we return our
	    // remaining data and end the stream, if appropriate.
	    if (state.length > 0 && state.decoder) {
	      ret = fromList(n, state);
	      state.length -= ret.length;
	    }

	    if (state.length === 0)
	      endReadable(this);

	    return ret;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length - n <= state.highWaterMark)
	    doRead = true;

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading)
	    doRead = false;

	  if (doRead) {
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read called its callback synchronously, then `reading`
	  // will be false, and we need to re-evaluate how much data we
	  // can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we happened to read() exactly the remaining amount in the
	  // buffer, and the EOF has been seen at this point, then make sure
	  // that we emit 'end' on the very next tick.
	  if (state.ended && !state.endEmitted && state.length === 0)
	    endReadable(this);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // if we've ended and we have some data left, then emit
	  // 'readable' now to make sure it gets picked up.
	  if (state.length > 0)
	    emitReadable(stream);
	  else
	    endReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (state.emittedReadable)
	    return;

	  state.emittedReadable = true;
	  if (state.sync)
	    process.nextTick(function() {
	      emitReadable_(stream);
	    });
	  else
	    emitReadable_(stream);
	}

	function emitReadable_(stream) {
	  stream.emit('readable');
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    if (readable !== src) return;
	    cleanup();
	  }

	  function onend() {
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (!dest._writableState || dest._writableState.needDrain)
	      ondrain();
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    // the handler that waits for readable events after all
	    // the data gets sucked out in flow.
	    // This would be easier to follow with a .once() handler
	    // in flow(), but that is too slow.
	    this.on('readable', pipeOnReadable);

	    state.flowing = true;
	    process.nextTick(function() {
	      flow(src);
	    });
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var dest = this;
	    var state = src._readableState;
	    state.awaitDrain--;
	    if (state.awaitDrain === 0)
	      flow(src);
	  };
	}

	function flow(src) {
	  var state = src._readableState;
	  var chunk;
	  state.awaitDrain = 0;

	  function write(dest, i, list) {
	    var written = dest.write(chunk);
	    if (false === written) {
	      state.awaitDrain++;
	    }
	  }

	  while (state.pipesCount && null !== (chunk = src.read())) {

	    if (state.pipesCount === 1)
	      write(state.pipes, 0, null);
	    else
	      forEach(state.pipes, write);

	    src.emit('data', chunk);

	    // if anyone needs a drain, then we have to wait for that.
	    if (state.awaitDrain > 0)
	      return;
	  }

	  // if every destination was unpiped, either before entering this
	  // function, or in the while loop, then stop flowing.
	  //
	  // NB: This is a pretty rare edge case.
	  if (state.pipesCount === 0) {
	    state.flowing = false;

	    // if there were data event listeners added, then switch to old mode.
	    if (EE.listenerCount(src, 'data') > 0)
	      emitDataEvents(src);
	    return;
	  }

	  // at this point, no one needed a drain, so we just ran out of data
	  // on the next readable event, start it over again.
	  state.ranOut = true;
	}

	function pipeOnReadable() {
	  if (this._readableState.ranOut) {
	    this._readableState.ranOut = false;
	    flow(this);
	  }
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data' && !this._readableState.flowing)
	    emitDataEvents(this);

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        this.read(0);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  emitDataEvents(this);
	  this.read(0);
	  this.emit('resume');
	};

	Readable.prototype.pause = function() {
	  emitDataEvents(this, true);
	  this.emit('pause');
	};

	function emitDataEvents(stream, startPaused) {
	  var state = stream._readableState;

	  if (state.flowing) {
	    // https://github.com/isaacs/readable-stream/issues/16
	    throw new Error('Cannot switch to old mode now.');
	  }

	  var paused = startPaused || false;
	  var readable = false;

	  // convert to an old-style stream.
	  stream.readable = true;
	  stream.pipe = Stream.prototype.pipe;
	  stream.on = stream.addListener = Stream.prototype.on;

	  stream.on('readable', function() {
	    readable = true;

	    var c;
	    while (!paused && (null !== (c = stream.read())))
	      stream.emit('data', c);

	    if (c === null) {
	      readable = false;
	      stream._readableState.needReadable = true;
	    }
	  });

	  stream.pause = function() {
	    paused = true;
	    this.emit('pause');
	  };

	  stream.resume = function() {
	    paused = false;
	    if (readable)
	      process.nextTick(function() {
	        stream.emit('readable');
	      });
	    else
	      this.read(0);
	    this.emit('resume');
	  };

	  // now make it start, just in case it hadn't already.
	  stream.emit('readable');
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    //if (state.objectMode && util.isNullOrUndefined(chunk))
	    if (state.objectMode && (chunk === null || chunk === undefined))
	      return;
	    else if (!state.objectMode && (!chunk || !chunk.length))
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (typeof stream[i] === 'function' &&
	        typeof this[i] === 'undefined') {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted && state.calledRead) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(2).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(2).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(122);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	var Stream = __webpack_require__(39);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(121);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (typeof cb !== 'function')
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb))
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);

	  return ret;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      typeof chunk === 'string') {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      cb(er);
	    });
	  else
	    cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished && !state.bufferProcessing && state.buffer.length)
	      clearBuffer(stream, state);

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  cb();
	  if (finished)
	    finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  for (var c = 0; c < state.buffer.length; c++) {
	    var entry = state.buffer[c];
	    var chunk = entry.chunk;
	    var encoding = entry.encoding;
	    var cb = entry.callback;
	    var len = state.objectMode ? 1 : chunk.length;

	    doWrite(stream, state, len, chunk, encoding, cb);

	    // if we didn't call the onwrite immediately, then
	    // it means that we need to wait until it does.
	    // also, that means that the chunk and cb are currently
	    // being processed, so move the buffer counter past them.
	    if (state.writing) {
	      c++;
	      break;
	    }
	  }

	  state.bufferProcessing = false;
	  if (c < state.buffer.length)
	    state.buffer = state.buffer.slice(c);
	  else
	    state.buffer.length = 0;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (typeof chunk !== 'undefined' && chunk !== null)
	    this.write(chunk, encoding);

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    state.finished = true;
	    stream.emit('finish');
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	
	function Packet() {
	  this.cmd = null
	  this.retain = false
	  this.qos = 0
	  this.dup = false
	  this.length = -1
	  this.topic = null
	  this.payload = null
	}

	module.exports = Packet


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* Protocol - protocol constants */

	/* Command code => mnemonic */
	module.exports.types = {
	  0: 'reserved',
	  1: 'connect',
	  2: 'connack',
	  3: 'publish',
	  4: 'puback',
	  5: 'pubrec',
	  6: 'pubrel',
	  7: 'pubcomp',
	  8: 'subscribe',
	  9: 'suback',
	  10: 'unsubscribe',
	  11: 'unsuback',
	  12: 'pingreq',
	  13: 'pingresp',
	  14: 'disconnect',
	  15: 'reserved'
	};

	/* Mnemonic => Command code */
	module.exports.codes = {}
	for(var k in module.exports.types) {
	  var v = module.exports.types[k];
	  module.exports.codes[v] = k;
	}

	/* Header */
	module.exports.CMD_SHIFT = 4;
	module.exports.CMD_MASK = 0xF0;
	module.exports.DUP_MASK = 0x08;
	module.exports.QOS_MASK = 0x03;
	module.exports.QOS_SHIFT = 1;
	module.exports.RETAIN_MASK = 0x01;

	/* Length */
	module.exports.LENGTH_MASK = 0x7F;
	module.exports.LENGTH_FIN_MASK = 0x80;

	/* Connack */
	module.exports.SESSIONPRESENT_MASK = 0x01;

	/* Connect */
	module.exports.USERNAME_MASK = 0x80;
	module.exports.PASSWORD_MASK = 0x40;
	module.exports.WILL_RETAIN_MASK = 0x20;
	module.exports.WILL_QOS_MASK = 0x18;
	module.exports.WILL_QOS_SHIFT = 3;
	module.exports.WILL_FLAG_MASK = 0x04;
	module.exports.CLEAN_SESSION_MASK = 0x02;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	'use strict';

	var protocol = __webpack_require__(129)
	  , empty = new Buffer(0)

	function generate(packet) {

	  switch(packet.cmd) {
	    case 'connect':
	      return connect(packet)
	    case 'connack':
	      return connack(packet)
	    case 'publish':
	      return publish(packet)
	    case 'puback':
	    case 'pubrec':
	    case 'pubrel':
	    case 'pubcomp':
	    case 'unsuback':
	      return confirmation(packet)
	    case 'subscribe':
	      return subscribe(packet)
	    case 'suback':
	      return suback(packet)
	    case 'unsubscribe':
	      return unsubscribe(packet)
	    case 'pingreq':
	    case 'pingresp':
	    case 'disconnect':
	      return emptyPacket(packet)
	    default:
	      throw new Error('unknown command')
	  }
	}

	function connect(opts) {
	  var opts = opts || {}
	    , protocolId = opts.protocolId || 'MQTT'
	    , protocolVersion = opts.protocolVersion || 4
	    , will = opts.will
	    , clean = opts.clean
	    , keepalive = opts.keepalive || 0
	    , clientId = opts.clientId
	    , username = opts.username
	    , password = opts.password

	  if (clean === undefined) {
	    clean = true
	  }

	  var length = 0

	  // Must be a string and non-falsy
	  if(!protocolId ||
	     (typeof protocolId !== "string" && !Buffer.isBuffer(protocolId))) {
	    throw new Error('Invalid protocol id')
	  } else {
	    length += protocolId.length + 2
	  }

	  // Must be a 1 byte number
	  if (!protocolVersion ||
	      'number' !== typeof protocolVersion ||
	      protocolVersion > 255 ||
	      protocolVersion < 0) {

	    throw new Error('Invalid protocol version')
	  } else {
	    length += 1
	  }

	  // Must be a non-falsy string
	  if(!clientId ||
	     (typeof clientId !== "string" && !Buffer.isBuffer(clientId))) {
	    throw new Error('Invalid client id')
	  } else {
	    length += clientId.length + 2
	  }

	  // Must be a two byte number
	  if ('number' !== typeof keepalive ||
	      keepalive < 0 ||
	      keepalive > 65535) {
	    throw new Error('Invalid keepalive')
	  } else {
	    length += 2
	  }

	  // Connect flags
	  length += 1

	  // If will exists...
	  if (will) {
	    // It must be an object
	    if ('object' !== typeof will) {
	      throw new Error('Invalid will')
	    }
	    // It must have topic typeof string
	    if (!will.topic || 'string' !== typeof will.topic) {
	      throw new Error('Invalid will topic')
	    } else {
	      length += will.topic.length + 2
	    }

	    // Payload
	    if (will.payload && will.payload) {
	      if (will.payload.length >= 0) {
	        if ('string' === typeof will.payload) {
	          length += Buffer.byteLength(will.payload) + 2
	        } else {
	          length += will.payload.length + 2
	        }
	      } else {
	        throw new Error('Invalid will payload')
	      }
	    } else {
	      length += 2
	    }
	  }

	  // Username
	  if (username) {
	    if (username.length) {
	      length += username.length + 2
	    } else {
	      throw new Error('Invalid username')
	    }
	  }

	  // Password
	  if (password) {
	    if (password.length) {
	      length += password.length + 2
	    } else {
	      throw new Error('Invalid password')
	    }
	  }

	  var buffer = new Buffer(1 + calcLengthLength(length) + length)
	    , pos = 0

	  // Generate header
	  buffer.writeUInt8(protocol.codes['connect'] << protocol.CMD_SHIFT, pos++)

	  // Generate length
	  pos += writeLength(buffer, pos, length)

	  // Generate protocol ID
	  pos += writeStringOrBuffer(buffer, pos, protocolId)
	  buffer.writeUInt8(protocolVersion, pos++)

	  // Connect flags
	  var flags = 0
	  flags |= username ? protocol.USERNAME_MASK : 0
	  flags |= password ? protocol.PASSWORD_MASK : 0
	  flags |= (will && will.retain) ? protocol.WILL_RETAIN_MASK : 0
	  flags |= (will && will.qos) ?
	    will.qos << protocol.WILL_QOS_SHIFT : 0
	  flags |= will ? protocol.WILL_FLAG_MASK : 0
	  flags |= clean ? protocol.CLEAN_SESSION_MASK : 0

	  buffer.writeUInt8(flags, pos++)

	  // Keepalive
	  pos += writeNumber(buffer, pos, keepalive)

	  // Client ID
	  pos += writeStringOrBuffer(buffer, pos, clientId)

	  // Will
	  if (will) {
	  	pos += writeString(buffer, pos, will.topic)
	    pos += writeStringOrBuffer(buffer, pos, will.payload)
	  }

	  // Username and password
	  if (username)
	    pos += writeStringOrBuffer(buffer, pos, username)

	  if (password)
	    pos += writeStringOrBuffer(buffer, pos, password)

	  return buffer
	}

	function connack(opts) {
	  var opts = opts || {}
	    , rc = opts.returnCode;

	  // Check return code
	  if ('number' !== typeof rc)
	    throw new Error('Invalid return code');

	  var buffer = new Buffer(4)
	    , pos = 0;

	  buffer.writeUInt8(protocol.codes['connack'] << protocol.CMD_SHIFT, pos++);
	  pos += writeLength(buffer, pos, 2);
	  buffer.writeUInt8(opts.sessionPresent && protocol.SESSIONPRESENT_MASK || 0, pos++);
	  buffer.writeUInt8(rc, pos++);

	  return buffer;
	}

	function publish(opts) {
	  var opts = opts || {}
	    , dup = opts.dup ? protocol.DUP_MASK : 0
	    , qos = opts.qos
	    , retain = opts.retain ? protocol.RETAIN_MASK : 0
	    , topic = opts.topic
	    , payload = opts.payload || empty
	    , id = opts.messageId;

	  var length = 0;

	  // Topic must be a non-empty string or Buffer
	  if (typeof topic === "string")
	    length += Buffer.byteLength(topic) + 2;
	  else if (Buffer.isBuffer(topic))
	    length += topic.length + 2;
	  else
	    throw new Error('Invalid topic');

	  // get the payload length
	  if (!Buffer.isBuffer(payload)) {
	    length += Buffer.byteLength(payload);
	  } else {
	    length += payload.length;
	  }

	  // Message id must a number if qos > 0
	  if (qos && 'number' !== typeof id) {
	    throw new Error('Invalid message id')
	  } else if (qos) {
	    length += 2;
	  }

	  var buffer = new Buffer(1 + calcLengthLength(length) + length)
	    , pos = 0;

	  // Header
	  buffer[pos++] =
	    protocol.codes['publish'] << protocol.CMD_SHIFT |
	    dup |
	    qos << protocol.QOS_SHIFT |
	    retain;

	  // Remaining length
	  pos += writeLength(buffer, pos, length);

	  // Topic
	  pos += writeStringOrBuffer(buffer, pos, topic);

	  // Message ID
	  if (qos > 0) {
	    pos += writeNumber(buffer, pos, id);
	  }

	  // Payload
	  if (!Buffer.isBuffer(payload)) {
	    writeStringNoPos(buffer, pos, payload);
	  } else {
	    writeBuffer(buffer, pos, payload);
	  }

	  return buffer;
	}

	/* Puback, pubrec, pubrel and pubcomp */
	function confirmation(opts) {
	  var opts = opts || {}
	    , type = opts.cmd || 'puback'
	    , id = opts.messageId
	    , dup = (opts.dup && type === 'pubrel') ? protocol.DUP_MASK : 0
	    , qos = 0

	  if (type === 'pubrel')
	    qos = 1
	  else if (type === 'pubcomp')
	    qos = 2

	  // Check message ID
	  if ('number' !== typeof id)
	    throw new Error('Invalid message id');

	  var buffer = new Buffer(4)
	    , pos = 0;

	  // Header
	  buffer[pos++] =
	    protocol.codes[type] << protocol.CMD_SHIFT |
	    dup |
	    qos << protocol.QOS_SHIFT;

	  // Length
	  pos += writeLength(buffer, pos, 2);

	  // Message ID
	  pos += writeNumber(buffer, pos, id);

	  return buffer;
	}

	function subscribe(opts) {
	  var opts = opts || {}
	    , dup = opts.dup ? protocol.DUP_MASK : 0
	    , qos = opts.qos || 0
	    , id = opts.messageId
	    , subs = opts.subscriptions;

	  var length = 0;

	  // Check mid
	  if ('number' !== typeof id) {
	    throw new Error('Invalid message id');
	  } else {
	    length += 2;
	  }
	  // Check subscriptions
	  if ('object' === typeof subs && subs.length) {
	    for (var i = 0; i < subs.length; i += 1) {
	      var topic = subs[i].topic
	        , qos = subs[i].qos;

	      if ('string' !== typeof topic) {
	        throw new Error('Invalid subscriptions - invalid topic');
	      }
	      if ('number' !== typeof qos) {
	        throw new Error('Invalid subscriptions - invalid qos');
	      }

	      length += Buffer.byteLength(topic) + 2 + 1;
	    }
	  } else {
	    throw new Error('Invalid subscriptions');
	  }

	  var buffer = new Buffer(1 + calcLengthLength(length) + length)
	    , pos = 0;

	  // Generate header
	  buffer.writeUInt8(
	    protocol.codes['subscribe'] << protocol.CMD_SHIFT |
	    dup |
	    1 << protocol.QOS_SHIFT, pos++);

	  // Generate length
	  pos += writeLength(buffer, pos, length);

	  // Generate message ID
	  pos += writeNumber(buffer, pos, id);

	  // Generate subs
	  for (var i = 0; i < subs.length; i++) {
	    var sub = subs[i]
	      , topic = sub.topic
	      , qos = sub.qos;

	    // Write topic string
	    pos += writeString(buffer, pos, topic);
	    // Write qos
	    buffer.writeUInt8(qos, pos++);
	  }

	  return buffer;
	}

	function suback(opts) {
	  var opts = opts || {}
	    , id = opts.messageId
	    , granted = opts.granted;

	  var length = 0;

	  // Check message id
	  if ('number' !== typeof id) {
	    throw new Error('Invalid message id');
	  } else {
	    length += 2;
	  }
	  // Check granted qos vector
	  if ('object' === typeof granted && granted.length) {
	    for (var i = 0; i < granted.length; i += 1) {
	      if ('number' !== typeof granted[i]) {
	        throw new Error('Invalid qos vector');
	      }
	      length += 1;
	    }
	  } else {
	    throw new Error('Invalid qos vector');
	  }

	  var buffer = new Buffer(1 + calcLengthLength(length) + length)
	    , pos = 0;

	  // Header
	  buffer.writeUInt8(protocol.codes['suback'] << protocol.CMD_SHIFT, pos++);

	  // Length
	  pos += writeLength(buffer, pos, length);

	  // Message ID
	  pos += writeNumber(buffer, pos, id);

	  // Subscriptions
	  for (var i = 0; i < granted.length; i++) {
	    buffer.writeUInt8(granted[i], pos++);
	  }

	  return buffer;
	}

	function unsubscribe(opts) {
	  var opts = opts || {}
	    , id = opts.messageId
	    , dup = opts.dup ? protocol.DUP_MASK : 0
	    , unsubs = opts.unsubscriptions;

	  var length = 0;

	  // Check message id
	  if ('number' !== typeof id) {
	    throw new Error('Invalid message id');
	  } else {
	    length += 2;
	  }
	  // Check unsubs
	  if ('object' === typeof unsubs && unsubs.length) {
	    for (var i = 0; i < unsubs.length; i += 1) {
	      if ('string' !== typeof unsubs[i]) {
	        throw new Error('Invalid unsubscriptions');
	      }
	      length += Buffer.byteLength(unsubs[i]) + 2;
	    }
	  } else {
	    throw new Error('Invalid unsubscriptions');
	  }

	  var buffer = new Buffer(1 + calcLengthLength(length) + length)
	    , pos = 0;

	  // Header
	  buffer[pos++] =
	    protocol.codes['unsubscribe'] << protocol.CMD_SHIFT |
	    dup |
	    1 << protocol.QOS_SHIFT;

	  // Length
	  pos += writeLength(buffer, pos, length);

	  // Message ID
	  pos += writeNumber(buffer, pos, id);

	  // Unsubs
	  for (var i = 0; i < unsubs.length; i++) {
	    pos += writeString(buffer, pos, unsubs[i]);
	  }

	  return buffer;
	}

	function emptyPacket(opts) {
	  var buf = new Buffer(2);
	  buf[0] = protocol.codes[opts.cmd] << 4;
	  buf[1] = 0;
	  return buf;
	}

	/**
	 * calcLengthLength - calculate the length of the remaining
	 * length field
	 *
	 * @api private
	 */
	function calcLengthLength(length) {
	  if (length >= 0 && length < 128) {
	    return 1
	  } else if (length >= 128 && length < 16384) {
	    return 2
	  } else if (length >= 16384 && length < 2097152) {
	    return 3
	  } else if (length >= 2097152 && length < 268435456) {
	    return 4
	  } else {
	    return 0
	  }
	}

	/**
	 * writeLength - write an MQTT style length field to the buffer
	 *
	 * @param <Buffer> buffer - destination
	 * @param <Number> pos - offset
	 * @param <Number> length - length (>0)
	 * @returns <Number> number of bytes written
	 *
	 * @api private
	 */

	function writeLength(buffer, pos, length) {
	  var digit = 0
	    , origPos = pos

	  do {
	    digit = length % 128 | 0
	    length = length / 128 | 0
	    if (length > 0) {
	        digit = digit | 0x80
	    }
	    buffer.writeUInt8(digit, pos++)
	  } while (length > 0)

	  return pos - origPos
	}

	/**
	 * writeString - write a utf8 string to the buffer
	 *
	 * @param <Buffer> buffer - destination
	 * @param <Number> pos - offset
	 * @param <String> string - string to write
	 * @return <Number> number of bytes written
	 *
	 * @api private
	 */

	function writeString(buffer, pos, string) {
	  var strlen = Buffer.byteLength(string)
	  writeNumber(buffer, pos, strlen)

	  writeStringNoPos(buffer, pos + 2, string)

	  return strlen + 2
	}

	function writeStringNoPos(buffer, pos, string) {
	  buffer.write(string, pos)
	}

	/**
	 * write_buffer - write buffer to buffer
	 *
	 * @param <Buffer> buffer - dest buffer
	 * @param <Number> pos - offset
	 * @param <Buffer> src - source buffer
	 * @return <Number> number of bytes written
	 *
	 * @api private
	 */

	function writeBuffer(buffer, pos, src) {
	  src.copy(buffer, pos)
	  return src.length
	}

	/**
	 * writeNumber - write a two byte number to the buffer
	 *
	 * @param <Buffer> buffer - destination
	 * @param <Number> pos - offset
	 * @param <String> number - number to write
	 * @return <Number> number of bytes written
	 *
	 * @api private
	 */
	function writeNumber(buffer, pos, number) {
	  buffer.writeUInt8(number >> 8, pos)
	  buffer.writeUInt8(number & 0x00FF, pos + 1)

	  return 2
	}

	/**
	 * writeStringOrBuffer - write a String or Buffer with the its length prefix
	 *
	 * @param <Buffer> buffer - destination
	 * @param <Number> pos - offset
	 * @param <String> toWrite - String or Buffer
	 * @return <Number> number of bytes written
	 */
	function writeStringOrBuffer(buffer, pos, toWrite) {
	  var written = 0

	  if (toWrite && typeof toWrite === 'string') {
	    written += writeString(buffer, pos + written, toWrite)
	  } else if (toWrite) {
	    written += writeNumber(buffer, pos + written, toWrite.length)
	    written += writeBuffer(buffer, pos + written, toWrite)
	  } else {
	    written += writeNumber(buffer, pos + written, 0)
	  }

	  return written
	}

	module.exports = generate

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var PassThrough = __webpack_require__(132).PassThrough,
	  streamsOpts = { objectMode: true };

	/**
	 * In-memory implementation of the message store
	 * This can actually be saved into files.
	 *
	 */
	function Store () {
	  if (!(this instanceof Store)) {
	    return new Store();
	  }

	  this._inflights = {};
	}

	/**
	 * Adds a packet to the store, a packet is
	 * anything that has a messageId property.
	 *
	 */
	Store.prototype.put = function (packet, cb) {
	  this._inflights[packet.messageId] = packet;

	  if (cb) {
	    cb();
	  }

	  return this;
	};

	/**
	 * Creates a stream with all the packets in the store
	 *
	 */
	Store.prototype.createStream = function () {
	  var stream = new PassThrough(streamsOpts),
	    ids = Object.keys(this._inflights),
	    i = 0;

	  for (i = 0; i < ids.length; i++) {
	    stream.write(this._inflights[ids[i]]);
	  }

	  stream.end();

	  return stream;
	};

	/**
	 * deletes a packet from the store.
	 */
	Store.prototype.del = function (packet, cb) {
	  packet = this._inflights[packet.messageId];
	  if (packet) {
	    delete this._inflights[packet.messageId];
	    cb(null, packet);
	  } else if (cb) {
	    cb(new Error('missing packet'));
	  }

	  return this;
	};

	/**
	 * get a packet from the store.
	 */
	Store.prototype.get = function (packet, cb) {
	  packet = this._inflights[packet.messageId];
	  if (packet) {
	    cb(null, packet);
	  } else if (cb) {
	    cb(new Error('missing packet'));
	  }

	  return this;
	};

	/**
	 * Close the store
	 */
	Store.prototype.close = function (cb) {
	  this._inflights = null;
	  if (cb) {
	    cb();
	  }
	};

	module.exports = Store;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(39); // hack to fix a circular dependency issue when used with browserify
	exports = module.exports = __webpack_require__(124);
	exports.Stream = Stream;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(127);
	exports.Duplex = __webpack_require__(121);
	exports.Transform = __webpack_require__(133);
	exports.PassThrough = __webpack_require__(134);


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(121);

	/*<replacement>*/
	var util = __webpack_require__(122);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined)
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  var ts = this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('finish', function() {
	    if ('function' === typeof this._flush)
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var rs = stream._readableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(133);

	/*<replacement>*/
	var util = __webpack_require__(122);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var once = __webpack_require__(136);

	var noop = function() {};

	var isRequest = function(stream) {
		return stream.setHeader && typeof stream.abort === 'function';
	};

	var isChildProcess = function(stream) {
		return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3
	};

	var eos = function(stream, opts, callback) {
		if (typeof opts === 'function') return eos(stream, null, opts);
		if (!opts) opts = {};

		callback = once(callback || noop);

		var ws = stream._writableState;
		var rs = stream._readableState;
		var readable = opts.readable || (opts.readable !== false && stream.readable);
		var writable = opts.writable || (opts.writable !== false && stream.writable);

		var onlegacyfinish = function() {
			if (!stream.writable) onfinish();
		};

		var onfinish = function() {
			writable = false;
			if (!readable) callback();
		};

		var onend = function() {
			readable = false;
			if (!writable) callback();
		};

		var onexit = function(exitCode) {
			callback(exitCode ? new Error('exited with error code: ' + exitCode) : null);
		};

		var onclose = function() {
			if (readable && !(rs && rs.ended)) return callback(new Error('premature close'));
			if (writable && !(ws && ws.ended)) return callback(new Error('premature close'));
		};

		var onrequest = function() {
			stream.req.on('finish', onfinish);
		};

		if (isRequest(stream)) {
			stream.on('complete', onfinish);
			stream.on('abort', onclose);
			if (stream.req) onrequest();
			else stream.on('request', onrequest);
		} else if (writable && !ws) { // legacy streams
			stream.on('end', onlegacyfinish);
			stream.on('close', onlegacyfinish);
		}

		if (isChildProcess(stream)) stream.on('exit', onexit);

		stream.on('end', onend);
		stream.on('finish', onfinish);
		if (opts.error !== false) stream.on('error', callback);
		stream.on('close', onclose);

		return function() {
			stream.removeListener('complete', onfinish);
			stream.removeListener('abort', onclose);
			stream.removeListener('request', onrequest);
			if (stream.req) stream.req.removeListener('finish', onfinish);
			stream.removeListener('end', onlegacyfinish);
			stream.removeListener('close', onlegacyfinish);
			stream.removeListener('finish', onfinish);
			stream.removeListener('exit', onexit);
			stream.removeListener('end', onend);
			stream.removeListener('error', callback);
			stream.removeListener('close', onclose);
		};
	};

	module.exports = eos;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var wrappy = __webpack_require__(137)
	module.exports = wrappy(once)

	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once(this)
	    },
	    configurable: true
	  })
	})

	function once (fn) {
	  var f = function () {
	    if (f.called) return f.value
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  f.called = false
	  return f
	}


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	// Returns a wrapper function that returns a wrapped callback
	// The wrapper function should do some stuff, and return a
	// presumably different callback function.
	// This makes sure that own properties are retained, so that
	// decorations and such are not lost along the way.
	module.exports = wrappy
	function wrappy (fn, cb) {
	  if (fn && cb) return wrappy(fn)(cb)

	  if (typeof fn !== 'function')
	    throw new TypeError('need wrapper function')

	  Object.keys(fn).forEach(function (k) {
	    wrapper[k] = fn[k]
	  })

	  return wrapper

	  function wrapper() {
	    var args = new Array(arguments.length)
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i]
	    }
	    var ret = fn.apply(this, args)
	    var cb = args[args.length-1]
	    if (typeof ret === 'function' && ret !== cb) {
	      Object.keys(cb).forEach(function (k) {
	        ret[k] = cb[k]
	      })
	    }
	    return ret
	  }
	}


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = extend

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var net = __webpack_require__(74);

	/*
	  variables port and host can be removed since
	  you have all required information in opts object
	*/
	function buildBuilder (client, opts) {
	  var port, host;
	  opts.port = opts.port || 1883;
	  opts.hostname = opts.hostname || opts.host || 'localhost';

	  port = opts.port;
	  host = opts.hostname;

	  return net.createConnection(port, host);
	}

	module.exports = buildBuilder;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var websocket = __webpack_require__(141),
	  _URL = __webpack_require__(14);

	function buildBuilder (client, opts) {
	  var host = opts.hostname || 'localhost',
	    port = String(opts.port || 80),
	    path = opts.path || '/',
	    url = opts.protocol + '://' + host + ':' + port + path,
	    ws = websocket(url, {
	      protocol: 'mqttv3.1'
	    });

	  return ws;
	}

	function buildBuilderBrowser (mqttClient, opts) {
	  var url,
	    parsed = _URL.parse(document.URL);

	  if (!opts.protocol) {
	    if ('https:' === parsed.protocol) {
	      opts.protocol = 'wss';
	    } else {
	      opts.protocol = 'ws';
	    }
	  }

	  if (!opts.hostname) {
	    opts.hostnme = opts.host;
	  }

	  if (!opts.hostname) {
	    opts.hostname = parsed.hostname;
	    if (!opts.port) {
	      opts.port = parsed.port;
	    }
	  }

	  if (!opts.port) {
	    if ('wss' === opts.protocol) {
	      opts.port = 443;
	    } else {
	      opts.port = 80;
	    }
	  }

	  if (!opts.path) {
	    opts.path = '/';
	  }

	  url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path;

	  return websocket(url, 'mqttv3.1');
	}

	if ('browser' !== process.title) {
	  module.exports = buildBuilder;
	} else {
	  module.exports = buildBuilderBrowser;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var through = __webpack_require__(142)
	var duplexify = __webpack_require__(144)
	var WS = __webpack_require__(158)

	module.exports = WebSocketStream

	function WebSocketStream(target, protocols) {
	  var stream, socket
	  var socketWrite = process.title === 'browser' ? socketWriteBrowser : socketWriteNode
	  var proxy = through(socketWrite, socketEnd)

	  // use existing WebSocket object that was passed in
	  if (typeof target === 'object') {
	    socket = target
	  // otherwise make a new one
	  } else {
	    socket = new WS(target, protocols)
	    socket.binaryType = 'arraybuffer'
	  }

	  // was already open when passed in
	  if (socket.readyState === 1) {
	    stream = proxy
	  } else {
	    stream = duplexify()
	    socket.addEventListener("open", onready)
	  }

	  stream.socket = socket

	  socket.addEventListener("close", onclose)
	  socket.addEventListener("error", onerror)
	  socket.addEventListener("message", onmessage)

	  proxy.on('close', destroy)

	  function socketWriteNode(chunk, enc, next) {
	    socket.send(chunk, next)
	  }

	  function socketWriteBrowser(chunk, enc, next) {
	    try {
	      socket.send(chunk)
	    } catch(err) {
	      return next(err)
	    }

	    next()
	  }

	  function socketEnd(done) {
	    socket.close()
	    done()
	  }

	  function onready() {
	    stream.setReadable(proxy)
	    stream.setWritable(proxy)
	    stream.emit('connect')
	  }

	  function onclose() {
	    stream.end();
	    stream.destroy()
	  }

	  function onerror(err) {
	    stream.destroy(err)
	  }

	  function onmessage(event) {
	    var data = event.data
	    if (data instanceof ArrayBuffer) data = new Buffer(new Uint8Array(data))
	    proxy.push(data)
	  }

	  function destroy() {
	    socket.close()
	  }

	  return stream
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), __webpack_require__(2).Buffer))

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Transform = __webpack_require__(143)
	  , inherits  = __webpack_require__(27).inherits
	  , xtend     = __webpack_require__(138)

	function DestroyableTransform(opts) {
	  Transform.call(this, opts)
	  this._destroyed = false
	}

	inherits(DestroyableTransform, Transform)

	DestroyableTransform.prototype.destroy = function(err) {
	  if (this._destroyed) return
	  this._destroyed = true
	  
	  var self = this
	  process.nextTick(function() {
	    if (err)
	      self.emit('error', err)
	    self.emit('close')
	  })
	}

	// a noop _transform function
	function noop (chunk, enc, callback) {
	  callback(null, chunk)
	}


	// create a new export function, used by both the main export and
	// the .ctor export, contains common logic for dealing with arguments
	function through2 (construct) {
	  return function (options, transform, flush) {
	    if (typeof options == 'function') {
	      flush     = transform
	      transform = options
	      options   = {}
	    }

	    if (typeof transform != 'function')
	      transform = noop

	    if (typeof flush != 'function')
	      flush = null

	    return construct(options, transform, flush)
	  }
	}


	// main export, just make me a transform stream!
	module.exports = through2(function (options, transform, flush) {
	  var t2 = new DestroyableTransform(options)

	  t2._transform = transform

	  if (flush)
	    t2._flush = flush

	  return t2
	})


	// make me a reusable prototype that I can `new`, or implicitly `new`
	// with a constructor call
	module.exports.ctor = through2(function (options, transform, flush) {
	  function Through2 (override) {
	    if (!(this instanceof Through2))
	      return new Through2(override)

	    this.options = xtend(options, override)

	    DestroyableTransform.call(this, this.options)
	  }

	  inherits(Through2, DestroyableTransform)

	  Through2.prototype._transform = transform

	  if (flush)
	    Through2.prototype._flush = flush

	  return Through2
	})


	module.exports.obj = through2(function (options, transform, flush) {
	  var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))

	  t2._transform = transform

	  if (flush)
	    t2._flush = flush

	  return t2
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(133)


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {var stream = __webpack_require__(145)
	var eos = __webpack_require__(155)
	var util = __webpack_require__(27)

	var SIGNAL_FLUSH = new Buffer([0])

	var onuncork = function(self, fn) {
	  if (self._corked) self.once('uncork', fn)
	  else fn()
	}

	var destroyer = function(self, end) {
	  return function(err) {
	    if (err) self.destroy(err.message === 'premature close' ? null : err)
	    else if (end && !self._ended) self.end()
	  }
	}

	var end = function(ws, fn) {
	  if (!ws) return fn()
	  if (ws._writableState && ws._writableState.finished) return fn()
	  if (ws._writableState) return ws.end(fn)
	  ws.end()
	  fn()
	}

	var toStreams2 = function(rs) {
	  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)
	}

	var Duplexify = function(writable, readable, opts) {
	  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)
	  stream.Duplex.call(this, opts)

	  this._writable = null
	  this._readable = null
	  this._readable2 = null

	  this._forwardDestroy = !opts || opts.destroy !== false
	  this._forwardEnd = !opts || opts.end !== false
	  this._corked = 1 // start corked
	  this._ondrain = null
	  this._drained = false
	  this._forwarding = false
	  this._unwrite = null
	  this._unread = null
	  this._ended = false

	  this.destroyed = false

	  if (writable) this.setWritable(writable)
	  if (readable) this.setReadable(readable)
	}

	util.inherits(Duplexify, stream.Duplex)

	Duplexify.obj = function(writable, readable, opts) {
	  if (!opts) opts = {}
	  opts.objectMode = true
	  opts.highWaterMark = 16
	  return new Duplexify(writable, readable, opts)
	}

	Duplexify.prototype.cork = function() {
	  if (++this._corked === 1) this.emit('cork')
	}

	Duplexify.prototype.uncork = function() {
	  if (this._corked && --this._corked === 0) this.emit('uncork')
	}

	Duplexify.prototype.setWritable = function(writable) {
	  if (this._unwrite) this._unwrite()

	  if (this.destroyed) {
	    if (writable && writable.destroy) writable.destroy()
	    return
	  }

	  if (writable === null || writable === false) {
	    this.end()
	    return
	  }

	  var self = this
	  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))

	  var ondrain = function() {
	    var ondrain = self._ondrain
	    self._ondrain = null
	    if (ondrain) ondrain()
	  }

	  var clear = function() {
	    self._writable.removeListener('drain', ondrain)
	    unend()
	  }

	  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks

	  this._writable = writable
	  this._writable.on('drain', ondrain)
	  this._unwrite = clear

	  this.uncork() // always uncork setWritable
	}

	Duplexify.prototype.setReadable = function(readable) {
	  if (this._unread) this._unread()

	  if (this.destroyed) {
	    if (readable && readable.destroy) readable.destroy()
	    return
	  }

	  if (readable === null || readable === false) {
	    this.push(null)
	    this.resume()
	    return
	  }

	  var self = this
	  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))

	  var onreadable = function() {
	    self._forward()
	  }

	  var onend = function() {
	    self.push(null)
	  }

	  var clear = function() {
	    self._readable2.removeListener('readable', onreadable)
	    self._readable2.removeListener('end', onend)
	    unend()
	  }

	  this._drained = true
	  this._readable = readable
	  this._readable2 = readable._readableState ? readable : toStreams2(readable)
	  this._readable2.on('readable', onreadable)
	  this._readable2.on('end', onend)
	  this._unread = clear

	  this._forward()
	}

	Duplexify.prototype._read = function() {
	  this._drained = true
	  this._forward()
	}

	Duplexify.prototype._forward = function() {
	  if (this._forwarding || !this._readable2 || !this._drained) return
	  this._forwarding = true

	  var data
	  var state = this._readable2._readableState

	  while ((data = this._readable2.read(state.buffer.length ? state.buffer[0].length : state.length)) !== null) {
	    this._drained = this.push(data)
	  }

	  this._forwarding = false
	}

	Duplexify.prototype.destroy = function(err) {
	  if (this.destroyed) return
	  this.destroyed = true

	  var self = this
	  process.nextTick(function() {
	    self._destroy(err)
	  })
	}

	Duplexify.prototype._destroy = function(err) {
	  if (err) {
	    var ondrain = this._ondrain
	    this._ondrain = null
	    if (ondrain) ondrain(err)
	    else this.emit('error', err)
	  }

	  if (this._forwardDestroy) {
	    if (this._readable && this._readable.destroy) this._readable.destroy()
	    if (this._writable && this._writable.destroy) this._writable.destroy()
	  }

	  this.emit('close')
	}

	Duplexify.prototype._write = function(data, enc, cb) {
	  if (this.destroyed) return cb()
	  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))
	  if (data === SIGNAL_FLUSH) return this._finish(cb)
	  if (!this._writable) return cb()

	  if (this._writable.write(data) === false) this._ondrain = cb
	  else cb()
	}


	Duplexify.prototype._finish = function(cb) {
	  var self = this
	  this.emit('preend')
	  onuncork(this, function() {
	    end(self._forwardEnd && self._writable, function() {
	      self.emit('prefinish')
	      onuncork(self, cb)
	    })
	  })
	}

	Duplexify.prototype.end = function(data, enc, cb) {
	  if (typeof data === 'function') return this.end(null, null, data)
	  if (typeof enc === 'function') return this.end(data, null, enc)
	  this._ended = true
	  if (data) this.write(data)
	  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)
	  return stream.Writable.prototype.end.call(this, cb)
	}

	module.exports = Duplexify
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer, __webpack_require__(6)))

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(148);
	exports.Stream = __webpack_require__(39);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(152);
	exports.Duplex = __webpack_require__(146);
	exports.Transform = __webpack_require__(153);
	exports.PassThrough = __webpack_require__(154);


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(147);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	var Readable = __webpack_require__(148);
	var Writable = __webpack_require__(152);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(149);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(2).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(40).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(39);

	/*<replacement>*/
	var util = __webpack_require__(147);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(150);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(146);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(151).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(146);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(151).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(2).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(2).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(147);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	var Stream = __webpack_require__(39);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(146);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(146);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(146);

	/*<replacement>*/
	var util = __webpack_require__(147);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(153);

	/*<replacement>*/
	var util = __webpack_require__(147);
	util.inherits = __webpack_require__(123);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var once = __webpack_require__(156);

	var noop = function() {};

	var isRequest = function(stream) {
		return stream.setHeader && typeof stream.abort === 'function';
	};

	var eos = function(stream, opts, callback) {
		if (typeof opts === 'function') return eos(stream, null, opts);
		if (!opts) opts = {};

		callback = once(callback || noop);

		var ws = stream._writableState;
		var rs = stream._readableState;
		var readable = opts.readable || (opts.readable !== false && stream.readable);
		var writable = opts.writable || (opts.writable !== false && stream.writable);

		var onlegacyfinish = function() {
			if (!stream.writable) onfinish();
		};

		var onfinish = function() {
			writable = false;
			if (!readable) callback();
		};

		var onend = function() {
			readable = false;
			if (!writable) callback();
		};

		var onclose = function() {
			if (readable && !(rs && rs.ended)) return callback(new Error('premature close'));
			if (writable && !(ws && ws.ended)) return callback(new Error('premature close'));
		};

		var onrequest = function() {
			stream.req.on('finish', onfinish);
		};

		if (isRequest(stream)) {
			stream.on('complete', onfinish);
			stream.on('abort', onclose);
			if (stream.req) onrequest();
			else stream.on('request', onrequest);
		} else if (writable && !ws) { // legacy streams
			stream.on('end', onlegacyfinish);
			stream.on('close', onlegacyfinish);
		}

		stream.on('end', onend);
		stream.on('finish', onfinish);
		if (opts.error !== false) stream.on('error', callback);
		stream.on('close', onclose);

		return function() {
			stream.removeListener('complete', onfinish);
			stream.removeListener('abort', onclose);
			stream.removeListener('request', onrequest);
			if (stream.req) stream.req.removeListener('finish', onfinish);
			stream.removeListener('end', onlegacyfinish);
			stream.removeListener('close', onlegacyfinish);
			stream.removeListener('finish', onfinish);
			stream.removeListener('end', onend);
			stream.removeListener('error', callback);
			stream.removeListener('close', onclose);
		};
	};

	module.exports = eos;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var wrappy = __webpack_require__(157)
	module.exports = wrappy(once)

	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once(this)
	    },
	    configurable: true
	  })
	})

	function once (fn) {
	  var f = function () {
	    if (f.called) return f.value
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  f.called = false
	  return f
	}


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	// Returns a wrapper function that returns a wrapped callback
	// The wrapper function should do some stuff, and return a
	// presumably different callback function.
	// This makes sure that own properties are retained, so that
	// decorations and such are not lost along the way.
	module.exports = wrappy
	function wrappy (fn, cb) {
	  if (fn && cb) return wrappy(fn)(cb)

	  if (typeof fn !== 'function')
	    throw new TypeError('need wrapper function')

	  Object.keys(fn).forEach(function (k) {
	    wrapper[k] = fn[k]
	  })

	  return wrapper

	  function wrapper() {
	    var args = new Array(arguments.length)
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i]
	    }
	    var ret = fn.apply(this, args)
	    var cb = args[args.length-1]
	    if (typeof ret === 'function' && ret !== cb) {
	      Object.keys(cb).forEach(function (k) {
	        ret[k] = cb[k]
	      })
	    }
	    return ret
	  }
	}


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var global = (function() { return this; })();

	/**
	 * WebSocket constructor.
	 */

	var WebSocket = global.WebSocket || global.MozWebSocket;

	/**
	 * Module exports.
	 */

	module.exports = WebSocket ? ws : null;

	/**
	 * WebSocket constructor.
	 *
	 * The third `opts` options object gets ignored in web browsers, since it's
	 * non-standard, and throws a TypeError if passed to the constructor.
	 * See: https://github.com/einaros/ws/issues/227
	 *
	 * @param {String} uri
	 * @param {Array} protocols (optional)
	 * @param {Object) opts (optional)
	 * @api public
	 */

	function ws(uri, protocols, opts) {
	  var instance;
	  if (protocols) {
	    instance = new WebSocket(uri, protocols);
	  } else {
	    instance = new WebSocket(uri);
	  }
	  return instance;
	}

	if (WebSocket) ws.prototype = WebSocket.prototype;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * A module that exports an StompClient client
	 * which inherits from the SpaceBunny base client
	 * @module StompClient
	 */

	'use strict';


	// Import some helpers modules
	var merge = __webpack_require__(7);
	var Promise = __webpack_require__(9);

	// Import stomp library
	var Stomp = __webpack_require__(160);

	// Import SpaceBunny main module from which StompClient inherits
	var SpaceBunny = __webpack_require__(98);
	var inherits = __webpack_require__(27).inherits;

	/**
	 * @constructor
	 * @param {Object} opts - constructor options may contain api-key or connection options
	 */
	var StompClient = function (opts) {
	  SpaceBunny.call(this,opts);
	  this._client = undefined;
	  this._connectionHeaders = {
	    'max_hbrlck_fails': 10,
	    'accept-version': '1.0,1.1,1.2',
	    'heart-beat': '10000,10000'
	  };
	  this.connection();
	};
	inherits(StompClient, SpaceBunny);

	/**
	 * Subscribe to input channel
	 *
	 * @param {function} callback - function called every time a message is receviced
	 * passing the current message as argument
	 * @param {Object} options - subscription options
	 * @return promise containing the result of the subscription
	 */
	StompClient.prototype.onReceive = function (callback, opts) {
	  var parent = this;
	  // subscribe for input messages
	  return new Promise(function (resolve, reject) {
	    parent._connect().then(function(client) {
	      client.subscribe(parent._subcriptionFor('queue', 'input'), function(message){
	        callback(message);
	        resolve(true);
	      });
	    }).catch(function(reason) {
	      reject(reason);
	    });
	  });
	};

	/**
	 * Publish a message on a specific channel
	 *
	 * @param {String} channel - channel name on which you want to publish a message
	 * @param {Object} message - the message payload
	 * @param {Object} message - the message payload
	 * @return promise containing true if the
	 */
	StompClient.prototype.publish = function (channel, message, opts) {
	  var parent = this;
	  // Publish message
	  return new Promise(function (resolve, reject) {
	    parent._connect().then(function(client) {
	      client.send(parent._destinationFor('exchange', channel), parent._connectionHeaders, message);
	      resolve(true);
	    }).catch(function(reason) {
	      reject(reason);
	    });
	  });
	};

	/**
	 * Destroy the connection between the stomp client and broker
	 *
	 * @return a promise containing the result of the operation
	 */
	StompClient.prototype.disconnect = function () {
	  var parent = this;
	  return new Promise(function (resolve, reject) {
	    if(parent._client === undefined)
	      reject('Invalid connection');
	    else {
	      parent._client.disconnect().then(function (data) {
	        resolve(true);
	      }).catch(function (reason) {
	        reject(reason);
	      });
	    }
	  });
	};

	// ------------ PRIVATE METHODS -------------------

	/**
	 * @private
	 * Establish an stomp connection with the broker
	 * using configurations retrieved from the endpoint
	 *
	 * @param {Object} opts - connection options
	 * @return a promise containing current connection
	 */
	StompClient.prototype._connect = function (opts) {
	  opts = merge({}, opts);
	  var connectionParams = this._connectionParams;
	  var parent = this;

	  return new Promise(function (resolve, reject) {
	    if (parent._client !== undefined)
	      resolve(parent._client);
	    else {
	      try {
	        var client = undefined;
	        if(typeof process === 'object' && process + '' === '[object process]'){
	          // code is runnning in nodejs: STOMP uses TCP sockets
	          client = Stomp.overTCP(connectionParams.host, connectionParams.protocols.stomp.port);
	        } else {
	          // code is runnning in a browser: web STOMP uses Web sockets
	          var connectionString = 'ws://' + connectionParams.host + ':' + connectionParams.protocols.web_stomp.port;
	          client = Stomp.overWS(connectionString);
	        }
	        var headers = merge(parent._connectionHeaders, {
	          login: connectionParams.username,
	          passcode: connectionParams.password,
	          host: connectionParams.vhost
	        });
	        client.connect(headers, function(frame) {
	          parent._client = client;
	          resolve(parent._client);
	        }, function(err) {
	          reject(err);
	        });
	      } catch(reason) {
	        reject(reason);
	      }
	    }
	  });
	};

	/**
	 * @private
	 * Generate the subscription string for a specific channel
	 *
	 * @param {String} type - resource type on which subscribe or publish [exchange/queue]
	 * @param {String} channel - channel name on which you want to publish a message
	 * @return a string that represents the topic name for that channel
	 */
	StompClient.prototype._subcriptionFor = function (type, channel) {
	  return '/' + type + '/' + this.deviceId() + '.' + channel ;
	};

	/**
	 * @private
	 * Generate the destination string for a specific channel
	 *
	 * @param {String} type - resource type on which subscribe or publish [exchange/queue]
	 * @param {String} channel - channel name on which you want to publish a message
	 * @return a string that represents the topic name for that channel
	 */
	StompClient.prototype._destinationFor = function (type, channel) {
	  return '/' + type + '/' + this.deviceId() + '/' + this.deviceId() + '.' + channel ;
	};

	// /**
	//  * @private
	//  * Parses a message before send
	//  *
	//  * @param {Object} message - message
	//  * @return a parsed message suitable for sending
	//  */
	// StompClient.prototype._parseMessage = function (message) {
	//   try {
	//     JSON.parse(message);
	//     message = JSON.stringify(message);
	//   } catch (e) {
	//     return message;
	//   }
	//   return message ;
	// };

	module.exports = StompClient;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright (C) 2013 [Jeff Mesnil](http://jmesnil.net/)
	//
	//   Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0
	//
	// The library can be used in node.js app to connect to STOMP brokers over TCP 
	// or Web sockets.

	// Root of the `stompjs module`

	var Stomp = __webpack_require__(161);
	var StompNode = __webpack_require__(162);

	module.exports = Stomp.Stomp;
	module.exports.overTCP = StompNode.overTCP;
	module.exports.overWS = StompNode.overWS;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1

	/*
	   Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0

	   Copyright (C) 2010-2013 [Jeff Mesnil](http://jmesnil.net/)
	   Copyright (C) 2012 [FuseSource, Inc.](http://fusesource.com)
	 */

	(function() {
	  var Byte, Client, Frame, Stomp,
	    __hasProp = {}.hasOwnProperty,
	    __slice = [].slice;

	  Byte = {
	    LF: '\x0A',
	    NULL: '\x00'
	  };

	  Frame = (function() {
	    var unmarshallSingle;

	    function Frame(command, headers, body) {
	      this.command = command;
	      this.headers = headers != null ? headers : {};
	      this.body = body != null ? body : '';
	    }

	    Frame.prototype.toString = function() {
	      var lines, name, skipContentLength, value, _ref;
	      lines = [this.command];
	      skipContentLength = this.headers['content-length'] === false ? true : false;
	      if (skipContentLength) {
	        delete this.headers['content-length'];
	      }
	      _ref = this.headers;
	      for (name in _ref) {
	        if (!__hasProp.call(_ref, name)) continue;
	        value = _ref[name];
	        lines.push("" + name + ":" + value);
	      }
	      if (this.body && !skipContentLength) {
	        lines.push("content-length:" + (Frame.sizeOfUTF8(this.body)));
	      }
	      lines.push(Byte.LF + this.body);
	      return lines.join(Byte.LF);
	    };

	    Frame.sizeOfUTF8 = function(s) {
	      if (s) {
	        return encodeURI(s).match(/%..|./g).length;
	      } else {
	        return 0;
	      }
	    };

	    unmarshallSingle = function(data) {
	      var body, chr, command, divider, headerLines, headers, i, idx, len, line, start, trim, _i, _j, _len, _ref, _ref1;
	      divider = data.search(RegExp("" + Byte.LF + Byte.LF));
	      headerLines = data.substring(0, divider).split(Byte.LF);
	      command = headerLines.shift();
	      headers = {};
	      trim = function(str) {
	        return str.replace(/^\s+|\s+$/g, '');
	      };
	      _ref = headerLines.reverse();
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        line = _ref[_i];
	        idx = line.indexOf(':');
	        headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));
	      }
	      body = '';
	      start = divider + 2;
	      if (headers['content-length']) {
	        len = parseInt(headers['content-length']);
	        body = ('' + data).substring(start, start + len);
	      } else {
	        chr = null;
	        for (i = _j = start, _ref1 = data.length; start <= _ref1 ? _j < _ref1 : _j > _ref1; i = start <= _ref1 ? ++_j : --_j) {
	          chr = data.charAt(i);
	          if (chr === Byte.NULL) {
	            break;
	          }
	          body += chr;
	        }
	      }
	      return new Frame(command, headers, body);
	    };

	    Frame.unmarshall = function(datas) {
	      var data;
	      return (function() {
	        var _i, _len, _ref, _results;
	        _ref = datas.split(RegExp("" + Byte.NULL + Byte.LF + "*"));
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          data = _ref[_i];
	          if ((data != null ? data.length : void 0) > 0) {
	            _results.push(unmarshallSingle(data));
	          }
	        }
	        return _results;
	      })();
	    };

	    Frame.marshall = function(command, headers, body) {
	      var frame;
	      frame = new Frame(command, headers, body);
	      return frame.toString() + Byte.NULL;
	    };

	    return Frame;

	  })();

	  Client = (function() {
	    var now;

	    function Client(ws) {
	      this.ws = ws;
	      this.ws.binaryType = "arraybuffer";
	      this.counter = 0;
	      this.connected = false;
	      this.heartbeat = {
	        outgoing: 10000,
	        incoming: 10000
	      };
	      this.maxWebSocketFrameSize = 16 * 1024;
	      this.subscriptions = {};
	    }

	    Client.prototype.debug = function(message) {
	      var _ref;
	      return typeof window !== "undefined" && window !== null ? (_ref = window.console) != null ? _ref.log(message) : void 0 : void 0;
	    };

	    now = function() {
	      if (Date.now) {
	        return Date.now();
	      } else {
	        return new Date().valueOf;
	      }
	    };

	    Client.prototype._transmit = function(command, headers, body) {
	      var out;
	      out = Frame.marshall(command, headers, body);
	      if (typeof this.debug === "function") {
	        this.debug(">>> " + out);
	      }
	      while (true) {
	        if (out.length > this.maxWebSocketFrameSize) {
	          this.ws.send(out.substring(0, this.maxWebSocketFrameSize));
	          out = out.substring(this.maxWebSocketFrameSize);
	          if (typeof this.debug === "function") {
	            this.debug("remaining = " + out.length);
	          }
	        } else {
	          return this.ws.send(out);
	        }
	      }
	    };

	    Client.prototype._setupHeartbeat = function(headers) {
	      var serverIncoming, serverOutgoing, ttl, v, _ref, _ref1;
	      if ((_ref = headers.version) !== Stomp.VERSIONS.V1_1 && _ref !== Stomp.VERSIONS.V1_2) {
	        return;
	      }
	      _ref1 = (function() {
	        var _i, _len, _ref1, _results;
	        _ref1 = headers['heart-beat'].split(",");
	        _results = [];
	        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	          v = _ref1[_i];
	          _results.push(parseInt(v));
	        }
	        return _results;
	      })(), serverOutgoing = _ref1[0], serverIncoming = _ref1[1];
	      if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {
	        ttl = Math.max(this.heartbeat.outgoing, serverIncoming);
	        if (typeof this.debug === "function") {
	          this.debug("send PING every " + ttl + "ms");
	        }
	        this.pinger = Stomp.setInterval(ttl, (function(_this) {
	          return function() {
	            _this.ws.send(Byte.LF);
	            return typeof _this.debug === "function" ? _this.debug(">>> PING") : void 0;
	          };
	        })(this));
	      }
	      if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {
	        ttl = Math.max(this.heartbeat.incoming, serverOutgoing);
	        if (typeof this.debug === "function") {
	          this.debug("check PONG every " + ttl + "ms");
	        }
	        return this.ponger = Stomp.setInterval(ttl, (function(_this) {
	          return function() {
	            var delta;
	            delta = now() - _this.serverActivity;
	            if (delta > ttl * 2) {
	              if (typeof _this.debug === "function") {
	                _this.debug("did not receive server activity for the last " + delta + "ms");
	              }
	              return _this.ws.close();
	            }
	          };
	        })(this));
	      }
	    };

	    Client.prototype._parseConnect = function() {
	      var args, connectCallback, errorCallback, headers;
	      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      headers = {};
	      switch (args.length) {
	        case 2:
	          headers = args[0], connectCallback = args[1];
	          break;
	        case 3:
	          if (args[1] instanceof Function) {
	            headers = args[0], connectCallback = args[1], errorCallback = args[2];
	          } else {
	            headers.login = args[0], headers.passcode = args[1], connectCallback = args[2];
	          }
	          break;
	        case 4:
	          headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3];
	          break;
	        default:
	          headers.login = args[0], headers.passcode = args[1], connectCallback = args[2], errorCallback = args[3], headers.host = args[4];
	      }
	      return [headers, connectCallback, errorCallback];
	    };

	    Client.prototype.connect = function() {
	      var args, errorCallback, headers, out;
	      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      out = this._parseConnect.apply(this, args);
	      headers = out[0], this.connectCallback = out[1], errorCallback = out[2];
	      if (typeof this.debug === "function") {
	        this.debug("Opening Web Socket...");
	      }
	      this.ws.onmessage = (function(_this) {
	        return function(evt) {
	          var arr, c, client, data, frame, messageID, onreceive, subscription, _i, _len, _ref, _results;
	          data = typeof ArrayBuffer !== 'undefined' && evt.data instanceof ArrayBuffer ? (arr = new Uint8Array(evt.data), typeof _this.debug === "function" ? _this.debug("--- got data length: " + arr.length) : void 0, ((function() {
	            var _i, _len, _results;
	            _results = [];
	            for (_i = 0, _len = arr.length; _i < _len; _i++) {
	              c = arr[_i];
	              _results.push(String.fromCharCode(c));
	            }
	            return _results;
	          })()).join('')) : evt.data;
	          _this.serverActivity = now();
	          if (data === Byte.LF) {
	            if (typeof _this.debug === "function") {
	              _this.debug("<<< PONG");
	            }
	            return;
	          }
	          if (typeof _this.debug === "function") {
	            _this.debug("<<< " + data);
	          }
	          _ref = Frame.unmarshall(data);
	          _results = [];
	          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	            frame = _ref[_i];
	            switch (frame.command) {
	              case "CONNECTED":
	                if (typeof _this.debug === "function") {
	                  _this.debug("connected to server " + frame.headers.server);
	                }
	                _this.connected = true;
	                _this._setupHeartbeat(frame.headers);
	                _results.push(typeof _this.connectCallback === "function" ? _this.connectCallback(frame) : void 0);
	                break;
	              case "MESSAGE":
	                subscription = frame.headers.subscription;
	                onreceive = _this.subscriptions[subscription] || _this.onreceive;
	                if (onreceive) {
	                  client = _this;
	                  messageID = frame.headers["message-id"];
	                  frame.ack = function(headers) {
	                    if (headers == null) {
	                      headers = {};
	                    }
	                    return client.ack(messageID, subscription, headers);
	                  };
	                  frame.nack = function(headers) {
	                    if (headers == null) {
	                      headers = {};
	                    }
	                    return client.nack(messageID, subscription, headers);
	                  };
	                  _results.push(onreceive(frame));
	                } else {
	                  _results.push(typeof _this.debug === "function" ? _this.debug("Unhandled received MESSAGE: " + frame) : void 0);
	                }
	                break;
	              case "RECEIPT":
	                _results.push(typeof _this.onreceipt === "function" ? _this.onreceipt(frame) : void 0);
	                break;
	              case "ERROR":
	                _results.push(typeof errorCallback === "function" ? errorCallback(frame) : void 0);
	                break;
	              default:
	                _results.push(typeof _this.debug === "function" ? _this.debug("Unhandled frame: " + frame) : void 0);
	            }
	          }
	          return _results;
	        };
	      })(this);
	      this.ws.onclose = (function(_this) {
	        return function() {
	          var msg;
	          msg = "Whoops! Lost connection to " + _this.ws.url;
	          if (typeof _this.debug === "function") {
	            _this.debug(msg);
	          }
	          _this._cleanUp();
	          return typeof errorCallback === "function" ? errorCallback(msg) : void 0;
	        };
	      })(this);
	      return this.ws.onopen = (function(_this) {
	        return function() {
	          if (typeof _this.debug === "function") {
	            _this.debug('Web Socket Opened...');
	          }
	          headers["accept-version"] = Stomp.VERSIONS.supportedVersions();
	          headers["heart-beat"] = [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',');
	          return _this._transmit("CONNECT", headers);
	        };
	      })(this);
	    };

	    Client.prototype.disconnect = function(disconnectCallback, headers) {
	      if (headers == null) {
	        headers = {};
	      }
	      this._transmit("DISCONNECT", headers);
	      this.ws.onclose = null;
	      this.ws.close();
	      this._cleanUp();
	      return typeof disconnectCallback === "function" ? disconnectCallback() : void 0;
	    };

	    Client.prototype._cleanUp = function() {
	      this.connected = false;
	      if (this.pinger) {
	        Stomp.clearInterval(this.pinger);
	      }
	      if (this.ponger) {
	        return Stomp.clearInterval(this.ponger);
	      }
	    };

	    Client.prototype.send = function(destination, headers, body) {
	      if (headers == null) {
	        headers = {};
	      }
	      if (body == null) {
	        body = '';
	      }
	      headers.destination = destination;
	      return this._transmit("SEND", headers, body);
	    };

	    Client.prototype.subscribe = function(destination, callback, headers) {
	      var client;
	      if (headers == null) {
	        headers = {};
	      }
	      if (!headers.id) {
	        headers.id = "sub-" + this.counter++;
	      }
	      headers.destination = destination;
	      this.subscriptions[headers.id] = callback;
	      this._transmit("SUBSCRIBE", headers);
	      client = this;
	      return {
	        id: headers.id,
	        unsubscribe: function() {
	          return client.unsubscribe(headers.id);
	        }
	      };
	    };

	    Client.prototype.unsubscribe = function(id) {
	      delete this.subscriptions[id];
	      return this._transmit("UNSUBSCRIBE", {
	        id: id
	      });
	    };

	    Client.prototype.begin = function(transaction) {
	      var client, txid;
	      txid = transaction || "tx-" + this.counter++;
	      this._transmit("BEGIN", {
	        transaction: txid
	      });
	      client = this;
	      return {
	        id: txid,
	        commit: function() {
	          return client.commit(txid);
	        },
	        abort: function() {
	          return client.abort(txid);
	        }
	      };
	    };

	    Client.prototype.commit = function(transaction) {
	      return this._transmit("COMMIT", {
	        transaction: transaction
	      });
	    };

	    Client.prototype.abort = function(transaction) {
	      return this._transmit("ABORT", {
	        transaction: transaction
	      });
	    };

	    Client.prototype.ack = function(messageID, subscription, headers) {
	      if (headers == null) {
	        headers = {};
	      }
	      headers["message-id"] = messageID;
	      headers.subscription = subscription;
	      return this._transmit("ACK", headers);
	    };

	    Client.prototype.nack = function(messageID, subscription, headers) {
	      if (headers == null) {
	        headers = {};
	      }
	      headers["message-id"] = messageID;
	      headers.subscription = subscription;
	      return this._transmit("NACK", headers);
	    };

	    return Client;

	  })();

	  Stomp = {
	    VERSIONS: {
	      V1_0: '1.0',
	      V1_1: '1.1',
	      V1_2: '1.2',
	      supportedVersions: function() {
	        return '1.1,1.0';
	      }
	    },
	    client: function(url, protocols) {
	      var klass, ws;
	      if (protocols == null) {
	        protocols = ['v10.stomp', 'v11.stomp'];
	      }
	      klass = Stomp.WebSocketClass || WebSocket;
	      ws = new klass(url, protocols);
	      return new Client(ws);
	    },
	    over: function(ws) {
	      return new Client(ws);
	    },
	    Frame: Frame
	  };

	  if (typeof exports !== "undefined" && exports !== null) {
	    exports.Stomp = Stomp;
	  }

	  if (typeof window !== "undefined" && window !== null) {
	    Stomp.setInterval = function(interval, f) {
	      return window.setInterval(f, interval);
	    };
	    Stomp.clearInterval = function(id) {
	      return window.clearInterval(id);
	    };
	    window.Stomp = Stomp;
	  } else if (!exports) {
	    self.Stomp = Stomp;
	  }

	}).call(this);


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1

	/*
	   Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0

	   Copyright (C) 2013 [Jeff Mesnil](http://jmesnil.net/)
	 */

	(function() {
	  var Stomp, net, overTCP, overWS, wrapTCP, wrapWS;

	  Stomp = __webpack_require__(161);

	  net = __webpack_require__(74);

	  Stomp.Stomp.setInterval = function(interval, f) {
	    return setInterval(f, interval);
	  };

	  Stomp.Stomp.clearInterval = function(id) {
	    return clearInterval(id);
	  };

	  wrapTCP = function(port, host) {
	    var socket, ws;
	    socket = null;
	    ws = {
	      url: 'tcp:// ' + host + ':' + port,
	      send: function(d) {
	        return socket.write(d);
	      },
	      close: function() {
	        return socket.end();
	      }
	    };
	    socket = net.connect(port, host, function(e) {
	      return ws.onopen();
	    });
	    socket.on('error', function(e) {
	      return typeof ws.onclose === "function" ? ws.onclose(e) : void 0;
	    });
	    socket.on('close', function(e) {
	      return typeof ws.onclose === "function" ? ws.onclose(e) : void 0;
	    });
	    socket.on('data', function(data) {
	      var event;
	      event = {
	        'data': data.toString()
	      };
	      return ws.onmessage(event);
	    });
	    return ws;
	  };

	  wrapWS = function(url) {
	    var WebSocketClient, connection, socket, ws;
	    WebSocketClient = __webpack_require__(163).client;
	    connection = null;
	    ws = {
	      url: url,
	      send: function(d) {
	        return connection.sendUTF(d);
	      },
	      close: function() {
	        return connection.close();
	      }
	    };
	    socket = new WebSocketClient();
	    socket.on('connect', function(conn) {
	      connection = conn;
	      ws.onopen();
	      connection.on('error', function(error) {
	        return typeof ws.onclose === "function" ? ws.onclose(error) : void 0;
	      });
	      connection.on('close', function() {
	        return typeof ws.onclose === "function" ? ws.onclose() : void 0;
	      });
	      return connection.on('message', function(message) {
	        var event;
	        if (message.type === 'utf8') {
	          event = {
	            'data': message.utf8Data
	          };
	          return ws.onmessage(event);
	        }
	      });
	    });
	    socket.connect(url);
	    return ws;
	  };

	  overTCP = function(host, port) {
	    var socket;
	    socket = wrapTCP(port, host);
	    return Stomp.Stomp.over(socket);
	  };

	  overWS = function(url) {
	    var socket;
	    socket = wrapWS(url);
	    return Stomp.Stomp.over(socket);
	  };

	  exports.overTCP = overTCP;

	  exports.overWS = overWS;

	}).call(this);


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var _global = (function() { return this; })();
	var nativeWebSocket = _global.WebSocket || _global.MozWebSocket;


	/**
	 * Expose a W3C WebSocket class with just one or two arguments.
	 */
	function W3CWebSocket(uri, protocols) {
		var native_instance;

		if (protocols) {
			native_instance = new nativeWebSocket(uri, protocols);
		}
		else {
			native_instance = new nativeWebSocket(uri);
		}

		/**
		 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
		 * class). Since it is an Object it will be returned as it is when creating an
		 * instance of W3CWebSocket via 'new W3CWebSocket()'.
		 *
		 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
		 */
		return native_instance;
	}


	/**
	 * Module exports.
	 */
	module.exports = {
	    'w3cwebsocket' : nativeWebSocket ? W3CWebSocket : null,
	    'version'      : __webpack_require__(164)
	};


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(165).version;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
		"name": "websocket",
		"description": "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
		"keywords": [
			"websocket",
			"websockets",
			"socket",
			"networking",
			"comet",
			"push",
			"RFC-6455",
			"realtime",
			"server",
			"client"
		],
		"author": {
			"name": "Brian McKelvey",
			"email": "brian@worlize.com",
			"url": "https://www.worlize.com/"
		},
		"version": "1.0.18",
		"repository": {
			"type": "git",
			"url": "https://github.com/theturtle32/WebSocket-Node.git"
		},
		"homepage": "https://github.com/theturtle32/WebSocket-Node",
		"engines": {
			"node": ">=0.8.0"
		},
		"dependencies": {
			"debug": "~2.1.0",
			"nan": "~1.0.0",
			"typedarray-to-buffer": "~3.0.0"
		},
		"devDependencies": {
			"buffer-equal": "0.0.1",
			"faucet": "0.0.1",
			"gulp": "git+https://github.com/gulpjs/gulp.git#4.0",
			"gulp-jshint": "^1.9.0",
			"jshint-stylish": "^1.0.0",
			"tape": "^3.0.0"
		},
		"config": {
			"verbose": false
		},
		"scripts": {
			"install": "(node-gyp rebuild 2> builderror.log) || (exit 0)",
			"test": "faucet test/unit",
			"gulp": "gulp"
		},
		"main": "index",
		"directories": {
			"lib": "./lib"
		},
		"browser": "lib/browser.js",
		"gitHead": "2888a6d8c6ea0211b429000d43ed5da76124733f",
		"bugs": {
			"url": "https://github.com/theturtle32/WebSocket-Node/issues"
		},
		"_id": "websocket@1.0.18",
		"_shasum": "140280dcc90ed42caa7a701e182a8c9e2dec75ef",
		"_from": "websocket@latest",
		"_npmVersion": "2.6.1",
		"_nodeVersion": "1.4.3",
		"_npmUser": {
			"name": "theturtle32",
			"email": "brian@worlize.com"
		},
		"maintainers": [
			{
				"name": "theturtle32",
				"email": "brian@worlize.com"
			}
		],
		"dist": {
			"shasum": "140280dcc90ed42caa7a701e182a8c9e2dec75ef",
			"tarball": "http://registry.npmjs.org/websocket/-/websocket-1.0.18.tgz"
		},
		"_resolved": "https://registry.npmjs.org/websocket/-/websocket-1.0.18.tgz"
	}

/***/ }
/******/ ]);