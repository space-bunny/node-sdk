{"version":3,"sources":["protocols/stomp_client.js"],"names":[],"mappings":"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","file":"protocols/stomp_client.js","sourcesContent":["/**\n * A module that exports an StompClient client\n * which inherits from the SpaceBunny base client\n * @module StompClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import stomp library\nimport Stomp from 'stompjs';\n\n// Import SockJS library\nimport SockJS from 'sockjs-client';\n\n// Import SpaceBunny main module from which StompClient inherits\nimport SpaceBunny from '../spacebunny';\n\nclass StompClient extends SpaceBunny {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain api-key or connection options\n   * (deviceId and secret) for devices.\n   */\n  constructor(opts) {\n    super(opts);\n    if (typeof process === 'object' && process + '' === '[object process]') {\n      this._protocol = 'stomp';\n    } else {\n      this._protocol = 'webStomp';\n    }\n    this._webSocketProtocol = 'http://';\n    this._webSocketSecureProtocol = 'https://';\n    this._stompConnection = undefined;\n    this._subscription = undefined;\n    this._connectionHeaders = {\n      'max_hbrlck_fails': 10,\n      'accept-version': '1.0,1.1,1.2',\n      'heart-beat': '10000,10000'\n    };\n    this._existingQueuePrefix = 'amq/queue';\n    this.getConnectionParams();\n  }\n\n  /**\n   * Subscribe to input channel\n   *\n   * @param {function} callback - function called every time a message is received\n   * passing the current message as argument\n   * @param {Object} options - subscription options\n   * @return promise containing the result of the subscription\n   */\n  onReceive(callback, opts) {\n    opts = merge({}, opts);\n    // subscribe for input messages\n    return new Promise((resolve, reject) => {\n      this._connect().then((client) => {\n        // amq/queue is the form for existing queues\n        this._subscription = client.subscribe(this._subcriptionFor(this._existingQueuePrefix, this._inputTopic), function(message) {\n          callback(message);\n        }, function(reason) {\n          reject(reason);\n        });\n        resolve(true);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Publish a message on a specific channel\n   *\n   * @param {String} channel - channel name on which you want to publish a message\n   * @param {Object} message - the message payload\n   * @param {Object} opts - publication options\n   * @return a promise containing the result of the operation\n   */\n  publish(channel, message, opts) {\n    opts = merge({}, opts);\n    // Publish message\n    return new Promise((resolve, reject) => {\n      this._connect().then((client) => {\n        client.send(this._destinationFor('exchange', channel), this._connectionHeaders, this._encapsulateContent(message));\n        resolve(true);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Destroy the connection between the stomp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        this._subscription.unsubscribe();\n        this._stompConnection.disconnect(() => {\n          this._stompConnection = undefined;\n          resolve(true);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Establish an stomp connection with the broker.\n   * If a connection already exists, returns the current connection\n   *\n   * @private\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _connect(opts) {\n    opts = merge({}, opts);\n    const connectionParams = this._connectionParams;\n\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection !== undefined) {\n        resolve(this._stompConnection);\n      } else {\n        try {\n          let client = undefined;\n          if (typeof process === 'object' && process + '' === '[object process]') {\n            // code is runnning in nodejs: STOMP uses TCP sockets\n            if (this._ssl) {\n              client = Stomp.overTCP(connectionParams.host, connectionParams.protocols.stomp.sslPort, this._sslOpts);\n            } else {\n              client = Stomp.overTCP(connectionParams.host, connectionParams.protocols.stomp.port);\n            }\n          } else {\n            // code is runnning in a browser: web STOMP uses Web sockets\n            const protocol = (this._ssl) ? this._webSocketSecureProtocol : this._webSocketProtocol;\n            const port = (this._ssl) ? connectionParams.protocols.webStomp.sslPort : connectionParams.protocols.webStomp.port;\n            // const connectionString = `${protocol}${connectionParams.host}:${port}/stomp`;\n            const connectionString = `${protocol}${connectionParams.host}:${port}/stomp`;\n            const ws = new SockJS(connectionString);\n            client = Stomp.over(ws);\n            // SockJS does not support heart-beat: disable heart-beats\n            client.heartbeat.outgoing = 0;\n            client.heartbeat.incoming = 0;\n          }\n          const headers = merge(this._connectionHeaders, {\n            login: connectionParams.deviceId || connectionParams.client,\n            passcode: connectionParams.secret,\n            host: connectionParams.vhost\n          });\n          client.connect(headers, () => {\n            this._stompConnection = client;\n            resolve(this._stompConnection);\n          }, function(err) {\n            reject(err);\n          });\n        } catch (reason) {\n          reject(reason);\n        }\n      }\n    });\n  }\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the topic name for that channel\n   */\n  _subcriptionFor(type, channel) {\n    return `/${type}/${this.deviceId()}.${channel}`;\n  }\n\n  /**\n   * Generate the destination string for a specific channel\n   *\n   * @private\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the topic name for that channel\n   */\n  _destinationFor(type, channel) {\n    return `/${type}/${this.deviceId()}/${this.deviceId()}.${channel}`;\n  }\n\n}\n\nexport default StompClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}