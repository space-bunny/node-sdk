{"version":3,"sources":["protocols/amqp_stream_client.js"],"names":[],"mappings":"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","file":"protocols/amqp_stream_client.js","sourcesContent":["/**\n * A module that exports an AmqpClient client\n * which inherits from the SpaceBunny base client\n * @module AmqpClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n// Import amqplib\nimport amqp from 'amqplib';\n\n// Import SpaceBunny main module from which AmqpClient inherits\nimport AmqpClient from './amqp_client';\nimport SpaceBunnyErrors from '../spacebunny_errors';\n\nclass AmqpStreamClient extends AmqpClient {\n\n  /**\n   * @constructor\n   * @param {Object} opts - constructor options may contain api-key or connection options\n   */\n  constructor(opts) {\n    super(opts);\n    this._defaultStreamRoutingKey = '#';\n    this._streamQueueArguments = { exclusive: true, autoDelete: true, durable: false };\n    this._streamQueueSuffix = 'stream';\n  }\n\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks, opts) {\n    const promises = streamHooks.map((streamHook) => {\n      return this._attachStreamHook(streamHook, opts);\n    });\n\n    return Promise.any(promises);\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * @private\n   * Start consuming messages from a device's channel\n   * It generates an auto delete queue from which consume\n   * and binds it to the channel exchange\n   *\n   * @param {Object} streamHook - Object containit hook info\n   * { deviceId: {String}, channel: {String}, callback: {func}}\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _attachStreamHook(streamHook, opts) {\n    // Receive messages from imput queue\n    const deviceId = streamHook.deviceId;\n    const channel = streamHook.channel;\n    const routingKey = streamHook.routingKey || this._defaultStreamRoutingKey;\n    const emptyFunction = function() { return undefined; };\n    const callback = streamHook.callback || emptyFunction;\n    if (deviceId === undefined || channel === undefined) {\n      throw new SpaceBunnyErrors.MissingStreamConfigurations('Missing Device ID or Channel');\n    }\n    return new Promise((resolve, reject) => {\n      const currentTime = new Date().getTime();\n      this._createChannel().then((ch) => {\n        this._amqpChannels[currentTime] = ch;\n        return this._amqpChannels[currentTime].checkExchange(this._channelExchange(deviceId, channel));\n      }).then(() => {\n        return this._amqpChannels[currentTime].assertQueue(this._streamQueue(deviceId, channel, currentTime), this._streamQueueArguments);\n      }).then(() => {\n        return this._amqpChannels[currentTime].bindQueue(this._streamQueue(deviceId, channel, currentTime), this._channelExchange(deviceId, channel), routingKey);\n      }).then(() => {\n        return this._amqpChannels[currentTime].consume(this._streamQueue(deviceId, channel, currentTime), (message) => {\n          callback(this._parseContent(message));\n        }, merge(this._subscribeArgs, opts) );\n      }).then(function() {\n        resolve(true);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * @private\n   * Generate the exchange name for a device's channel\n   *\n   * @param {String} deviceId - Device id from which you want to stream\n   * @param {String} channel - channel name from which you want to stream\n   * @param {String} currentTime - current UNIX timestamp\n   * @return a string that represents the stream queue name prefixed with current timestamp, client ID and channel exchange\n   */\n  _streamQueue(deviceId, channel, currentTime) {\n    const prefix = currentTime || new Date().getTime();\n    return `${prefix}-${this._connectionParams.client}-${this._channelExchange(deviceId, channel)}.${this._streamQueueSuffix}`;\n  }\n\n}\n\n// Remove unwanted methods inherited from AmqpClient\ndelete AmqpStreamClient.onReceive;\ndelete AmqpStreamClient.publish;\ndelete AmqpStreamClient._routingKeyFor;\n\nexport default AmqpStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}