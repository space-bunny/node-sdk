{"version":3,"sources":["protocols/amqpStreamClient.js"],"names":[],"mappings":"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","file":"protocols/amqpStreamClient.js","sourcesContent":["/**\n * A module that exports an AmqpStreamClient client\n * which inherits from the Amqp base client\n * @module AmqpStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import AmqpClient module from which AmqpStreamClient inherits\nimport AmqpClient from './amqpClient';\nimport SpaceBunnyErrors from '../spacebunnyErrors';\n\nclass AmqpStreamClient extends AmqpClient {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain client and secret for access keys\n   */\n  constructor(opts) {\n    super(opts);\n    this._defaultStreamRoutingKey = '#';\n    this._streamQueueArguments = { exclusive: true, autoDelete: true, durable: false };\n  }\n\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks, opts) {\n    const promises = streamHooks.map((streamHook) => {\n      return this._attachStreamHook(streamHook, opts);\n    });\n\n    return Promise.any(promises);\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Start consuming messages from a device's channel\n   * It generates an auto delete queue from which consume\n   * and binds it to the channel exchange\n   *\n   * @private\n   * @param {Object} streamHook - Object containit hook info\n   * { deviceId: {String}, channel: {String}, callback: {func}}\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _attachStreamHook(streamHook, opts) {\n    // Receive messages from imput queue\n    const deviceId = streamHook.deviceId;\n    const channel = streamHook.channel;\n    const stream = streamHook.stream;\n    if (stream === undefined && (channel === undefined || deviceId === undefined)) {\n      throw new SpaceBunnyErrors.MissingStreamConfigurations('Missing Stream or Device ID and Channel');\n    }\n    const routingKey = streamHook.routingKey || this._defaultStreamRoutingKey;\n    const emptyFunction = function() { return undefined; };\n    const callback = streamHook.callback || emptyFunction;\n\n    return new Promise((resolve, reject) => {\n      const currentTime = new Date().getTime();\n      this._createChannel(`${currentTime}`).then((ch) => {\n        this._amqpChannels[`${currentTime}`] = ch;\n        let promisesChain = undefined;\n        // if current hook is a stream\n        // checks the existence of the stream queue and starts consuming\n        if (stream) {\n          const streamQueue = this._streamQueue(stream);\n          console.log(`streaming from ${streamQueue}`); // eslint-disable-line no-console\n          promisesChain = this._amqpChannels[`${currentTime}`].checkQueue(streamQueue, this._streamQueueArguments).then(() =>{\n            return this._amqpChannels[`${currentTime}`].consume(streamQueue, (message) => {\n              callback(this._parseContent(message));\n            }, merge(this._subscribeArgs, opts) );\n          });\n        } else {\n          // else if current hook is channel (or a couple deviceId, channel)\n          // creates a temp queue, binds to channel exchange and starts consuming\n          const channelExchangeName = this._channelExchange(deviceId, channel);\n          const streamChannelQueue = this._streamChannelQueue(deviceId, channel, currentTime);\n          console.log(`streaming from ${streamChannelQueue}`); // eslint-disable-line no-console\n          promisesChain = this._amqpChannels[`${currentTime}`].checkExchange(channelExchangeName).then(() =>{\n            return this._amqpChannels[`${currentTime}`].assertQueue(streamChannelQueue, this._streamQueueArguments);\n          }).then(() => {\n            return this._amqpChannels[`${currentTime}`].bindQueue(streamChannelQueue, channelExchangeName, routingKey);\n          }).then(() => {\n            return this._amqpChannels[`${currentTime}`].consume(streamChannelQueue, (message) => {\n              callback(this._parseContent(message));\n            }, merge(this._subscribeArgs, opts) );\n          });\n        }\n        return promisesChain;\n      }).then(function() {\n        resolve(true);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Generate the exchange name for a device's channel\n   *\n   * @private\n   * @param {String} deviceId - Device id from which you want to stream\n   * @param {String} channel - channel name from which you want to stream\n   * @param {String} currentTime - current UNIX timestamp\n   * @return a string that represents the stream queue name prefixed with current timestamp, client ID and channel exchange\n   */\n  _streamQueue(stream) {\n    return `${stream}.${this._liveStreamSuffix}`;\n  }\n\n  /**\n   * Generate the exchange name for a device's channel\n   *\n   * @private\n   * @param {String} deviceId - Device id from which you want to stream\n   * @param {String} channel - channel name from which you want to stream\n   * @param {String} currentTime - current UNIX timestamp\n   * @return a string that represents the stream queue name prefixed with current timestamp, client ID and channel exchange\n   */\n  _streamChannelQueue(deviceId, channel, currentTime) {\n    const prefix = currentTime || new Date().getTime();\n    return `${prefix}-${this._connectionParams.client}-${this._channelExchange(deviceId, channel)}.${this._liveStreamSuffix}`;\n  }\n\n}\n\n// Remove unwanted methods inherited from AmqpClient\ndelete AmqpStreamClient.onReceive;\ndelete AmqpStreamClient.publish;\ndelete AmqpStreamClient._routingKeyFor;\n\nexport default AmqpStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}