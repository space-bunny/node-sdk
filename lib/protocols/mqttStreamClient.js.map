{"version":3,"sources":["protocols/mqttStreamClient.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcM,gBAAgB;YAAhB,gBAAgB;;;;;;;AAMpB,WANI,gBAAgB,CAMR,IAAI,EAAE;0BANd,gBAAgB;;kEAAhB,gBAAgB,aAOZ,IAAI;GACX;;;;;;;;;;AAAA;eARG,gBAAgB;;+BAkBT,WAAW,EAAE,IAAI,EAAE;;;AAC5B,UAAM,aAAa,GAAG,SAAhB,aAAa,GAAc;AAAE,eAAO,SAAS,CAAC;OAAE,CAAC;AACvD,iBAAW,CAAC,OAAO,CAAC,UAAC,UAAU,EAAK;AAClC,YAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;AACrC,YAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;AACnC,YAAM,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;AAC3B,YAAI,QAAQ,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,EAAE;AACnD,gBAAM,IAAI,2BAAiB,2BAA2B,CAAC,8BAA8B,CAAC,CAAC;SACxF;AACD,eAAK,OAAO,CAAC,OAAK,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,GAAG,IAAI,OAAK,eAAe,CAAC,GAAG,CAAC;OACzF,CAAC,CAAC;AACH,aAAO,uBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,eAAK,OAAO,EAAE,CAAC,IAAI,CAAC,UAAC,UAAU,EAAK;AAClC,oBAAU,CAAC,SAAS,CAAC,OAAK,OAAO,EAAE,qBAAM,OAAK,eAAe,EAAE,IAAI,CAAC,EAAE,UAAS,GAAG,EAAE;AAClF,gBAAI,GAAG,EAAE;AACP,oBAAM,CAAC,KAAK,CAAC,CAAC;aACf,MAAM;AACL,wBAAU,CAAC,EAAE,CAAC,SAAS,EAAE,UAAS,KAAK,EAAE,OAAO,EAAE;AAChD,oBAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClC,oBAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,UAAS,UAAU,EAAE;AACvD,yBAAO,UAAU,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC;iBAClF,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,aAAa,CAAC;AAChC,wBAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;eAC1B,CAAC,CAAC;AACH,qBAAO,CAAC,IAAI,CAAC,CAAC;aACf;WACF,CAAC,CAAC;SACJ,CAAC,CAAC,KAAK,CAAC,UAAS,MAAM,EAAE;AACxB,gBAAM,CAAC,MAAM,CAAC,CAAC;SAChB,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;;;;;;;;;;;;oCAWe,QAAQ,EAAE,OAAO,EAAE;AACjC,aAAU,QAAQ,SAAI,OAAO,CAAG;KACjC;;;SA9DG,gBAAgB;;;;;AAkEtB,OAAO,gBAAgB,CAAC,SAAS,CAAC;AAClC,OAAO,gBAAgB,CAAC,OAAO,CAAC;AAChC,OAAO,gBAAgB,CAAC,SAAS,CAAC;;kBAEnB,gBAAgB","file":"protocols/mqttStreamClient.js","sourcesContent":["/**\n * A module that exports an MqttStreamClient client\n * which inherits from the Mqtt base client\n * @module MqttStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import MqttClient main module from which MqttStreamClient inherits\nimport MqttClient from './mqttClient';\nimport SpaceBunnyErrors from '../spacebunnyErrors';\n\nclass MqttStreamClient extends MqttClient {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain client and secret for access keys\n   */\n  constructor(opts) {\n    super(opts);\n  }\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks, opts) {\n    const emptyFunction = function() { return undefined; };\n    streamHooks.forEach((streamHook) => {\n      const deviceId = streamHook.deviceId;\n      const channel = streamHook.channel;\n      const qos = streamHook.qos;\n      if (deviceId === undefined || channel === undefined) {\n        throw new SpaceBunnyErrors.MissingStreamConfigurations('Missing Device ID or Channel');\n      }\n      this._topics[this._streamTopicFor(deviceId, channel)] = qos || this._connectionOpts.qos;\n    });\n    return new Promise((resolve, reject) => {\n      this.connect().then((mqttClient) => {\n        mqttClient.subscribe(this._topics, merge(this._connectionOpts, opts), function(err) {\n          if (err) {\n            reject(false);\n          } else {\n            mqttClient.on('message', function(topic, message) {\n              const splitted = topic.split('/');\n              const callback = streamHooks.filter(function(streamHook) {\n                return streamHook.deviceId === splitted[0] && streamHook.channel === splitted[1];\n              })[0].callback || emptyFunction;\n              callback(topic, message);\n            });\n            resolve(true);\n          }\n        });\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Generate the topic for a specific channel\n   *\n   * @private\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the topic name for that channel\n   */\n  _streamTopicFor(deviceId, channel) {\n    return `${deviceId}/${channel}`;\n  }\n}\n\n// Remove unwnated methods inherited from MqttClient\ndelete MqttStreamClient.onReceive;\ndelete MqttStreamClient.publish;\ndelete MqttStreamClient._topicFor;\n\nexport default MqttStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}