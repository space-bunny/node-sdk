{"version":3,"sources":["protocols/mqttStreamClient.js"],"names":[],"mappings":";;;;;;;;AAOA;;;;AACA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;IAEM;;;;;;;;;;;;;;;;;;;;;+BAUO,aAAa,MAAM;;;AAC5B,aAAO,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAM,gBAAgB,SAAhB,aAAgB,GAAM;AAAE,iBAAO,SAAP,CAAF;SAAN,CADgB;AAEtC,oBAAY,OAAZ,CAAoB,UAAC,UAAD,EAAgB;AAClC,cAAM,SAAS,WAAW,MAAX,CADmB;AAElC,cAAM,WAAW,WAAW,QAAX,CAFiB;AAGlC,cAAM,UAAU,WAAW,OAAX,CAHkB;AAIlC,cAAM,MAAM,WAAW,GAAX,CAJsB;AAKlC,cAAI,WAAW,SAAX,KAAyB,YAAY,SAAZ,IAAyB,aAAa,SAAb,CAAlD,EAA2E;AAC7E,mBAAO,yCAAP,EAD6E;WAA/E;AAGA,cAAI,MAAJ,EAAY;AACV,mBAAK,OAAL,CAAa,OAAK,eAAL,CAAqB,MAArB,CAAb,IAA6C,OAAO,OAAK,eAAL,CAAqB,GAArB,CAD1C;WAAZ,MAEO;AACL,mBAAK,OAAL,CAAa,OAAK,sBAAL,CAA4B,QAA5B,EAAsC,OAAtC,CAAb,IAA+D,OAAO,OAAK,eAAL,CAAqB,GAArB,CADjE;WAFP;SARkB,CAApB,CAFsC;AAgBtC,eAAK,QAAL,GAAgB,IAAhB,CAAqB,UAAC,UAAD,EAAgB;AACnC,qBAAW,SAAX,CAAqB,OAAK,OAAL,EAAc,qBAAM,OAAK,eAAL,EAAsB,IAA5B,CAAnC,EAAsE,UAAC,GAAD,EAAS;AAC7E,gBAAI,GAAJ,EAAS;AACP,qBAAO,KAAP,EADO;aAAT,MAEO;AACL,yBAAW,EAAX,CAAc,SAAd,EAAyB,UAAC,KAAD,EAAQ,OAAR,EAAoB;AAC3C,oBAAM,WAAW,MAAM,KAAN,CAAY,GAAZ,CAAX,CADqC;AAE3C,oBAAM,WAAW,YAAY,MAAZ,CAAmB,UAAC,UAAD,EAAgB;AAClD,yBAAO,WAAW,MAAX,KAAsB,SAAS,CAAT,CAAtB,IACJ,WAAW,QAAX,KAAwB,SAAS,CAAT,CAAxB,IAAuC,WAAW,OAAX,KAAuB,SAAS,CAAT,CAAvB,CAFQ;iBAAhB,CAAnB,CAGd,CAHc,EAGX,QAHW,IAGC,aAHD,CAF0B;AAM3C,yBAAS,KAAT,EAAgB,OAAhB,EAN2C;eAApB,CAAzB,CADK;AASL,sBAAQ,IAAR,EATK;aAFP;WADoE,CAAtE,CADmC;SAAhB,CAArB,CAgBG,KAhBH,CAgBS,UAAC,MAAD,EAAY;AACnB,iBAAO,MAAP,EADmB;SAAZ,CAhBT,CAhBsC;OAArB,CAAnB,CAD4B;;;;;;;;;;;;;;;;2CAiDP,UAAU,SAAS;AACxC,aAAU,iBAAY,OAAtB,CADwC;;;;;;;;;;;;;oCAW1B,QAAQ;AACtB,aAAU,KAAK,gBAAL,CAAsB,MAAtB,UAAiC,KAAK,iBAAL,CADrB;;;;SAtEpB;;;;;;AA4EN,OAAO,iBAAiB,SAAjB;AACP,OAAO,iBAAiB,OAAjB;AACP,OAAO,iBAAiB,SAAjB;;kBAEQ","file":"protocols/mqttStreamClient.js","sourcesContent":["/**\n * A module that exports an MqttStreamClient client\n * which inherits from the Mqtt base client\n * @module MqttStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import MqttClient main module from which MqttStreamClient inherits\nimport MqttClient from './mqttClient';\n\nclass MqttStreamClient extends MqttClient {\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks, opts) {\n    return new Promise((resolve, reject) => {\n      const emptyFunction = () => { return undefined; };\n      streamHooks.forEach((streamHook) => {\n        const stream = streamHook.stream;\n        const deviceId = streamHook.deviceId;\n        const channel = streamHook.channel;\n        const qos = streamHook.qos;\n        if (stream === undefined && (channel === undefined || deviceId === undefined)) {\n          reject('Missing Stream or Device ID and Channel');\n        }\n        if (stream) {\n          this._topics[this._streamTopicFor(stream)] = qos || this._connectionOpts.qos;\n        } else {\n          this._topics[this._streamChannelTopicFor(deviceId, channel)] = qos || this._connectionOpts.qos;\n        }\n      });\n      this._connect().then((mqttClient) => {\n        mqttClient.subscribe(this._topics, merge(this._connectionOpts, opts), (err) => {\n          if (err) {\n            reject(false);\n          } else {\n            mqttClient.on('message', (topic, message) => {\n              const splitted = topic.split('/');\n              const callback = streamHooks.filter((streamHook) => {\n                return streamHook.stream === splitted[0] ||\n                  (streamHook.deviceId === splitted[0] && streamHook.channel === splitted[1]);\n              })[0].callback || emptyFunction;\n              callback(topic, message);\n            });\n            resolve(true);\n          }\n        });\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Generate the topic for a specific channel\n   *\n   * @private\n   * @param {String} deviceId - deviceId from which you want to stream\n   * @param {String} channel - channel name from which you want to stream\n   * @return a string that represents the topic name for that channel\n   */\n  _streamChannelTopicFor(deviceId, channel) {\n    return `${deviceId}/${channel}`;\n  }\n\n  /**\n   * Generate the topic for a specific stream\n   *\n   * @private\n   * @param {String} streamName - stream name from which you want to stream\n   * @return a string that represents the topic name for that stream\n   */\n  _streamTopicFor(stream) {\n    return `${this.liveStreamByName(stream)}/${this._liveStreamSuffix}`;\n  }\n}\n\n// Remove unwnated methods inherited from MqttClient\ndelete MqttStreamClient.onReceive;\ndelete MqttStreamClient.publish;\ndelete MqttStreamClient._topicFor;\n\nexport default MqttStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}