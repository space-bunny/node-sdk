{"version":3,"sources":["protocols/mqttStreamClient.js"],"names":[],"mappings":"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","file":"protocols/mqttStreamClient.js","sourcesContent":["/**\n * A module that exports an MqttStreamClient client\n * which inherits from the Mqtt base client\n * @module MqttStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import MqttClient main module from which MqttStreamClient inherits\nimport MqttClient from './mqttClient';\n\nclass MqttStreamClient extends MqttClient {\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks, opts) {\n    return new Promise((resolve, reject) => {\n      this._connect().then((mqttClient) => {\n        const emptyFunction = () => { return undefined; };\n        streamHooks.forEach((streamHook) => {\n          const stream = streamHook.stream;\n          const deviceId = streamHook.deviceId;\n          const channel = streamHook.channel;\n          const qos = streamHook.qos;\n          const cache = (typeof(streamHook.cache) !== 'boolean') ? true : streamHook.cache;\n          if (stream === undefined && (channel === undefined || deviceId === undefined)) {\n            reject('Missing Stream or Device ID and Channel');\n          }\n          if (stream) {\n            if (!this.liveStreamExists(stream)) {\n              console.error(`Stream ${stream} does not exist`); // eslint-disable-line no-console\n              resolve(false);\n            }\n            // Cached streams generate qos1 connections with persistent queues\n            // Uncached streams generate qos0 connections with auto delete queues\n            this._topics[this._streamTopicFor(stream)] = (cache) ? 1 : 0;\n          } else {\n            // streams connected directly to a specific channel generate qos0 connections with auto delete queues\n            this._topics[this._streamChannelTopicFor(deviceId, channel)] = qos || this._connectionOpts.qos;\n          }\n        });\n        mqttClient.subscribe(this._topics, merge(this._connectionOpts, opts), (err) => {\n          if (err) {\n            reject(false);\n          } else {\n            mqttClient.on('message', (topic, message) => {\n              const splitted = topic.split('/');\n              const streams = streamHooks.filter((streamHook) => {\n                return this.liveStreamByName(streamHook.stream) === splitted[0] ||\n                  (streamHook.deviceId === splitted[0] && streamHook.channel === splitted[1]);\n              });\n              let callback = emptyFunction;\n              if (streams.length > 0) {\n                callback = streams[0].callback || emptyFunction;\n              }\n              callback(topic, this._parseContent(message));\n            });\n            resolve(true);\n          }\n        });\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Generate the topic for a specific channel\n   *\n   * @private\n   * @param {String} deviceId - deviceId from which you want to stream\n   * @param {String} channel - channel name from which you want to stream\n   * @return a string that represents the topic name for that channel\n   */\n  _streamChannelTopicFor(deviceId, channel) {\n    return `${deviceId}/${channel}`;\n  }\n\n  /**\n   * Generate the topic for a specific stream\n   *\n   * @private\n   * @param {String} streamName - stream name from which you want to stream\n   * @return a string that represents the topic name for that stream\n   */\n  _streamTopicFor(stream) {\n    return `${this.liveStreamByName(stream)}/${this._liveStreamSuffix}`;\n  }\n}\n\n// Remove unwnated methods inherited from MqttClient\ndelete MqttStreamClient.onReceive;\ndelete MqttStreamClient.publish;\ndelete MqttStreamClient._topicFor;\n\nexport default MqttStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}