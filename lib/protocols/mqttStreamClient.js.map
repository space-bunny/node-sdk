{"version":3,"sources":["protocols/mqttStreamClient.js"],"names":[],"mappings":";;;;;;;;AAOA;;;;AACA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;IAEM,gB;YAAA,gB;;WAAA,gB;0BAAA,gB;;kEAAA,gB;;;eAAA,gB;;;;;;;;;;;;iCAU+B;AAAA;;AAAA,UAAxB,WAAwB,yDAAV,EAAU;AAAA,UAAN,IAAM;;AACjC,aAAO,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAK,QAAL,GAAgB,IAAhB,CAAqB,UAAC,UAAD,EAAgB;AACnC,cAAM,gBAAgB,SAAhB,aAAgB,GAAM;AAAE,mBAAO,SAAP;AAAmB,WAAjD;AACA,sBAAY,OAAZ,CAAoB,UAAC,UAAD,EAAgB;AAClC,gBAAM,SAAS,WAAW,MAA1B;AACA,gBAAM,WAAW,WAAW,QAA5B;AACA,gBAAM,UAAU,WAAW,OAA3B;AACA,gBAAM,MAAM,WAAW,GAAvB;AACA,gBAAM,QAAS,OAAO,WAAW,KAAlB,KAA6B,SAA9B,GAA2C,IAA3C,GAAkD,WAAW,KAA3E;AACA,gBAAI,WAAW,SAAX,KAAyB,YAAY,SAAZ,IAAyB,aAAa,SAA/D,CAAJ,EAA+E;AAC7E,qBAAO,yCAAP;AACD;AACD,gBAAI,MAAJ,EAAY;AACV,kBAAI,CAAC,OAAK,gBAAL,CAAsB,MAAtB,CAAL,EAAoC;AAClC,wBAAQ,KAAR,aAAwB,MAAxB,sB;AACA,wBAAQ,KAAR;AACD;;;AAGD,qBAAK,OAAL,CAAa,OAAK,eAAL,CAAqB,MAArB,CAAb,IAA8C,KAAD,GAAU,CAAV,GAAc,CAA3D;AACD,aARD,MAQO;;AAEL,qBAAK,OAAL,CAAa,OAAK,sBAAL,CAA4B,QAA5B,EAAsC,OAAtC,CAAb,IAA+D,OAAO,OAAK,eAAL,CAAqB,GAA3F;AACD;AACF,WArBD;AAsBA,qBAAW,SAAX,CAAqB,OAAK,OAA1B,EAAmC,qBAAM,OAAK,eAAX,EAA4B,IAA5B,CAAnC,EAAsE,UAAC,GAAD,EAAS;AAC7E,gBAAI,GAAJ,EAAS;AACP,qBAAO,KAAP;AACD,aAFD,MAEO;AACL,yBAAW,EAAX,CAAc,SAAd,EAAyB,UAAC,KAAD,EAAQ,OAAR,EAAoB;AAC3C,oBAAM,WAAW,MAAM,KAAN,CAAY,GAAZ,CAAjB;AACA,oBAAM,UAAU,YAAY,MAAZ,CAAmB,UAAC,UAAD,EAAgB;AACjD,yBAAO,OAAK,gBAAL,CAAsB,WAAW,MAAjC,MAA6C,SAAS,CAAT,CAA7C,IACJ,WAAW,QAAX,KAAwB,SAAS,CAAT,CAAxB,IAAuC,WAAW,OAAX,KAAuB,SAAS,CAAT,CADjE;AAED,iBAHe,CAAhB;AAIA,oBAAI,WAAW,aAAf;AACA,oBAAI,QAAQ,MAAR,GAAiB,CAArB,EAAwB;AACtB,6BAAW,QAAQ,CAAR,EAAW,QAAX,IAAuB,aAAlC;AACD;AACD,yBAAS,KAAT,EAAgB,OAAK,aAAL,CAAmB,OAAnB,CAAhB;AACD,eAXD;AAYA,sBAAQ,IAAR;AACD;AACF,WAlBD;AAmBD,SA3CD,EA2CG,KA3CH,CA2CS,UAAC,MAAD,EAAY;AACnB,iBAAO,MAAP;AACD,SA7CD;AA8CD,OA/CM,CAAP;AAgDD;;;;;;;;;;;;;;;2CAYsB,Q,EAAU,O,EAAS;AACxC,aAAU,QAAV,SAAsB,OAAtB;AACD;;;;;;;;;;;;oCASe,M,EAAQ;AACtB,aAAU,KAAK,gBAAL,CAAsB,MAAtB,CAAV,SAA2C,KAAK,iBAAhD;AACD;;;SApFG,gB;;;;;;AAwFN,OAAO,iBAAiB,SAAxB;AACA,OAAO,iBAAiB,OAAxB;AACA,OAAO,iBAAiB,SAAxB;;kBAEe,gB","file":"protocols/mqttStreamClient.js","sourcesContent":["/**\n * A module that exports an MqttStreamClient client\n * which inherits from the Mqtt base client\n * @module MqttStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import MqttClient main module from which MqttStreamClient inherits\nimport MqttClient from './mqttClient';\n\nclass MqttStreamClient extends MqttClient {\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks = [], opts) {\n    return new Promise((resolve, reject) => {\n      this._connect().then((mqttClient) => {\n        const emptyFunction = () => { return undefined; };\n        streamHooks.forEach((streamHook) => {\n          const stream = streamHook.stream;\n          const deviceId = streamHook.deviceId;\n          const channel = streamHook.channel;\n          const qos = streamHook.qos;\n          const cache = (typeof(streamHook.cache) !== 'boolean') ? true : streamHook.cache;\n          if (stream === undefined && (channel === undefined || deviceId === undefined)) {\n            reject('Missing Stream or Device ID and Channel');\n          }\n          if (stream) {\n            if (!this.liveStreamExists(stream)) {\n              console.error(`Stream ${stream} does not exist`); // eslint-disable-line no-console\n              resolve(false);\n            }\n            // Cached streams generate qos1 connections with persistent queues\n            // Uncached streams generate qos0 connections with auto delete queues\n            this._topics[this._streamTopicFor(stream)] = (cache) ? 1 : 0;\n          } else {\n            // streams connected directly to a specific channel generate qos0 connections with auto delete queues\n            this._topics[this._streamChannelTopicFor(deviceId, channel)] = qos || this._connectionOpts.qos;\n          }\n        });\n        mqttClient.subscribe(this._topics, merge(this._connectionOpts, opts), (err) => {\n          if (err) {\n            reject(false);\n          } else {\n            mqttClient.on('message', (topic, message) => {\n              const splitted = topic.split('/');\n              const streams = streamHooks.filter((streamHook) => {\n                return this.liveStreamByName(streamHook.stream) === splitted[0] ||\n                  (streamHook.deviceId === splitted[0] && streamHook.channel === splitted[1]);\n              });\n              let callback = emptyFunction;\n              if (streams.length > 0) {\n                callback = streams[0].callback || emptyFunction;\n              }\n              callback(topic, this._parseContent(message));\n            });\n            resolve(true);\n          }\n        });\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Generate the topic for a specific channel\n   *\n   * @private\n   * @param {String} deviceId - deviceId from which you want to stream\n   * @param {String} channel - channel name from which you want to stream\n   * @return a string that represents the topic name for that channel\n   */\n  _streamChannelTopicFor(deviceId, channel) {\n    return `${deviceId}/${channel}`;\n  }\n\n  /**\n   * Generate the topic for a specific stream\n   *\n   * @private\n   * @param {String} streamName - stream name from which you want to stream\n   * @return a string that represents the topic name for that stream\n   */\n  _streamTopicFor(stream) {\n    return `${this.liveStreamByName(stream)}/${this._liveStreamSuffix}`;\n  }\n}\n\n// Remove unwnated methods inherited from MqttClient\ndelete MqttStreamClient.onReceive;\ndelete MqttStreamClient.publish;\ndelete MqttStreamClient._topicFor;\n\nexport default MqttStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}