{"version":3,"sources":["protocols/amqp_client.js"],"names":[],"mappings":"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","file":"protocols/amqp_client.js","sourcesContent":["/**\n * A module that exports an AmqpClient client\n * which inherits from the SpaceBunny base client\n * @module AmqpClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n// Import amqplib\nimport amqp from 'amqplib';\nimport when from 'when';\n\n// Import SpaceBunny main module from which AmqpClient inherits\nimport SpaceBunny from '../spacebunny';\n\nclass AmqpClient extends SpaceBunny {\n\n  /**\n   * @constructor\n   * @param {Object} opts - constructor options may contain api-key or connection options\n   */\n  constructor(opts) {\n    super(opts);\n    this._protocol = 'amqp';\n    this._conn = undefined;\n    this._amqpChannels = {};\n    this._inputQueueArgs = { };\n    this._deviceExchangeArgs = { };\n    this._subscribeArgs = { noAck: true };\n    this._publishArgs = {};\n    this.connection();\n  }\n\n  /**\n   * Subscribe to input channel\n   *\n   * @param {function} callback - function called every time a message is receviced\n   * passing the current message as argument\n   * @param {Object} options - subscription options\n   * @return promise containing the result of the subscription\n   */\n  onReceive(callback, opts) {\n    // Receive messages from imput queue\n    return new Promise((resolve, reject) => {\n      this._createChannel('input').then((channel) => {\n        this._amqpChannels.input = channel;\n        return this._amqpChannels.input.checkQueue(`${this.deviceId()}.${this._inputTopic}`, this._inputQueueArgs);\n      }).then(() => {\n        return this._amqpChannels.input.consume(`${this.deviceId()}.${this._inputTopic}`, (message) => {\n          callback(this._parseContent(message));\n        }, merge(this._subscribeArgs, opts) );\n      }).then(function() {\n        resolve(true);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Publish a message on a specific channel\n   *\n   * @param {String} channel - channel name on which you want to publish a message\n   * @param {Object} message - the message payload\n   * @param {Object} message - the message payload\n   * @return promise containing true if the\n   */\n  publish(channel, message, opts = {}) {\n    opts = merge(this._publishArgs, opts);\n    return new Promise((resolve, reject) => {\n      this._createChannel().then((ch) => {\n        this._amqpChannels.output = ch;\n        const bufferedMessage = new Buffer(this._encapsulateContent(message));\n        return when.all([\n          this._amqpChannels.output.checkExchange(this.deviceId()),\n          this._amqpChannels.output.publish(this.deviceId(), this._routingKeyFor(channel), bufferedMessage, opts)\n        ]);\n      }).then(function(res) {\n        resolve(res);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Destroy the connection between the amqp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._conn === undefined) {\n        reject('Not Connected');\n      } else {\n        this._conn.close().then(function() {\n          resolve(true);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * @private\n   * Establish an amqp connection with the broker\n   * using configurations retrieved from the endpoint\n   *\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _connect(opts) {\n    opts = merge({}, opts);\n\n    return new Promise((resolve, reject) => {\n      if (this._conn !== undefined) {\n        resolve(this._conn);\n      } else {\n        const connectionParams = this._connectionParams;\n        // TODO if ssl change connections string and connection parameters\n        const connectionString = `amqp://${connectionParams.deviceId}:${connectionParams.secret}@${connectionParams.host}:${connectionParams.protocols.amqp.port}/${connectionParams.vhost.replace('/', '%2f')}`;\n        amqp.connect(connectionString).then((conn) => {\n          process.once('SIGINT', function() { conn.close(); });\n          this._conn = conn;\n          resolve(conn);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * @private\n   * Create a channel on current connection, if connection does not\n   * exists creates a new one. If channel already exists return\n   * instance of that channel\n   *\n   * @param {String} channelType - indicates if the channel is input or output\n   * @return a promise containing the current channel\n   */\n  _createChannel() {\n    return new Promise((resolve, reject) => {\n      this._connect().then(function(conn) {\n        return conn.createChannel();\n      }).then((ch) => {\n        resolve(ch);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * @private\n   * Close a channel on current connection, if connection does not\n   * exists creates a new one.\n   *\n   * @param {String} channelType - indicates if the channel is input or output\n   * @return a promise containing the result of the operation\n   */\n  _closeChannel(channelType) {\n    return new Promise((resolve, reject) => {\n      const ch = this._amqpChannels[channelType];\n      if (ch === undefined) {\n        reject('Invalid Channel Object');\n      } else {\n        ch.close().then(function() {\n          resolve(true);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * @private\n   * Generate the routing key for a specific channel\n   *\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the routing key for that channel\n   */\n  _routingKeyFor(channel) {\n    return `${this.deviceId()}.${channel}`;\n  }\n\n  /**\n   * @private\n   * Automatically parse message content\n   *\n   * @param {Object} message - the received message\n   * @return an object containing the input message with parsed content\n   */\n  _parseContent(message) {\n    const parsedMessage = message;\n    if (Buffer.isBuffer(parsedMessage.content)) {\n      const content = parsedMessage.content.toString('utf-8');\n      try {\n        parsedMessage.content = JSON.parse(content);\n      } catch (ex) {\n        parsedMessage.content = content;\n      }\n    }\n    return parsedMessage;\n  }\n}\n\nexport default AmqpClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}