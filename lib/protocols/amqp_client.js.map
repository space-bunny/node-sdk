{"version":3,"sources":["protocols/amqp_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBM,UAAU;YAAV,UAAU;;;;;;;;AAOd,WAPI,UAAU,CAOF,IAAI,EAAE;0BAPd,UAAU;;uEAAV,UAAU,aAQN,IAAI;;AACV,UAAK,SAAS,GAAG,MAAM,CAAC;AACxB,UAAK,eAAe,GAAG,SAAS,CAAC;AACjC,UAAK,kBAAkB,GAAG,UAAU,CAAC;AACrC,UAAK,eAAe,GAAG,SAAS,CAAC;AACjC,UAAK,aAAa,GAAG,EAAE,CAAC;AACxB,UAAK,eAAe,GAAG,EAAG,CAAC;AAC3B,UAAK,mBAAmB,GAAG,EAAG,CAAC;AAC/B,UAAK,cAAc,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AACtC,UAAK,YAAY,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;AAC3C,UAAK,cAAc,GAAG;AACpB,cAAQ,EAAE,KAAK;AACf,eAAS,EAAE,EAAE;AAAA,KACd,CAAC;AACF,UAAK,mBAAmB,EAAE,CAAC;;GAC5B;;;;;;;;;;AAAA;eAvBG,UAAU;;8BAiCJ,QAAQ,EAAE,IAAI,EAAE;;;AACxB,UAAI,GAAG,qBAAM,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC;;AAAC,AAExC,aAAO,uBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,eAAK,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,EAAE,EAAK;AAC9C,iBAAO,eAAK,GAAG,CAAC,CACd,EAAE,CAAC,UAAU,CAAI,OAAK,QAAQ,EAAE,SAAI,OAAK,WAAW,EAAI,OAAK,eAAe,CAAC,EAC7E,EAAE,CAAC,OAAO,CAAI,OAAK,QAAQ,EAAE,SAAI,OAAK,WAAW,EAAI,UAAC,OAAO,EAAK;AAChE,oBAAQ,CAAC,OAAK,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;WACvC,EAAE,IAAI,CAAE,CACV,CAAC,CAAC;SACJ,CAAC,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE;AACpB,iBAAO,CAAC,GAAG,CAAC,CAAC;SACd,CAAC,CAAC,KAAK,CAAC,UAAS,MAAM,EAAE;AACxB,gBAAM,CAAC,MAAM,CAAC,CAAC;SAChB,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;;;;;;;;;;;4BAUO,OAAO,EAAE,OAAO,EAAa;;;UAAX,IAAI,yDAAG,EAAE;;AACjC,UAAI,GAAG,qBAAM,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AACtC,aAAO,uBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,eAAK,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,EAAE,EAAK;AAC/C,cAAM,eAAe,GAAG,IAAI,MAAM,CAAC,OAAK,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;AACtE,cAAM,QAAQ,GAAG,CACf,EAAE,CAAC,aAAa,CAAC,OAAK,QAAQ,EAAE,CAAC,EACjC,EAAE,CAAC,OAAO,CAAC,OAAK,QAAQ,EAAE,EAAE,OAAK,cAAc,CAAC,OAAO,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,CACjF,CAAC;AACF,cAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;AAC7B,oBAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC;WACrC;AACD,iBAAO,eAAK,GAAG,CAAC,QAAQ,CAAC,CAAC;SAC3B,CAAC,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE;AACpB,iBAAO,CAAC,GAAG,CAAC,CAAC;SACd,CAAC,CAAC,KAAK,CAAC,UAAS,MAAM,EAAE;AACxB,gBAAM,CAAC,MAAM,CAAC,CAAC;SAChB,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;;;;;;;;iCAOY;;;AACX,aAAO,uBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,YAAI,OAAK,eAAe,KAAK,SAAS,EAAE;AACtC,gBAAM,CAAC,eAAe,CAAC,CAAC;SACzB,MAAM;AACL,iBAAK,eAAe,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAM;AACtC,mBAAK,eAAe,GAAG,SAAS,CAAC;AACjC,mBAAO,CAAC,IAAI,CAAC,CAAC;WACf,CAAC,CAAC,KAAK,CAAC,UAAS,MAAM,EAAE;AACxB,kBAAM,CAAC,MAAM,CAAC,CAAC;WAChB,CAAC,CAAC;SACJ;OACF,CAAC,CAAC;KACJ;;;;;;;;;;;;;;;+BAYU;;;AACT,UAAI,cAAc,GAAG,qBAAM,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;;AAEpD,aAAO,uBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,YAAI,OAAK,eAAe,KAAK,SAAS,EAAE;AACtC,iBAAO,CAAC,OAAK,eAAe,CAAC,CAAC;SAC/B,MAAM;AACL,cAAM,gBAAgB,GAAG,OAAK,iBAAiB;;AAAC,AAEhD,cAAI,gBAAgB,GAAG,EAAE,CAAC;AAC1B,cAAI,OAAK,IAAI,EAAE;AACb,gBAAI,OAAK,gBAAgB,EAAE,EAAE;AAC3B,8BAAgB,QAAM,OAAK,kBAAkB,IAAG,gBAAgB,CAAC,QAAQ,IAAI,gBAAgB,CAAC,MAAM,CAAA,SAAI,gBAAgB,CAAC,MAAM,SAAI,gBAAgB,CAAC,IAAI,SAAI,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,SAAI,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,AAAE,CAAC;AACpP,4BAAc,GAAG,qBAAM,cAAc,EAAE,OAAK,QAAQ,CAAC,CAAC;aACvD,MAAM;AACL,oBAAM,IAAI,4BAAiB,8BAA8B,CAAC,4CAA4C,CAAC,CAAC;aACzG;WACF,MAAM;AACL,4BAAgB,QAAM,OAAK,eAAe,IAAG,gBAAgB,CAAC,QAAQ,IAAI,gBAAgB,CAAC,MAAM,CAAA,SAAI,gBAAgB,CAAC,MAAM,SAAI,gBAAgB,CAAC,IAAI,SAAI,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,SAAI,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,AAAE,CAAC;WAC/O;AACD,4BAAK,OAAO,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;AAC5D,gBAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AAC7B,oBAAM,CAAC,GAAG,CAAC,CAAC;aACb,CAAC,CAAC;AACH,gBAAI,CAAC,EAAE,CAAC,SAAS,EAAE,UAAS,MAAM,EAAE;AAClC,qBAAO,CAAC,IAAI,CAAC,MAAM,CAAC;AAAC,aACtB,CAAC,CAAC;AACH,gBAAI,CAAC,EAAE,CAAC,WAAW,EAAE,UAAS,MAAM,EAAE;AACpC,qBAAO,CAAC,IAAI,CAAC,MAAM,CAAC;AAAC,aACtB,CAAC,CAAC;AACH,mBAAK,eAAe,GAAG,IAAI,CAAC;AAC5B,mBAAO,CAAC,OAAK,eAAe,CAAC,CAAC;WAC/B,CAAC,CAAC,KAAK,CAAC,UAAS,MAAM,EAAE;AACxB,kBAAM,CAAC,MAAM,CAAC,CAAC;WAChB,CAAC,CAAC;SACJ;OACF,CAAC,CAAC;KACJ;;;;;;;;;;;;;mCAUc,WAAW,EAAa;;;UAAX,IAAI,yDAAG,EAAE;;AACnC,aAAO,uBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,YAAI,OAAK,aAAa,CAAC,WAAW,CAAC,EAAE;AACnC,iBAAO,CAAC,OAAK,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC;SAC1C,MAAM;AACL,iBAAK,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAS,IAAI,EAAE;AAClC,gBAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;AAC7B,qBAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC;aACpC,MAAM;AACL,qBAAO,IAAI,CAAC,aAAa,EAAE,CAAC;aAC7B;WACF,CAAC,CAAC,IAAI,CAAC,UAAC,EAAE,EAAK;AACd,mBAAK,aAAa,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;AACrC,mBAAO,CAAC,EAAE,CAAC,CAAC;WACb,CAAC,CAAC,KAAK,CAAC,UAAS,MAAM,EAAE;AACxB,kBAAM,CAAC,MAAM,CAAC,CAAC;WAChB,CAAC,CAAC;SACJ;OACF,CAAC,CAAC;KACJ;;;;;;;;;;;;kCASa,WAAW,EAAE;;;AACzB,aAAO,uBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,YAAM,EAAE,GAAG,OAAK,aAAa,CAAC,WAAW,CAAC,CAAC;AAC3C,YAAI,EAAE,KAAK,SAAS,EAAE;AACpB,gBAAM,CAAC,wBAAwB,CAAC,CAAC;SAClC,MAAM;AACL,YAAE,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAW;AACzB,gBAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;AAC5C,mBAAO,CAAC,IAAI,CAAC,CAAC;WACf,CAAC,CAAC,KAAK,CAAC,UAAS,MAAM,EAAE;AACxB,kBAAM,CAAC,MAAM,CAAC,CAAC;WAChB,CAAC,CAAC;SACJ;OACF,CAAC,CAAC;KACJ;;;;;;;;;;;;mCASc,OAAO,EAAE;AACtB,aAAU,IAAI,CAAC,QAAQ,EAAE,SAAI,OAAO,CAAG;KACxC;;;;;;;;;;;;kCASa,OAAO,EAAE;AACrB,UAAM,aAAa,GAAG,OAAO,CAAC;AAC9B,UAAI,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;AAC1C,YAAM,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACxD,YAAI;AACF,uBAAa,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC7C,CAAC,OAAO,EAAE,EAAE;AACX,uBAAa,CAAC,OAAO,GAAG,OAAO,CAAC;SACjC;OACF;AACD,aAAO,aAAa,CAAC;KACtB;;;SAvOG,UAAU;;;kBA0OD,UAAU","file":"protocols/amqp_client.js","sourcesContent":["/**\n * A module that exports an AmqpClient client\n * which inherits from the SpaceBunny base client\n * @module AmqpClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\nimport when from 'when';\n\n// Import amqplib\nimport amqp from 'amqplib';\n\n// Import SpaceBunny main module from which AmqpClient inherits\nimport SpaceBunny from '../spacebunny';\nimport SpaceBunnyErrors from '../spacebunny_errors';\n\nclass AmqpClient extends SpaceBunny {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain api-key or connection options\n   * (deviceId and secret) for devices.\n   */\n  constructor(opts) {\n    super(opts);\n    this._protocol = 'amqp';\n    this._protocolPrefix = 'amqp://';\n    this._sslProtocolPrefix = 'amqps://';\n    this._amqpConnection = undefined;\n    this._amqpChannels = {};\n    this._inputQueueArgs = { };\n    this._deviceExchangeArgs = { };\n    this._subscribeArgs = { noAck: true };\n    this._publishArgs = { withConfirm: false };\n    this._socketOptions = {\n      frameMax: 32768, // 32 KB\n      heartbeat: 60 // 60 seconds\n    };\n    this.getConnectionParams();\n  }\n\n  /**\n   * Subscribe to input channel\n   *\n   * @param {function} callback - function called every time a message is received\n   * passing the current message as argument\n   * @param {Object} options - subscription options\n   * @return promise containing the result of the subscription\n   */\n  onReceive(callback, opts) {\n    opts = merge(this._subscribeArgs, opts);\n    // Receive messages from imput queue\n    return new Promise((resolve, reject) => {\n      this._createChannel('input', opts).then((ch) => {\n        return when.all([\n          ch.checkQueue(`${this.deviceId()}.${this._inputTopic}`, this._inputQueueArgs),\n          ch.consume(`${this.deviceId()}.${this._inputTopic}`, (message) => {\n            callback(this._parseContent(message));\n          }, opts )\n        ]);\n      }).then(function(res) {\n        resolve(res);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Publish a message on a specific channel\n   *\n   * @param {String} channel - channel name on which you want to publish a message\n   * @param {Object} message - the message payload\n   * @param {Object} opts - publication options\n   * @return promise containing the result of the subscription\n   */\n  publish(channel, message, opts = {}) {\n    opts = merge(this._publishArgs, opts);\n    return new Promise((resolve, reject) => {\n      this._createChannel('output', opts).then((ch) => {\n        const bufferedMessage = new Buffer(this._encapsulateContent(message));\n        const promises = [\n          ch.checkExchange(this.deviceId()),\n          ch.publish(this.deviceId(), this._routingKeyFor(channel), bufferedMessage, opts)\n        ];\n        if (opts.withConfirm === true) {\n          promises.push(ch.waitForConfirms());\n        }\n        return when.all(promises);\n      }).then(function(res) {\n        resolve(res);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Destroy the connection between the amqp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._amqpConnection === undefined) {\n        reject('Not Connected');\n      } else {\n        this._amqpConnection.close().then(() => {\n          this._amqpConnection = undefined;\n          resolve(true);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Establish an amqp connection with the broker\n   * using configurations retrieved from the endpoint.\n   * If the connnection already exists, returns the current connnection\n   *\n   * @private\n   * @return a promise containing current connection\n   */\n  _connect() {\n    let connectionOpts = merge({}, this._socketOptions);\n\n    return new Promise((resolve, reject) => {\n      if (this._amqpConnection !== undefined) {\n        resolve(this._amqpConnection);\n      } else {\n        const connectionParams = this._connectionParams;\n        // TODO if ssl change connections string and connection parameters\n        let connectionString = '';\n        if (this._ssl) {\n          if (this._checkSslOptions()) {\n            connectionString = `${this._sslProtocolPrefix}${connectionParams.deviceId || connectionParams.client}:${connectionParams.secret}@${connectionParams.host}:${connectionParams.protocols.amqp.sslPort}/${connectionParams.vhost.replace('/', '%2f')}`;\n            connectionOpts = merge(connectionOpts, this._sslOpts);\n          } else {\n            throw new SpaceBunnyErrors.ApiKeyOrConfigurationsRequired('Missing required SSL connection parameters');\n          }\n        } else {\n          connectionString = `${this._protocolPrefix}${connectionParams.deviceId || connectionParams.client}:${connectionParams.secret}@${connectionParams.host}:${connectionParams.protocols.amqp.port}/${connectionParams.vhost.replace('/', '%2f')}`;\n        }\n        amqp.connect(connectionString, connectionOpts).then((conn) => {\n          conn.on('error', function(err) {\n            reject(err);\n          });\n          conn.on('blocked', function(reason) {\n            console.warn(reason); // eslint-disable-line no-console\n          });\n          conn.on('unblocked', function(reason) {\n            console.warn(reason); // eslint-disable-line no-console\n          });\n          this._amqpConnection = conn;\n          resolve(this._amqpConnection);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Creates a channel on current connection\n   *\n   * @private\n   * @param {String} channelName - indicates the channel name\n   * @param {Object} opts - channel options\n   * @return a promise containing the current channel\n   */\n  _createChannel(channelName, opts = {}) {\n    return new Promise((resolve, reject) => {\n      if (this._amqpChannels[channelName]) {\n        resolve(this._amqpChannels[channelName]);\n      } else {\n        this._connect().then(function(conn) {\n          if (opts.withConfirm === true) {\n            return conn.createConfirmChannel();\n          } else {\n            return conn.createChannel();\n          }\n        }).then((ch) => {\n          this._amqpChannels[channelName] = ch;\n          resolve(ch);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Close a channel on current connection\n   *\n   * @private\n   * @param {String} channelName - indicates if the channel is input or output\n   * @return a promise containing the result of the operation\n   */\n  _closeChannel(channelName) {\n    return new Promise((resolve, reject) => {\n      const ch = this._amqpChannels[channelName];\n      if (ch === undefined) {\n        reject('Invalid Channel Object');\n      } else {\n        ch.close().then(function() {\n          this._amqpChannels[channelName] = undefined;\n          resolve(true);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Generate the routing key for a specific channel\n   *\n   * @private\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the routing key for that channel\n   */\n  _routingKeyFor(channel) {\n    return `${this.deviceId()}.${channel}`;\n  }\n\n  /**\n   * Automatically parse message content\n   *\n   * @private\n   * @param {Object/String} message - the received message\n   * @return an object containing the input message with parsed content\n   */\n  _parseContent(message) {\n    const parsedMessage = message;\n    if (Buffer.isBuffer(parsedMessage.content)) {\n      const content = parsedMessage.content.toString('utf-8');\n      try {\n        parsedMessage.content = JSON.parse(content);\n      } catch (ex) {\n        parsedMessage.content = content;\n      }\n    }\n    return parsedMessage;\n  }\n}\n\nexport default AmqpClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}