{"version":3,"sources":["protocols/stompStreamClient.js"],"names":[],"mappings":"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","file":"protocols/stompStreamClient.js","sourcesContent":["/**\n * A module that exports an StompStreamClient client\n * which inherits from the Stomp base client\n * @module StompStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import StompClient main module from which StompStreamClient inherits\nimport StompClient from './stompClient';\nimport SpaceBunnyErrors from '../spacebunnyErrors';\n\nclass StompStreamClient extends StompClient {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain client and secret for access keys\n   */\n  constructor(opts) {\n    super(opts);\n    this._subscriptions = {};\n    this._channelExchangePrefix = 'exchange';\n    this._defaultPattern = '#';\n  }\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks, opts) {\n    const promises = streamHooks.map((streamHook) => {\n      return this._attachStreamHook(streamHook, opts);\n    });\n\n    return Promise.any(promises);\n  }\n\n  /**\n   * Unsubscribe client from a topic\n   *\n   * @param {String} deviceId - Device uuid\n   * @param {String} channel - channel name\n   * @return a promise containing the result of the operation\n   */\n  unsubscribe(deviceId, channel) {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        const topic = this._topicFor(deviceId, channel);\n        const subscription = this._subscriptions[topic];\n        subscription.unsubscribe(topic);\n        delete this._subscriptions[topic];\n        resolve(true);\n      }\n    });\n  }\n\n  /**\n   * Destroy the connection between the stomp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        for (const subscription in this._subscriptions) {\n          this._subscriptions[subscription].unsubscribe();\n        }\n        this._subscriptions = {};\n        this._stompConnection.disconnect(function() {\n          this._stompConnection = undefined;\n          resolve(true);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Start consuming messages from a device's channel\n   * It generates an auto delete queue from which consume\n   * and binds it to the channel exchange\n   *\n   * @private\n   * @param {Object} streamHook - Object containit hook info\n   * { deviceId: {String}, channel: {String}, callback: {func}}\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _attachStreamHook(streamHook, opts) {\n    opts = merge({}, opts);\n    // Receive messages from imput queue\n    const stream = streamHook.stream;\n    const deviceId = streamHook.deviceId;\n    const channel = streamHook.channel;\n    const emptyFunction = function() { return undefined; };\n    const callback = streamHook.callback || emptyFunction;\n    if (stream === undefined && (channel === undefined || deviceId === undefined)) {\n      throw new SpaceBunnyErrors.MissingStreamConfigurations('Missing Stream or Device ID and Channel');\n    }\n    return new Promise((resolve, reject) => {\n      this._connect().then((client) => {\n        let topic = undefined;\n        if (stream) {\n          topic = this._streamTopicFor(stream);\n        } else {\n          topic = this._streamChannelTopicFor(deviceId, channel);\n        }\n        console.log(`streaming from ${topic}`); // eslint-disable-line no-console\n        const subscription = client.subscribe(topic, function(message) {\n          callback(message);\n        }, function(reason) {\n          reject(reason);\n        });\n        this._subscriptions[topic] = subscription;\n        resolve(true);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} deviceId - deviceId from which you want to stream from\n   * @param {String} channel - channel name from which you want to stream from\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} pattern - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamChannelTopicFor(deviceId, channel, type, pattern) {\n    return `/${type || this._channelExchangePrefix}/${deviceId}.${channel}/${pattern || this._defaultPattern}`;\n  }\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} stream - stream identifier from which you want to stream from\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} pattern - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamTopicFor(stream, type, pattern) {\n    return `/${type || this._existingQueuePrefix}/${stream}.${this._liveStreamSuffix}/${pattern || this._defaultPattern}`;\n  }\n\n}\n\n// Remove unwnated methods inherited from StompClient\ndelete StompStreamClient.onReceive;\ndelete StompStreamClient.publish;\ndelete StompStreamClient._subcriptionFor;\ndelete StompStreamClient._destinationFor;\n\nexport default StompStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}