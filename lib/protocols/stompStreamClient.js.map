{"version":3,"sources":["protocols/stompStreamClient.js"],"names":["CONFIG","require","StompStreamClient","opts","_subscriptions","stompStreamOpts","stomp","stream","_exchangePrefix","exchangePrefix","_defaultPattern","defaultPattern","streamHooks","promises","map","streamHook","_attachStreamHook","length","Promise","any","reject","deviceId","channel","resolve","_stompConnection","undefined","topic","_topicFor","subscription","unsubscribe","disconnect","catch","reason","cache","emptyFunction","callback","connect","then","client","tempQueue","liveStreamExists","console","error","_cachedStreamTopicFor","_streamTopicFor","_liveStreamSuffix","_streamChannelTopicFor","subscriptionHeaders","messageCallback","message","_parseContent","body","headers","subscribe","type","pattern","streamName","_existingQueuePrefix","liveStreamByName","StompClient","onReceive","publish","_subcriptionFor","_destinationFor"],"mappings":"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","file":"protocols/stompStreamClient.js","sourcesContent":["/**\n * A module that exports an StompStreamClient client\n * which inherits from the Stomp base client\n * @module StompStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import StompClient main module from which StompStreamClient inherits\nimport StompClient from './stompClient';\n\nconst CONFIG = require('../../config/constants').CONFIG;\n\nclass StompStreamClient extends StompClient {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain client and secret for access keys\n   */\n  constructor(opts) {\n    super(opts);\n    this._subscriptions = {};\n    const stompStreamOpts = CONFIG.stomp.stream;\n    this._exchangePrefix = stompStreamOpts.exchangePrefix;\n    this._defaultPattern = stompStreamOpts.defaultPattern;\n  }\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks = [], opts) {\n    const promises = streamHooks.map((streamHook) => {\n      return this._attachStreamHook(streamHook, opts);\n    }) || [];\n    if (promises.length > 0) {\n      return Promise.any(promises);\n    } else {\n      return Promise.reject('Missing stream hooks');\n    }\n  }\n\n  /**\n   * Unsubscribe client from a topic\n   *\n   * @param {String} deviceId - Device uuid\n   * @param {String} channel - channel name\n   * @return a promise containing the result of the operation\n   */\n  unsubscribe(deviceId, channel) {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        const topic = this._topicFor(deviceId, channel);\n        const subscription = this._subscriptions[topic];\n        subscription.unsubscribe(topic);\n        delete this._subscriptions[topic];\n        resolve(true);\n      }\n    });\n  }\n\n  /**\n   * Destroy the connection between the stomp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        for (const subscription in this._subscriptions) {\n          if (subscription) {\n            this._subscriptions[subscription].unsubscribe();\n          }\n        }\n        this._subscriptions = {};\n        this._stompConnection.disconnect(() => {\n          this._stompConnection = undefined;\n          resolve(true);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Start consuming messages from a device's channel\n   * It generates an auto delete queue from which consume\n   * and binds it to the channel exchange\n   *\n   * @private\n   * @param {Object} streamHook - Object containit hook info\n   * { deviceId: {String}, channel: {String}, callback: {func}}\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _attachStreamHook(streamHook, opts) {\n    opts = merge({}, opts);\n    return new Promise((resolve, reject) => {\n      // Receive messages from imput queue\n      const stream = streamHook.stream;\n      const deviceId = streamHook.deviceId;\n      const channel = streamHook.channel;\n      const cache = (typeof(streamHook.cache) !== 'boolean') ? true : streamHook.cache;\n      const emptyFunction = () => { return undefined; };\n      const callback = streamHook.callback || emptyFunction;\n      if (stream === undefined && (channel === undefined || deviceId === undefined)) {\n        reject('Missing Stream or Device ID and Channel');\n      }\n      this.connect().then((client) => {\n        let topic = undefined;\n        let tempQueue = undefined;\n        if (stream) {\n          if (!this.liveStreamExists(stream)) {\n            console.error(`Stream ${stream} does not exist`); // eslint-disable-line no-console\n            resolve(false);\n          }\n          if (cache) {\n            // Cached streams are connected to the existing live stream queue\n            topic = this._cachedStreamTopicFor(stream);\n          } else {\n            // Uncached streams are connected to the stream exchange and create a temp queue\n            topic = this._streamTopicFor(stream);\n            tempQueue = this.tempQueue(stream, this._liveStreamSuffix);\n          }\n        } else {\n          // else if current hook is channel (or a couple deviceId, channel)\n          // creates a temp queue, binds to channel exchange and starts consuming\n          topic = this._streamChannelTopicFor(deviceId, channel);\n          tempQueue = this.tempQueue(deviceId, channel);\n        }\n        const subscriptionHeaders = {};\n        if (tempQueue) { subscriptionHeaders['x-queue-name'] = tempQueue; }\n        const messageCallback = (message) => {\n          callback(this._parseContent(message.body), message.headers);\n        };\n        const subscription = client.subscribe(topic, messageCallback, subscriptionHeaders);\n        this._subscriptions[topic] = subscription;\n        resolve(true);\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} deviceId - deviceId from which you want to stream from\n   * @param {String} channel - channel name from which you want to stream from\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} pattern - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamChannelTopicFor(deviceId, channel, type, pattern) {\n    return `/${type || this._exchangePrefix}/${deviceId}.${channel}/${pattern || this._defaultPattern}`;\n  }\n\n  /**\n   * Generate the subscription string for cached live streams\n   *\n   * @private\n   * @param {String} streamName - stream name from which you want to stream\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @return a string that represents the topic name for that channel\n   */\n  _cachedStreamTopicFor(streamName, type) {\n    return `/${type || this._existingQueuePrefix}/${this.liveStreamByName(streamName)}.` +\n      `${this._liveStreamSuffix}`;\n  }\n\n  /**\n   * Generate the subscription for live streams without caching\n   *\n   * @private\n   * @param {String} streamName - stream name from which you want to stream\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} pattern - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamTopicFor(streamName, type, pattern) {\n    return `/${type || this._exchangePrefix}/${this.liveStreamByName(streamName)}.` +\n      `${this._liveStreamSuffix}/${pattern || this._defaultPattern}`;\n  }\n\n}\n\n// Remove unwnated methods inherited from StompClient\ndelete StompStreamClient.onReceive;\ndelete StompStreamClient.publish;\ndelete StompStreamClient._subcriptionFor;\ndelete StompStreamClient._destinationFor;\n\nexport default StompStreamClient;\n"],"sourceRoot":"./src"}