{"version":3,"sources":["protocols/stompStreamClient.js"],"names":["require","CONFIG","StompStreamClient","opts","_subscriptions","stompStreamOpts","stomp","stream","_exchangePrefix","exchangePrefix","_defaultPattern","defaultPattern","streamHooks","length","Promise","mapSeries","streamHook","_attachStreamHook","reject","Error","subscriptionId","undefined","resolve","isConnected","subscription","unsubscribe","subscriptions","Object","keys","forEach","_stompConnection","disconnect","catch","reason","deviceId","channel","bindingKey","cache","emptyFunction","callback","connect","then","client","topic","tempQueue","liveStreamExists","console","error","_cachedStreamTopicFor","_streamTopicFor","_liveStreamSuffix","_streamChannelTopicFor","subscriptionHeaders","messageCallback","message","_parseContent","body","headers","subscribe","id","e","params","type","_existingQueuePrefix","liveStreamByName","StompClient","onReceive","publish","_subcriptionFor","_destinationFor"],"mappings":"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","file":"stompStreamClient.js","sourcesContent":["/**\n * A module that exports an StompStreamClient client\n * which inherits from the Stomp base client\n * @module StompStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\nimport md5 from 'js-md5';\n\n// Import StompClient main module from which StompStreamClient inherits\nimport StompClient from './stompClient';\n\nconst { CONFIG } = require('../../config/constants');\n\nclass StompStreamClient extends StompClient {\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain client and secret for access keys\n   */\n  constructor(opts) {\n    super(opts);\n    this._subscriptions = {};\n    const stompStreamOpts = CONFIG.stomp.stream;\n    this._exchangePrefix = stompStreamOpts.exchangePrefix;\n    this._defaultPattern = stompStreamOpts.defaultPattern;\n  }\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks = [], opts) {\n    if (streamHooks.length > 0) {\n      return Promise.mapSeries(streamHooks, (streamHook) => {\n        return this._attachStreamHook(streamHook, opts);\n      });\n    } else {\n      return Promise.reject(new Error('Missing stream hooks'));\n    }\n  }\n\n  /**\n   * Unsubscribe client from a topic\n   *\n   * @param {String} subscriptionId - subscription ID\n   * @return a promise containing the result of the operation\n   */\n  unsubscribe(subscriptionId = undefined) {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected()) {\n        reject(new Error('Invalid connection'));\n      } else {\n        const subscription = this._subscriptions[subscriptionId];\n        if (subscription) {\n          subscription.unsubscribe();\n          delete this._subscriptions[subscriptionId];\n          resolve(true);\n        } else {\n          reject(new Error('Subscription not found'));\n        }\n      }\n    });\n  }\n\n  /**\n   * Destroy the connection between the stomp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected()) {\n        reject(new Error('Invalid connection'));\n      } else {\n        const subscriptions = Object.keys(this._subscriptions);\n        subscriptions.forEach((subscription) => {\n          if (this._subscriptions[subscription]) {\n            this._subscriptions[subscription].unsubscribe();\n          }\n        });\n        this._subscriptions = {};\n        this._stompConnection.disconnect(() => {\n          this._stompConnection = undefined;\n          resolve(true);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Start consuming messages from a device's channel\n   * It generates an auto delete queue from which consume\n   * and binds it to the channel exchange\n   *\n   * @private\n   * @param {Object} streamHook - Object containit hook info\n   * { deviceId: {String}, channel: {String}, callback: {func}}\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _attachStreamHook(streamHook, opts = {}) {\n    opts = merge({}, opts);\n    return new Promise((resolve, reject) => {\n      // Receive messages from imput queue\n      const {\n        stream = undefined, deviceId = undefined, channel = undefined, bindingKey = undefined\n      } = streamHook;\n      const cache = (typeof (streamHook.cache) !== 'boolean') ? true : streamHook.cache;\n      const emptyFunction = () => { return undefined; };\n      const callback = streamHook.callback || emptyFunction;\n      if (stream === undefined && deviceId === undefined) {\n        reject(new Error('Missing Stream or Device ID'));\n      }\n      this.connect().then((client) => {\n        let topic;\n        let tempQueue;\n        if (stream) {\n          if (!this.liveStreamExists(stream)) {\n            console.error(`Stream ${stream} does not exist`); // eslint-disable-line no-console\n            resolve(false);\n          }\n          if (cache) {\n            // Cached streams are connected to the existing live stream queue\n            topic = this._cachedStreamTopicFor({ stream });\n          } else {\n            // Uncached streams are connected to the stream exchange and create a temp queue\n            topic = this._streamTopicFor({ stream, bindingKey });\n            tempQueue = this.tempQueue(stream, this._liveStreamSuffix);\n          }\n        } else {\n          // else if current hook is channel (or a couple deviceId, channel)\n          // creates a temp queue, binds to channel exchange and starts consuming\n          topic = this._streamChannelTopicFor({ deviceId, channel, bindingKey });\n          tempQueue = this.tempQueue(deviceId, channel);\n        }\n        const subscriptionHeaders = {};\n        if (tempQueue) { subscriptionHeaders['x-queue-name'] = tempQueue; }\n        const messageCallback = (message) => {\n          callback(this._parseContent(message.body), message.headers);\n        };\n        try {\n          const subscriptionId = md5(`${tempQueue}-${topic}`);\n          const subscription = client.subscribe(topic, messageCallback, {\n            ...subscriptionHeaders,\n            id: subscriptionId\n          });\n          this._subscriptions[subscriptionId] = subscription;\n          resolve(merge(streamHook, { id: subscriptionId }));\n        } catch (e) {\n          console.error(e); // eslint-disable-line no-console\n          resolve(undefined);\n        }\n      }).catch((reason) => {\n        console.error(reason); // eslint-disable-line no-console\n        resolve(undefined);\n      });\n    });\n  }\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} deviceId - deviceId from which you want to stream from\n   * @param {String} channel - channel name from which you want to stream from\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} bindingKey - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamChannelTopicFor(params = {}) {\n    const {\n      deviceId = undefined, channel = undefined, type = this._exchangePrefix, bindingKey = this._defaultPattern\n    } = params;\n    let topic = deviceId;\n    if (channel) {\n      topic += `.${channel}`;\n    }\n    return `/${type}/${topic}/${bindingKey}`;\n  }\n\n  /**\n   * Generate the subscription string for cached live streams\n   *\n   * @private\n   * @param {String} stream - stream name from which you want to stream\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @return a string that represents the topic name for that channel\n   */\n  _cachedStreamTopicFor(params = {}) {\n    const {\n      stream = undefined, type = this._existingQueuePrefix\n    } = params;\n    const topic = this.liveStreamByName(stream);\n    return `/${type}/${topic}.${this._liveStreamSuffix}`;\n  }\n\n  /**\n   * Generate the subscription for live streams without caching\n   *\n   * @private\n   * @param {String} stream - stream name from which you want to stream\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} bindingKey - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamTopicFor(params = {}) {\n    const {\n      stream = undefined, type = this._exchangePrefix, bindingKey = this._defaultPattern\n    } = params;\n    const topic = this.liveStreamByName(stream);\n    return `/${type}/${topic}.${this._liveStreamSuffix}/${bindingKey}`;\n  }\n}\n\n// Remove unwnated methods inherited from StompClient\ndelete StompStreamClient.onReceive;\ndelete StompStreamClient.publish;\ndelete StompStreamClient._subcriptionFor;\ndelete StompStreamClient._destinationFor;\n\nexport default StompStreamClient;\n"],"sourceRoot":"../src"}