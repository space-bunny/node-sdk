{"version":3,"sources":["protocols/stompStreamClient.js"],"names":[],"mappings":"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","file":"protocols/stompStreamClient.js","sourcesContent":["/**\n * A module that exports an StompStreamClient client\n * which inherits from the Stomp base client\n * @module StompStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import StompClient main module from which StompStreamClient inherits\nimport StompClient from './stompClient';\nimport SpaceBunnyErrors from '../spacebunnyErrors';\n\nclass StompStreamClient extends StompClient {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain client and secret for access keys\n   */\n  constructor(opts) {\n    super(opts);\n    this._subscriptions = {};\n    this._channelExchangePrefix = 'exchange';\n    this._defaultPattern = '#';\n  }\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks, opts) {\n    const promises = streamHooks.map((streamHook) => {\n      return this._attachStreamHook(streamHook, opts);\n    });\n\n    return Promise.any(promises);\n  }\n\n  /**\n   * Unsubscribe client from a topic\n   *\n   * @param {String} deviceId - Device uuid\n   * @param {String} channel - channel name\n   * @return a promise containing the result of the operation\n   */\n  unsubscribe(deviceId, channel) {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        const topic = this._topicFor(deviceId, channel);\n        const subscription = this._subscriptions[topic];\n        subscription.unsubscribe(topic);\n        delete this._subscriptions[topic];\n        resolve(true);\n      }\n    });\n  }\n\n  /**\n   * Destroy the connection between the stomp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        for (const subscription in this._subscriptions) {\n          this._subscriptions[subscription].unsubscribe();\n        }\n        this._subscriptions = {};\n        this._stompConnection.disconnect(function() {\n          this._stompConnection = undefined;\n          resolve(true);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Start consuming messages from a device's channel\n   * It generates an auto delete queue from which consume\n   * and binds it to the channel exchange\n   *\n   * @private\n   * @param {Object} streamHook - Object containit hook info\n   * { deviceId: {String}, channel: {String}, callback: {func}}\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _attachStreamHook(streamHook, opts) {\n    opts = merge({}, opts);\n    // Receive messages from imput queue\n    const deviceId = streamHook.deviceId;\n    const channel = streamHook.channel;\n    const emptyFunction = function() { return undefined; };\n    const callback = streamHook.callback || emptyFunction;\n    if (deviceId === undefined || channel === undefined) {\n      throw new SpaceBunnyErrors.MissingStreamConfigurations('Missing Device ID or Channel');\n    }\n    return new Promise((resolve, reject) => {\n      this._connect().then((client) => {\n        const topic = this._topicFor(deviceId, channel);\n        const subscription = client.subscribe(topic, function(message) {\n          callback(message);\n        }, function(reason) {\n          reject(reason);\n        });\n        this._subscriptions[topic] = subscription;\n        resolve(true);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the topic name for that channel\n   */\n  _topicFor(deviceId, channel, type, pattern) {\n    return `/${type || this._channelExchangePrefix}/${deviceId}.${channel}/${pattern || this._defaultPattern}`;\n  }\n\n}\n\n// Remove unwnated methods inherited from StompClient\ndelete StompStreamClient.onReceive;\ndelete StompStreamClient.publish;\ndelete StompStreamClient._subcriptionFor;\ndelete StompStreamClient._destinationFor;\n\nexport default StompStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}