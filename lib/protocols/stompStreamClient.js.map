{"version":3,"sources":["protocols/stompStreamClient.js"],"names":[],"mappings":"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","file":"protocols/stompStreamClient.js","sourcesContent":["/**\n * A module that exports an StompStreamClient client\n * which inherits from the Stomp base client\n * @module StompStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import StompClient main module from which StompStreamClient inherits\nimport StompClient from './stompClient';\n\nclass StompStreamClient extends StompClient {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain client and secret for access keys\n   */\n  constructor(opts) {\n    super(opts);\n    this._subscriptions = {};\n    this._channelExchangePrefix = 'exchange';\n    this._defaultPattern = '#';\n  }\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks, opts) {\n    const promises = streamHooks.map((streamHook) => {\n      return this._attachStreamHook(streamHook, opts);\n    });\n\n    return Promise.any(promises);\n  }\n\n  /**\n   * Unsubscribe client from a topic\n   *\n   * @param {String} deviceId - Device uuid\n   * @param {String} channel - channel name\n   * @return a promise containing the result of the operation\n   */\n  unsubscribe(deviceId, channel) {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        const topic = this._topicFor(deviceId, channel);\n        const subscription = this._subscriptions[topic];\n        subscription.unsubscribe(topic);\n        delete this._subscriptions[topic];\n        resolve(true);\n      }\n    });\n  }\n\n  /**\n   * Destroy the connection between the stomp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        for (const subscription in this._subscriptions) {\n          if (subscription) {\n            this._subscriptions[subscription].unsubscribe();\n          }\n        }\n        this._subscriptions = {};\n        this._stompConnection.disconnect(() => {\n          this._stompConnection = undefined;\n          resolve(true);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Start consuming messages from a device's channel\n   * It generates an auto delete queue from which consume\n   * and binds it to the channel exchange\n   *\n   * @private\n   * @param {Object} streamHook - Object containit hook info\n   * { deviceId: {String}, channel: {String}, callback: {func}}\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _attachStreamHook(streamHook, opts) {\n    opts = merge({}, opts);\n    return new Promise((resolve, reject) => {\n      // Receive messages from imput queue\n      const stream = streamHook.stream;\n      const deviceId = streamHook.deviceId;\n      const channel = streamHook.channel;\n      const cache = streamHook.cache || true;\n      const emptyFunction = () => { return undefined; };\n      const callback = streamHook.callback || emptyFunction;\n      if (stream === undefined && (channel === undefined || deviceId === undefined)) {\n        reject('Missing Stream or Device ID and Channel');\n      }\n      this._connect().then((client) => {\n        let topic = undefined;\n        if (stream) {\n          if (cache) {\n            topic = this._cachedStreamTopicFor(stream);\n          } else {\n            topic = this._streamTopicFor(stream);\n          }\n        } else {\n          topic = this._streamChannelTopicFor(deviceId, channel);\n        }\n        const subscription = client.subscribe(topic, (message) => {\n          callback(message);\n        }, (reason) => {\n          reject(reason);\n        });\n        this._subscriptions[topic] = subscription;\n        resolve(true);\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} deviceId - deviceId from which you want to stream from\n   * @param {String} channel - channel name from which you want to stream from\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} pattern - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamChannelTopicFor(deviceId, channel, type, pattern) {\n    return `/${type || this._channelExchangePrefix}/${deviceId}.${channel}/${pattern || this._defaultPattern}`;\n  }\n\n  /**\n   * Generate the subscription string for cached live streams\n   *\n   * @private\n   * @param {String} streamName - stream name from which you want to stream\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @return a string that represents the topic name for that channel\n   */\n  _cachedStreamTopicFor(streamName, type) {\n    return `/${type || this._existingQueuePrefix}/${this.liveStreamByName(streamName)}.` +\n      `${this._liveStreamSuffix}`;\n  }\n\n  /**\n   * Generate the subscription for live streams without caching\n   *\n   * @private\n   * @param {String} streamName - stream name from which you want to stream\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} pattern - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamTopicFor(streamName, type, pattern) {\n    return `/${type || this._channelExchangePrefix}/${this.liveStreamByName(streamName)}.` +\n      `${this._liveStreamSuffix}/${pattern || this._defaultPattern}`;\n  }\n\n}\n\n// Remove unwnated methods inherited from StompClient\ndelete StompStreamClient.onReceive;\ndelete StompStreamClient.publish;\ndelete StompStreamClient._subcriptionFor;\ndelete StompStreamClient._destinationFor;\n\nexport default StompStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}