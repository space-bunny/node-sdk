{"version":3,"sources":["protocols/stompStreamClient.js"],"names":[],"mappings":"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","file":"protocols/stompStreamClient.js","sourcesContent":["/**\n * A module that exports an StompStreamClient client\n * which inherits from the Stomp base client\n * @module StompStreamClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import StompClient main module from which StompStreamClient inherits\nimport StompClient from './stompClient';\n\nconst CONFIG = require('../../config/constants').CONFIG;\n\nclass StompStreamClient extends StompClient {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain client and secret for access keys\n   */\n  constructor(opts) {\n    super(opts);\n    this._subscriptions = {};\n    const stompStreamOpts = CONFIG.stomp.stream;\n    this._exchangePrefix = stompStreamOpts.exchangePrefix;\n    this._defaultPattern = stompStreamOpts.defaultPattern;\n  }\n\n  /**\n   * Subscribe to multiple stream hooks\n   *\n   * @param {Array} streamHooks - Array of objects. Each objects containing\n   * { deviceId: {string}, channel: {string}, callback: {func} }\n   * @param {Object} options - subscription options\n   * @return promise containing the result of multiple subscriptions\n   */\n  streamFrom(streamHooks = [], opts) {\n    const promises = streamHooks.map((streamHook) => {\n      return this._attachStreamHook(streamHook, opts);\n    }) || [];\n    if (promises.length > 0) {\n      return Promise.any(promises);\n    } else {\n      return Promise.reject('Missing stream hooks');\n    }\n  }\n\n  /**\n   * Unsubscribe client from a topic\n   *\n   * @param {String} deviceId - Device uuid\n   * @param {String} channel - channel name\n   * @return a promise containing the result of the operation\n   */\n  unsubscribe(deviceId, channel) {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        const topic = this._topicFor(deviceId, channel);\n        const subscription = this._subscriptions[topic];\n        subscription.unsubscribe(topic);\n        delete this._subscriptions[topic];\n        resolve(true);\n      }\n    });\n  }\n\n  /**\n   * Destroy the connection between the stomp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        for (const subscription in this._subscriptions) {\n          if (subscription) {\n            this._subscriptions[subscription].unsubscribe();\n          }\n        }\n        this._subscriptions = {};\n        this._stompConnection.disconnect(() => {\n          this._stompConnection = undefined;\n          resolve(true);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Start consuming messages from a device's channel\n   * It generates an auto delete queue from which consume\n   * and binds it to the channel exchange\n   *\n   * @private\n   * @param {Object} streamHook - Object containit hook info\n   * { deviceId: {String}, channel: {String}, callback: {func}}\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _attachStreamHook(streamHook, opts) {\n    opts = merge({}, opts);\n    return new Promise((resolve, reject) => {\n      // Receive messages from imput queue\n      const stream = streamHook.stream;\n      const deviceId = streamHook.deviceId;\n      const channel = streamHook.channel;\n      const cache = (typeof(streamHook.cache) !== 'boolean') ? true : streamHook.cache;\n      const emptyFunction = () => { return undefined; };\n      const callback = streamHook.callback || emptyFunction;\n      if (stream === undefined && (channel === undefined || deviceId === undefined)) {\n        reject('Missing Stream or Device ID and Channel');\n      }\n      this.connect().then((client) => {\n        let topic = undefined;\n        let tempQueue = undefined;\n        if (stream) {\n          if (!this.liveStreamExists(stream)) {\n            console.error(`Stream ${stream} does not exist`); // eslint-disable-line no-console\n            resolve(false);\n          }\n          if (cache) {\n            // Cached streams are connected to the existing live stream queue\n            topic = this._cachedStreamTopicFor(stream);\n          } else {\n            // Uncached streams are connected to the stream exchange and create a temp queue\n            topic = this._streamTopicFor(stream);\n            tempQueue = this.tempQueue(stream, this._liveStreamSuffix);\n          }\n        } else {\n          // else if current hook is channel (or a couple deviceId, channel)\n          // creates a temp queue, binds to channel exchange and starts consuming\n          topic = this._streamChannelTopicFor(deviceId, channel);\n          tempQueue = this.tempQueue(deviceId, channel);\n        }\n        const subscriptionHeaders = {};\n        if (tempQueue) { subscriptionHeaders['x-queue-name'] = tempQueue; }\n        const messageCallback = (message) => {\n          callback(this._parseContent(message.body), message.headers);\n        };\n        const subscription = client.subscribe(topic, messageCallback, subscriptionHeaders);\n        this._subscriptions[topic] = subscription;\n        resolve(true);\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} deviceId - deviceId from which you want to stream from\n   * @param {String} channel - channel name from which you want to stream from\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} pattern - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamChannelTopicFor(deviceId, channel, type, pattern) {\n    return `/${type || this._exchangePrefix}/${deviceId}.${channel}/${pattern || this._defaultPattern}`;\n  }\n\n  /**\n   * Generate the subscription string for cached live streams\n   *\n   * @private\n   * @param {String} streamName - stream name from which you want to stream\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @return a string that represents the topic name for that channel\n   */\n  _cachedStreamTopicFor(streamName, type) {\n    return `/${type || this._existingQueuePrefix}/${this.liveStreamByName(streamName)}.` +\n      `${this._liveStreamSuffix}`;\n  }\n\n  /**\n   * Generate the subscription for live streams without caching\n   *\n   * @private\n   * @param {String} streamName - stream name from which you want to stream\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} pattern - binding pattern\n   * @return a string that represents the topic name for that channel\n   */\n  _streamTopicFor(streamName, type, pattern) {\n    return `/${type || this._exchangePrefix}/${this.liveStreamByName(streamName)}.` +\n      `${this._liveStreamSuffix}/${pattern || this._defaultPattern}`;\n  }\n\n}\n\n// Remove unwnated methods inherited from StompClient\ndelete StompStreamClient.onReceive;\ndelete StompStreamClient.publish;\ndelete StompStreamClient._subcriptionFor;\ndelete StompStreamClient._destinationFor;\n\nexport default StompStreamClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}