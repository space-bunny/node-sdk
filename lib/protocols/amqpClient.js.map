{"version":3,"sources":["protocols/amqpClient.js"],"names":[],"mappings":"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","file":"protocols/amqpClient.js","sourcesContent":["/**\n * A module that exports an AmqpClient client\n * which inherits from the SpaceBunny base client\n * @module AmqpClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\nimport when from 'when';\n\n// Import amqplib\nimport amqp from 'amqplib';\n\n// Import SpaceBunny main module from which AmqpClient inherits\nimport SpaceBunny from '../spacebunny';\nimport SpaceBunnyErrors from '../spacebunnyErrors';\n\nclass AmqpClient extends SpaceBunny {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain api-key or connection options\n   * (deviceId and secret) for devices.\n   */\n  constructor(opts) {\n    super(opts);\n    this._protocol = 'amqp';\n    this._protocolPrefix = 'amqp://';\n    this._sslProtocolPrefix = 'amqps://';\n    this._amqpConnection = undefined;\n    this._amqpChannels = {};\n    this._inputQueueArgs = { };\n    this._deviceExchangeArgs = { };\n    this._subscribeArgs = { noAck: true };\n    this._publishArgs = { withConfirm: false };\n    this._socketOptions = {\n      frameMax: 32768, // 32 KB\n      heartbeat: 60 // 60 seconds\n    };\n    this.getConnectionParams();\n  }\n\n  /**\n   * Subscribe to input channel\n   *\n   * @param {function} callback - function called every time a message is received\n   * passing the current message as argument\n   * @param {Object} options - subscription options\n   * @return promise containing the result of the subscription\n   */\n  onReceive(callback, opts) {\n    opts = merge(this._subscribeArgs, opts);\n    // Receive messages from imput queue\n    return new Promise((resolve, reject) => {\n      this._createChannel('input', opts).then((ch) => {\n        return when.all([\n          ch.checkQueue(`${this.deviceId()}.${this._inputTopic}`, this._inputQueueArgs),\n          ch.consume(`${this.deviceId()}.${this._inputTopic}`, (message) => {\n            callback(this._parseContent(message));\n          }, opts )\n        ]);\n      }).then(function(res) {\n        resolve(res);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Publish a message on a specific channel\n   *\n   * @param {String} channel - channel name on which you want to publish a message\n   * @param {Object} message - the message payload\n   * @param {Object} opts - publication options\n   * @return promise containing the result of the subscription\n   */\n  publish(channel, message, opts = {}) {\n    opts = merge(this._publishArgs, opts);\n    return new Promise((resolve, reject) => {\n      this._createChannel('output', opts).then((ch) => {\n        const bufferedMessage = new Buffer(this._encapsulateContent(message));\n        const promises = [\n          ch.checkExchange(this.deviceId()),\n          ch.publish(this.deviceId(), this._routingKeyFor(channel), bufferedMessage, opts)\n        ];\n        if (opts.withConfirm === true) {\n          promises.push(ch.waitForConfirms());\n        }\n        return when.all(promises);\n      }).then(function(res) {\n        resolve(res);\n      }).catch(function(reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Destroy the connection between the amqp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._amqpConnection === undefined) {\n        reject('Not Connected');\n      } else {\n        this._amqpConnection.close().then(() => {\n          this._amqpConnection = undefined;\n          resolve(true);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Establish an amqp connection with the broker\n   * using configurations retrieved from the endpoint.\n   * If the connnection already exists, returns the current connnection\n   *\n   * @private\n   * @return a promise containing current connection\n   */\n  _connect() {\n    let connectionOpts = merge({}, this._socketOptions);\n\n    return new Promise((resolve, reject) => {\n      if (this._amqpConnection !== undefined) {\n        resolve(this._amqpConnection);\n      } else {\n        const connectionParams = this._connectionParams;\n        // TODO if ssl change connections string and connection parameters\n        let connectionString = '';\n        if (this._ssl) {\n          if (this._checkSslOptions()) {\n            connectionString = `${this._sslProtocolPrefix}${connectionParams.deviceId || connectionParams.client}:${connectionParams.secret}@${connectionParams.host}:${connectionParams.protocols.amqp.sslPort}/${connectionParams.vhost.replace('/', '%2f')}`;\n            connectionOpts = merge(connectionOpts, this._sslOpts);\n          } else {\n            throw new SpaceBunnyErrors.ApiKeyOrConfigurationsRequired('Missing required SSL connection parameters');\n          }\n        } else {\n          connectionString = `${this._protocolPrefix}${connectionParams.deviceId || connectionParams.client}:${connectionParams.secret}@${connectionParams.host}:${connectionParams.protocols.amqp.port}/${connectionParams.vhost.replace('/', '%2f')}`;\n        }\n        amqp.connect(connectionString, connectionOpts).then((conn) => {\n          conn.on('error', function(err) {\n            reject(err);\n          });\n          conn.on('blocked', function(reason) {\n            console.warn(reason); // eslint-disable-line no-console\n          });\n          conn.on('unblocked', function(reason) {\n            console.warn(reason); // eslint-disable-line no-console\n          });\n          this._amqpConnection = conn;\n          resolve(this._amqpConnection);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Creates a channel on current connection\n   *\n   * @private\n   * @param {String} channelName - indicates the channel name\n   * @param {Object} opts - channel options\n   * @return a promise containing the current channel\n   */\n  _createChannel(channelName, opts = {}) {\n    channelName = `output${(opts.withConfirm === true) ? 'WithConfirm' : ''}`;\n    return new Promise((resolve, reject) => {\n      if (this._amqpChannels[channelName]) {\n        resolve(this._amqpChannels[channelName]);\n      } else {\n        this._connect().then(function(conn) {\n          if (opts.withConfirm === true) {\n            return conn.createConfirmChannel();\n          } else {\n            return conn.createChannel();\n          }\n        }).then((ch) => {\n          this._amqpChannels[channelName] = ch;\n          resolve(ch);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Close a channel on current connection\n   *\n   * @private\n   * @param {String} channelName - indicates if the channel is input or output\n   * @return a promise containing the result of the operation\n   */\n  _closeChannel(channelName) {\n    return new Promise((resolve, reject) => {\n      const ch = this._amqpChannels[channelName];\n      if (ch === undefined) {\n        reject('Invalid Channel Object');\n      } else {\n        ch.close().then(function() {\n          this._amqpChannels[channelName] = undefined;\n          resolve(true);\n        }).catch(function(reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Generate the routing key for a specific channel\n   *\n   * @private\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the routing key for that channel\n   */\n  _routingKeyFor(channel) {\n    return `${this.deviceId()}.${channel}`;\n  }\n\n  /**\n   * Automatically parse message content\n   *\n   * @private\n   * @param {Object/String} message - the received message\n   * @return an object containing the input message with parsed content\n   */\n  _parseContent(message) {\n    const parsedMessage = message;\n    if (Buffer.isBuffer(parsedMessage.content)) {\n      const content = parsedMessage.content.toString('utf-8');\n      try {\n        parsedMessage.content = JSON.parse(content);\n      } catch (ex) {\n        parsedMessage.content = content;\n      }\n    }\n    return parsedMessage;\n  }\n}\n\nexport default AmqpClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}