{"version":3,"sources":["protocols/amqpClient.js"],"names":[],"mappings":"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","file":"protocols/amqpClient.js","sourcesContent":["/**\n * A module that exports an AmqpClient client\n * which inherits from the SpaceBunny base client\n * @module AmqpClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\nimport when from 'when';\nimport _ from 'lodash';\n\n// Import amqplib\nimport amqp from 'amqplib';\n\n// Import SpaceBunny main module from which AmqpClient inherits\nimport SpaceBunny from '../spacebunny';\nimport AmqpMessage from '../messages/amqpMessage';\nconst CONFIG = require('../../config/constants').CONFIG;\n\nclass AmqpClient extends SpaceBunny {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain Device-Key or connection options\n   * (deviceId and secret) for devices.\n   */\n  constructor(opts) {\n    super(opts);\n    this._amqpConnection = undefined;\n    this._amqpChannels = {};\n    const amqpOptions = CONFIG.amqp;\n    this._protocol = amqpOptions.protocol;\n    this._sslProtocol = amqpOptions.ssl.protocol;\n    this._inputQueueArgs = amqpOptions.inputQueueArgs;\n    this._deviceExchangeArgs = amqpOptions.deviceExchangeArgs;\n    this._subscribeArgs = amqpOptions.subscribeArgs;\n    this._publishArgs = amqpOptions.publishArgs;\n    this._socketOptions = amqpOptions.socketOptions;\n  }\n\n  /**\n   * Subscribe to input channel\n   *\n   * @param {function} callback - function called every time a message is received\n   * passing the current message as argument\n   * @param {Object} options - subscription options\n   * @return promise containing the result of the subscription\n   */\n  onReceive(callback, opts) {\n    opts = merge(this._subscribeArgs, opts);\n    opts.noAck = (opts.ack === null);\n    // Receive messages from imput queue\n    return new Promise((resolve, reject) => {\n      this._createChannel('input', opts).then((ch) => {\n        return when.all([\n          ch.checkQueue(`${this.deviceId()}.${this._inboxTopic}`, this._inputQueueArgs),\n          ch.consume(`${this.deviceId()}.${this._inboxTopic}`, (message) => {\n            // Create message object\n            const amqpMessage = new AmqpMessage(message, this._deviceId, opts);\n            const ackNeeded = this._autoAck(opts.ack);\n            // Check if should be accepted or not\n            if (amqpMessage.blackListed()) {\n              if (ackNeeded) { ch.nack(message, opts.allUpTo, opts.requeue); }\n              return;\n            }\n            // Call message callback\n            callback(this._parseContent(amqpMessage.content), amqpMessage.fields, amqpMessage.properties);\n            // Check if ACK is needed\n            if (ackNeeded) { ch.ack(message, opts.allUpTo); }\n          }, opts)\n        ]);\n      }).then((res) => {\n        resolve(res);\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Publish a message on a specific channel\n   *\n   * @param {String} channel - channel name on which you want to publish a message\n   * @param {Object} message - the message payload\n   * @param {Object} opts - publication options\n   * @return promise containing the result of the subscription\n   */\n  publish(channel, message, opts = {}) {\n    opts = merge(this._publishArgs, opts);\n    return new Promise((resolve, reject) => {\n      this._createChannel('output', opts).then((ch) => {\n        const bufferedMessage = new Buffer(this._encapsulateContent(message));\n        const promises = [\n          ch.checkExchange(this.deviceId()),\n          ch.publish(this.deviceId(), this._routingKeyFor(channel), bufferedMessage, opts)\n        ];\n        if (opts.withConfirm === true) {\n          promises.push(ch.waitForConfirms());\n        }\n        return when.all(promises);\n      }).then((res) => {\n        resolve(res);\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Destroy the connection between the amqp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._amqpConnection === undefined) {\n        reject('Not Connected');\n      } else {\n        this._amqpConnection.close().then(() => {\n          this._amqpConnection = undefined;\n          resolve(true);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Establish an amqp connection with the broker\n   * using configurations retrieved from the endpoint.\n   * If the connnection already exists, returns the current connnection\n   *\n   * @private\n   * @return a promise containing current connection\n   */\n  _connect() {\n    let connectionOpts = merge({}, this._socketOptions);\n\n    return new Promise((resolve, reject) => {\n      this.getEndpointConfigs().then((endpointConfigs) => {\n        const connectionParams = endpointConfigs.connection;\n        if (this._amqpConnection !== undefined) {\n          resolve(this._amqpConnection);\n        } else {\n          // TODO if ssl change connections string and connection parameters\n          let connectionString = '';\n          if (this._ssl) {\n            connectionString = `${this._sslProtocol}://${connectionParams.deviceId || connectionParams.client}:` +\n              `${connectionParams.secret}@${connectionParams.host}:` +\n              `${connectionParams.protocols.amqp.sslPort}/${connectionParams.vhost.replace('/', '%2f')}`;\n            connectionOpts = merge(connectionOpts, this._sslOpts);\n          } else {\n            connectionString = `${this._protocol}://${connectionParams.deviceId || connectionParams.client}:` +\n              `${connectionParams.secret}@${connectionParams.host}:` +\n              `${connectionParams.protocols.amqp.port}/${connectionParams.vhost.replace('/', '%2f')}`;\n          }\n          amqp.connect(connectionString, connectionOpts).then((conn) => {\n            conn.on('error', (err) => {\n              reject(err);\n            });\n            conn.on('blocked', (reason) => {\n              console.warn(reason); // eslint-disable-line no-console\n            });\n            conn.on('unblocked', (reason) => {\n              console.warn(reason); // eslint-disable-line no-console\n            });\n            this._amqpConnection = conn;\n            resolve(this._amqpConnection);\n          }).catch((reason) => {\n            reject(reason);\n          });\n        }\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Creates a channel on current connection\n   *\n   * @private\n   * @param {String} channelName - indicates the channel name\n   * @param {Object} opts - channel options\n   * @return a promise containing the current channel\n   */\n  _createChannel(channelName, opts = {}) {\n    channelName = `${channelName}${(opts.withConfirm === true) ? 'WithConfirm' : ''}`;\n    return new Promise((resolve, reject) => {\n      if (this._amqpChannels[channelName]) {\n        resolve(this._amqpChannels[channelName]);\n      } else {\n        this._connect().then((conn) => {\n          if (opts.withConfirm === true) {\n            return conn.createConfirmChannel();\n          } else {\n            return conn.createChannel();\n          }\n        }).then((ch) => {\n          this._amqpChannels[channelName] = ch;\n          resolve(ch);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Close a channel on current connection\n   *\n   * @private\n   * @param {String} channelName - indicates if the channel is input or output\n   * @return a promise containing the result of the operation\n   */\n  _closeChannel(channelName, opts = {}) {\n    channelName = `${channelName}${(opts.withConfirm === true) ? 'WithConfirm' : ''}`;\n    return new Promise((resolve, reject) => {\n      const ch = this._amqpChannels[channelName];\n      if (ch === undefined) {\n        reject('Invalid Channel Object');\n      } else {\n        ch.close().then(() => {\n          this._amqpChannels[channelName] = undefined;\n          resolve(true);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Generate the routing key for a specific channel\n   *\n   * @private\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the routing key for that channel\n   */\n  _routingKeyFor(channel) {\n    return `${this.deviceId()}.${channel}`;\n  }\n\n  /**\n   * Check if the SDK have to automatically ack messages\n   *\n   * @private\n   * @param {String} ack - the ack type, it should be 'manual' or 'auto'\n   * @return boolean - true if messages have to be autoacked, false otherwise\n   */\n  _autoAck(ack) {\n    if (ack) {\n      if (!_.includes(CONFIG[this._protocol].ackTypes, ack)) {\n        console.error('Wrong acknowledge type'); // eslint-disable-line no-console\n      }\n      switch (ack) {\n        case 'auto':\n          return true;\n        default:\n          return false;\n      }\n    }\n    return true;\n  }\n\n}\n\nexport default AmqpClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}