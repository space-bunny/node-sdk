{"version":3,"sources":["protocols/amqpClient.js"],"names":["CONFIG","require","AmqpClient","opts","_amqpConnection","undefined","_amqpChannels","amqpOptions","amqp","_protocol","protocol","_tlsProtocol","tls","_inputQueueArgs","inputQueueArgs","_deviceExchangeArgs","deviceExchangeArgs","_subscribeArgs","subscribeArgs","_publishArgs","publishArgs","_connectionOpts","connectionOpts","callback","noAck","ack","resolve","reject","_createChannel","then","ch","all","checkQueue","deviceId","_inboxTopic","consume","message","amqpMessage","_deviceId","ackNeeded","_autoAck","blackListed","nack","allUpTo","requeue","_parseContent","content","fields","properties","res","catch","reason","channel","bufferedMessage","Buffer","_encapsulateContent","promises","checkExchange","publish","_routingKeyFor","withConfirm","push","waitForConfirms","close","getEndpointConfigs","endpointConfigs","connectionParams","connection","connectionString","_tls","client","secret","host","protocols","tlsPort","vhost","replace","_tlsOpts","port","connect","conn","on","err","console","warn","channelName","createConfirmChannel","createChannel","ackTypes","error"],"mappings":"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","file":"amqpClient.js","sourcesContent":["/**\n * A module that exports an AmqpClient client\n * which inherits from the SpaceBunny base client\n * @module AmqpClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\nimport when from 'when';\nimport _ from 'lodash';\n\n// Import amqplib\nimport amqp from 'amqplib';\n\n// Import SpaceBunny main module from which AmqpClient inherits\nimport SpaceBunny from '../spacebunny';\nimport AmqpMessage from '../messages/amqpMessage';\nconst CONFIG = require('../../config/constants').CONFIG;\n\nclass AmqpClient extends SpaceBunny {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain Device-Key or connection options\n   * (deviceId and secret) for devices.\n   */\n  constructor(opts) {\n    super(opts);\n    this._amqpConnection = undefined;\n    this._amqpChannels = {};\n    const amqpOptions = CONFIG.amqp;\n    this._protocol = amqpOptions.protocol;\n    this._tlsProtocol = amqpOptions.tls.protocol;\n    this._inputQueueArgs = amqpOptions.inputQueueArgs;\n    this._deviceExchangeArgs = amqpOptions.deviceExchangeArgs;\n    this._subscribeArgs = amqpOptions.subscribeArgs;\n    this._publishArgs = amqpOptions.publishArgs;\n    this._connectionOpts = amqpOptions.connectionOpts;\n  }\n\n  /**\n   * Subscribe to input channel\n   *\n   * @param {function} callback - function called every time a message is received\n   * passing the current message as argument\n   * @param {Object} options - subscription options\n   * @return promise containing the result of the subscription\n   */\n  onReceive(callback, opts) {\n    opts = merge(this._subscribeArgs, opts);\n    opts.noAck = (opts.ack === null);\n    // Receive messages from imput queue\n    return new Promise((resolve, reject) => {\n      this._createChannel('input', opts).then((ch) => {\n        return when.all([\n          ch.checkQueue(`${this.deviceId()}.${this._inboxTopic}`, this._inputQueueArgs),\n          ch.consume(`${this.deviceId()}.${this._inboxTopic}`, (message) => {\n            // Create message object\n            const amqpMessage = new AmqpMessage(message, this._deviceId, opts);\n            const ackNeeded = this._autoAck(opts.ack);\n            // Check if should be accepted or not\n            if (amqpMessage.blackListed()) {\n              if (ackNeeded) { ch.nack(message, opts.allUpTo, opts.requeue); }\n              return;\n            }\n            // Call message callback\n            callback(this._parseContent(amqpMessage.content), amqpMessage.fields, amqpMessage.properties);\n            // Check if ACK is needed\n            if (ackNeeded) { ch.ack(message, opts.allUpTo); }\n          }, opts)\n        ]);\n      }).then((res) => {\n        resolve(res);\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Publish a message on a specific channel\n   *\n   * @param {String} channel - channel name on which you want to publish a message\n   * @param {Object} message - the message payload\n   * @param {Object} opts - publication options\n   * @return promise containing the result of the subscription\n   */\n  publish(channel, message, opts = {}) {\n    opts = merge(this._publishArgs, opts);\n    return new Promise((resolve, reject) => {\n      this._createChannel('output', opts).then((ch) => {\n        const bufferedMessage = new Buffer(this._encapsulateContent(message));\n        const promises = [\n          ch.checkExchange(this.deviceId()),\n          ch.publish(this.deviceId(), this._routingKeyFor(channel), bufferedMessage, opts)\n        ];\n        if (opts.withConfirm === true) {\n          promises.push(ch.waitForConfirms());\n        }\n        return when.all(promises);\n      }).then((res) => {\n        resolve(res);\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Destroy the connection between the amqp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._amqpConnection === undefined) {\n        reject('Not Connected');\n      } else {\n        this._amqpConnection.close().then(() => {\n          this._amqpConnection = undefined;\n          this._amqpChannels = {};\n          resolve(true);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Establish an amqp connection with the broker\n   * using configurations retrieved from the endpoint.\n   * If the connnection already exists, returns the current connnection\n   *\n   * @return a promise containing current connection\n   */\n  connect(opts = {}) {\n    let connectionOpts = merge(this._connectionOpts, opts);\n\n    return new Promise((resolve, reject) => {\n      this.getEndpointConfigs().then((endpointConfigs) => {\n        const connectionParams = endpointConfigs.connection;\n        if (this._amqpConnection !== undefined) {\n          resolve(this._amqpConnection);\n        } else {\n          let connectionString = '';\n          if (this._tls) {\n            connectionString = `${this._tlsProtocol}://${connectionParams.deviceId || connectionParams.client}:` +\n              `${connectionParams.secret}@${connectionParams.host}:` +\n              `${connectionParams.protocols.amqp.tlsPort}/${connectionParams.vhost.replace('/', '%2f')}`;\n            connectionOpts = merge(connectionOpts, this._tlsOpts);\n          } else {\n            connectionString = `${this._protocol}://${connectionParams.deviceId || connectionParams.client}:` +\n              `${connectionParams.secret}@${connectionParams.host}:` +\n              `${connectionParams.protocols.amqp.port}/${connectionParams.vhost.replace('/', '%2f')}`;\n          }\n          amqp.connect(connectionString, connectionOpts).then((conn) => {\n            conn.on('error', (err) => {\n              reject(err);\n            });\n            conn.on('blocked', (reason) => {\n              console.warn(reason); // eslint-disable-line no-console\n            });\n            conn.on('unblocked', (reason) => {\n              console.warn(reason); // eslint-disable-line no-console\n            });\n            this._amqpConnection = conn;\n            resolve(this._amqpConnection);\n          }).catch((reason) => {\n            reject(reason);\n          });\n        }\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Creates a channel on current connection\n   *\n   * @private\n   * @param {String} channelName - indicates the channel name\n   * @param {Object} opts - channel options\n   * @return a promise containing the current channel\n   */\n  _createChannel(channelName, opts = {}) {\n    channelName = `${channelName}${(opts.withConfirm === true) ? 'WithConfirm' : ''}`;\n    return new Promise((resolve, reject) => {\n      if (this._amqpChannels[channelName]) {\n        resolve(this._amqpChannels[channelName]);\n      } else {\n        this.connect().then((conn) => {\n          if (opts.withConfirm === true) {\n            return conn.createConfirmChannel();\n          } else {\n            return conn.createChannel();\n          }\n        }).then((ch) => {\n          this._amqpChannels[channelName] = ch;\n          resolve(ch);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Close a channel on current connection\n   *\n   * @private\n   * @param {String} channelName - indicates if the channel is input or output\n   * @return a promise containing the result of the operation\n   */\n  _closeChannel(channelName, opts = {}) {\n    channelName = `${channelName}${(opts.withConfirm === true) ? 'WithConfirm' : ''}`;\n    return new Promise((resolve, reject) => {\n      const ch = this._amqpChannels[channelName];\n      if (ch === undefined) {\n        reject('Invalid Channel Object');\n      } else {\n        ch.close().then(() => {\n          this._amqpChannels[channelName] = undefined;\n          resolve(true);\n        }).catch((reason) => {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Generate the routing key for a specific channel\n   *\n   * @private\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the routing key for that channel\n   */\n  _routingKeyFor(channel) {\n    return `${this.deviceId()}.${channel}`;\n  }\n\n  /**\n   * Check if the SDK have to automatically ack messages\n   *\n   * @private\n   * @param {String} ack - the ack type, it should be 'manual' or 'auto'\n   * @return boolean - true if messages have to be autoacked, false otherwise\n   */\n  _autoAck(ack) {\n    if (ack) {\n      if (!_.includes(CONFIG[this._protocol].ackTypes, ack)) {\n        console.error('Wrong acknowledge type'); // eslint-disable-line no-console\n      }\n      switch (ack) {\n        case 'auto':\n          return true;\n        default:\n          return false;\n      }\n    }\n    return true;\n  }\n\n}\n\nexport default AmqpClient;\n"],"sourceRoot":"../src"}