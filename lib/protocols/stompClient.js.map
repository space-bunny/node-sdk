{"version":3,"sources":["protocols/stompClient.js"],"names":["require","CONFIG","StompClient","opts","_stompConnection","undefined","_subscription","process","_protocol","stompOpts","stomp","webStompOpts","webStomp","_webSocketOpts","webSocket","_connectionHeaders","connection","headers","_connectionOpts","_existingQueuePrefix","existingQueuePrefix","_defaultResource","defaultResource","callback","Promise","resolve","reject","localOpts","connect","then","client","topic","_subcriptionFor","_inboxTopic","subscriptionCallback","message","stompMessage","StompMessage","_deviceId","ackNeeded","_autoAck","ack","blackListed","nack","_parseContent","body","subscribe","catch","reason","channel","routingKey","destination","_destinationFor","send","_encapsulateContent","isConnected","Error","unsubscribe","disconnect","emit","getEndpointConfigs","endpointConfigs","connectionParams","_tls","Stomp","overTCP","host","protocols","tlsPort","_tlsOpts","port","protocol","tls","connectionString","endpoint","ws","WebSocket","over","heartbeat","outgoing","incoming","debug","login","deviceId","passcode","secret","vhost","err","str","on","connected","type","params","messageRoutingKey","ackTypes","console","error","SpaceBunny"],"mappings":"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","file":"stompClient.js","sourcesContent":["/**\n * A module that exports an StompClient client\n * which inherits from the SpaceBunny base client\n * @module StompClient\n */\n\n// Import some helpers modules\nimport Promise from 'bluebird';\nimport _ from 'lodash';\n\n// Import stomp library\nimport Stomp from 'stompjs';\n\n// Import SpaceBunny main module from which StompClient inherits\nimport SpaceBunny from '../spacebunny';\nimport StompMessage from '../messages/stompMessage';\n\nconst { CONFIG } = require('../../config/constants');\n\nclass StompClient extends SpaceBunny {\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain Device-Key or connection options\n   * (deviceId and secret) for devices.\n   */\n  constructor(opts = {}) {\n    super(opts);\n    this._stompConnection = undefined;\n    this._subscription = undefined;\n    if (typeof process === 'object' && `${process}` === '[object process]') {\n      this._protocol = 'stomp';\n    } else {\n      this._protocol = 'webStomp';\n    }\n    const stompOpts = CONFIG.stomp;\n    const webStompOpts = CONFIG.webStomp;\n    this._webSocketOpts = webStompOpts.webSocket;\n    this._connectionHeaders = stompOpts.connection.headers;\n    this._connectionOpts = stompOpts.connection.opts;\n    this._existingQueuePrefix = stompOpts.existingQueuePrefix;\n    this._defaultResource = stompOpts.defaultResource;\n  }\n\n  /**\n   * Subscribe to input channel\n   *\n   * @param {function} callback - function called every time a message is received\n   * passing the current message as argument\n   * @param {Object} options - subscription options\n   * @return promise containing the result of the subscription\n   */\n  onReceive(callback, opts = {}) {\n    // subscribe for input messages\n    return new Promise((resolve, reject) => {\n      let localOpts = _.cloneDeep(opts);\n      localOpts = _.merge({}, localOpts);\n      this.connect().then((client) => {\n        const topic = this._subcriptionFor(this._existingQueuePrefix, this._inboxTopic);\n        const subscriptionCallback = (message) => {\n          // Create message object\n          const stompMessage = new StompMessage(message, this._deviceId, localOpts);\n          const ackNeeded = this._autoAck(localOpts.ack);\n          // Check if should be accepted or not\n          if (stompMessage.blackListed()) {\n            if (ackNeeded) { message.nack(); }\n            return;\n          }\n          // Call message callback\n          callback(this._parseContent(stompMessage.body), stompMessage.headers);\n          // Check if ACK is needed\n          if (ackNeeded) { message.ack(); }\n        };\n        this._subscription = client.subscribe(topic, subscriptionCallback);\n        resolve(true);\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Publish a message on a specific channel\n   *\n   * @param {String} channel - channel name on which you want to publish a message\n   * @param {Object} message - the message payload\n   * @param {Object} opts - publication options\n   * @return a promise containing the result of the operation\n   */\n  publish(channel, message, opts = {}) {\n    // Publish message\n    return new Promise((resolve, reject) => {\n      let localOpts = _.cloneDeep(opts);\n      localOpts = _.merge({}, localOpts);\n      this.connect().then((client) => {\n        const { routingKey = undefined, topic = undefined } = localOpts;\n        const destination = this._destinationFor({ channel, routingKey, topic });\n        client.send(destination, this._connectionHeaders, this._encapsulateContent(message));\n        resolve(true);\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Destroy the connection between the stomp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected()) {\n        reject(new Error('Invalid connection'));\n      } else {\n        if (this._subscription !== undefined) {\n          this._subscription.unsubscribe();\n        }\n        this._stompConnection.disconnect(() => {\n          this.emit('disconnect');\n          this._stompConnection = undefined;\n          resolve(true);\n        }).catch((reason) => {\n          this._stompConnection = undefined;\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  /**\n   * Establish an stomp connection with the broker.\n   * If a connection already exists, returns the current connection\n   *\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  connect(opts = {}) {\n    return new Promise((resolve, reject) => {\n      // let localOpts = _.cloneDeep(opts);\n      // localOpts = _.merge(this._connectionOpts, localOpts);\n      this.getEndpointConfigs().then((endpointConfigs) => {\n        const connectionParams = endpointConfigs.connection;\n        if (this.isConnected()) {\n          resolve(this._stompConnection);\n        } else {\n          try {\n            let client;\n            if (typeof process === 'object' && `${process}` === '[object process]') {\n              // code is runnning in nodejs: STOMP uses TCP sockets\n              if (this._tls) {\n                client = Stomp.overTCP(connectionParams.host, connectionParams.protocols.stomp.tlsPort, this._tlsOpts);\n              } else {\n                client = Stomp.overTCP(connectionParams.host, connectionParams.protocols.stomp.port);\n              }\n            } else {\n              // code is runnning in a browser: web STOMP uses Web sockets\n              const protocol = (this._tls) ? this._webSocketOpts.tls.protocol : this._webSocketOpts.protocol;\n              const port = (this._tls)\n                ? connectionParams.protocols.webStomp.tlsPort : connectionParams.protocols.webStomp.port;\n              const connectionString = `${protocol}://${connectionParams.host}:${port}/${this._webSocketOpts.endpoint}`;\n              const ws = new WebSocket(connectionString);\n              client = Stomp.over(ws);\n              client.heartbeat.outgoing = 10000;\n              client.heartbeat.incoming = 10000;\n              client.debug = null;\n            }\n            const headers = _.merge(this._connectionHeaders, {\n              login: connectionParams.deviceId || connectionParams.client,\n              passcode: connectionParams.secret,\n              host: connectionParams.vhost\n            });\n            client.connect(headers, () => {\n              this._stompConnection = client;\n              this.emit('connect');\n              resolve(this._stompConnection);\n            }, (err) => {\n              this.emit('error', err.body);\n              // this._stompConnection = undefined;\n              // reject(err.body);\n            });\n            client.debug = (str) => {\n              this.emit('debug', str);\n            };\n            this.on('error', () => {});\n          } catch (reason) {\n            reject(reason);\n          }\n        }\n      }).catch((reason) => {\n        reject(reason);\n      });\n    });\n  }\n\n  isConnected() {\n    return (this._stompConnection !== undefined && this._stompConnection.connected);\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the topic name for that channel\n   */\n  _subcriptionFor(type, channel) {\n    return `/${type}/${this.deviceId()}.${channel}`;\n  }\n\n  /**\n   * Generate the destination string for a specific channel\n   *\n   * @private\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the topic name for that channel\n   */\n  _destinationFor(params = {}) {\n    const {\n      type = this._defaultResource, channel = undefined, topic = undefined, routingKey = undefined\n    } = params;\n    let messageRoutingKey;\n    if (routingKey) {\n      messageRoutingKey = routingKey;\n    } else {\n      messageRoutingKey = this.deviceId();\n      if (!_.isEmpty(channel)) {\n        messageRoutingKey += `.${channel}`;\n      }\n      if (!_.isEmpty(topic)) {\n        messageRoutingKey += `.${topic}`;\n      }\n    }\n    return `/${type}/${this.deviceId()}/${messageRoutingKey}`;\n  }\n\n  /**\n   * Check if the SDK have to automatically ack messages\n   * By default STOMP messages are acked by the server\n   * they need to be acked if client subscribes with { ack: 'client' } option\n   *\n   * @private\n   * @param {String} ack - the ack type, it should be 'client' or null\n   * @return boolean - true if messages have to be autoacked, false otherwise\n   */\n  _autoAck(ack) {\n    if (ack) {\n      if (!_.includes(CONFIG[this._protocol].ackTypes, ack)) {\n        console.error('Wrong acknowledge type'); // eslint-disable-line no-console\n      }\n      switch (ack) {\n        case 'client':\n          return false;\n        default:\n          return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport default StompClient;\n"],"sourceRoot":"../src"}