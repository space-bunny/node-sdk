{"version":3,"sources":["protocols/stompClient.js"],"names":[],"mappings":"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","file":"protocols/stompClient.js","sourcesContent":["/**\n * A module that exports an StompClient client\n * which inherits from the SpaceBunny base client\n * @module StompClient\n */\n\n// Import some helpers modules\nimport merge from 'merge';\nimport Promise from 'bluebird';\n\n// Import stomp library\nimport Stomp from 'stompjs';\n\n// Import SockJS library\nimport SockJS from 'sockjs-client';\n\n// Import SpaceBunny main module from which StompClient inherits\nimport SpaceBunny from '../spacebunny';\n\nclass StompClient extends SpaceBunny {\n\n  /**\n   * @constructor\n   * @param {Object} opts - options must contain api-key or connection options\n   * (deviceId and secret) for devices.\n   */\n  constructor(opts) {\n    super(opts);\n    if (typeof process === 'object' && process + '' === '[object process]') {\n      this._protocol = 'stomp';\n    } else {\n      this._protocol = 'webStomp';\n    }\n    this._webSocketProtocol = 'http://';\n    this._webSocketSecureProtocol = 'https://';\n    this._stompConnection = undefined;\n    this._subscription = undefined;\n    this._connectionHeaders = {\n      max_hbrlck_fails: 10,\n      'accept-version': '1.0,1.1,1.2',\n      'heart-beat': '10000,10000'\n    };\n    this._existingQueuePrefix = 'amq/queue';\n    this._stompSubscriptionPrefix = 'stomp-subscription-';\n    this.getConnectionParams();\n  }\n\n  /**\n   * Subscribe to input channel\n   *\n   * @param {function} callback - function called every time a message is received\n   * passing the current message as argument\n   * @param {Object} options - subscription options\n   * @return promise containing the result of the subscription\n   */\n  onReceive(callback, opts) {\n    opts = merge({}, opts);\n    // subscribe for input messages\n    return new Promise((resolve, reject) => {\n      this._connect().then((client) => {\n        // amq/queue is the form for existing queues\n        this._subscription = client.subscribe(this._subcriptionFor(this._existingQueuePrefix, this._inputTopic), function (message) {\n          // TODO filterMine and filterWeb\n          callback(message);\n        }, function (reason) {\n          reject(reason);\n        });\n        resolve(true);\n      }).catch(function (reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Publish a message on a specific channel\n   *\n   * @param {String} channel - channel name on which you want to publish a message\n   * @param {Object} message - the message payload\n   * @param {Object} opts - publication options\n   * @return a promise containing the result of the operation\n   */\n  publish(channel, message, opts) {\n    opts = merge({}, opts);\n    // Publish message\n    return new Promise((resolve, reject) => {\n      this._connect().then((client) => {\n        client.send(this._destinationFor('exchange', channel), this._connectionHeaders, this._encapsulateContent(message));\n        resolve(true);\n      }).catch(function (reason) {\n        reject(reason);\n      });\n    });\n  }\n\n  /**\n   * Destroy the connection between the stomp client and broker\n   *\n   * @return a promise containing the result of the operation\n   */\n  disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection === undefined) {\n        reject('Invalid connection');\n      } else {\n        this._subscription.unsubscribe();\n        this._stompConnection.disconnect(() => {\n          this._stompConnection = undefined;\n          resolve(true);\n        }).catch(function (reason) {\n          reject(reason);\n        });\n      }\n    });\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Establish an stomp connection with the broker.\n   * If a connection already exists, returns the current connection\n   *\n   * @private\n   * @param {Object} opts - connection options\n   * @return a promise containing current connection\n   */\n  _connect(opts) {\n    opts = merge({}, opts);\n    const connectionParams = this._connectionParams;\n\n    return new Promise((resolve, reject) => {\n      if (this._stompConnection !== undefined) {\n        resolve(this._stompConnection);\n      } else {\n        try {\n          let client = undefined;\n          if (typeof process === 'object' && process + '' === '[object process]') {\n            // code is runnning in nodejs: STOMP uses TCP sockets\n            if (this._ssl) {\n              client = Stomp.overTCP(connectionParams.host, connectionParams.protocols.stomp.sslPort, this._sslOpts);\n            } else {\n              client = Stomp.overTCP(connectionParams.host, connectionParams.protocols.stomp.port);\n            }\n          } else {\n            // code is runnning in a browser: web STOMP uses Web sockets\n            const protocol = (this._ssl) ? this._webSocketSecureProtocol : this._webSocketProtocol;\n            const port = (this._ssl) ? connectionParams.protocols.webStomp.sslPort : connectionParams.protocols.webStomp.port;\n            // const connectionString = `${protocol}${connectionParams.host}:${port}/stomp`;\n            const connectionString = `${protocol}${connectionParams.host}:${port}/stomp`;\n            const ws = new SockJS(connectionString);\n            client = Stomp.over(ws);\n            // SockJS does not support heart-beat: disable heart-beats\n            client.heartbeat.outgoing = 0;\n            client.heartbeat.incoming = 0;\n          }\n          const headers = merge(this._connectionHeaders, {\n            login: connectionParams.deviceId || connectionParams.client,\n            passcode: connectionParams.secret,\n            host: connectionParams.vhost\n          });\n          // if using stream client fix the name of the generated queue\n          if (connectionParams.client) {\n            headers['x-queue-name'] = `${this._stompSubscriptionPrefix}${connectionParams.deviceId}`;\n          }\n          client.connect(headers, () => {\n            this._stompConnection = client;\n            resolve(this._stompConnection);\n          }, function (err) {\n            reject(err);\n          });\n        } catch (reason) {\n          reject(reason);\n        }\n      }\n    });\n  }\n\n  /**\n   * Generate the subscription string for a specific channel\n   *\n   * @private\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the topic name for that channel\n   */\n  _subcriptionFor(type, channel) {\n    return `/${type}/${this.deviceId()}.${channel}`;\n  }\n\n  /**\n   * Generate the destination string for a specific channel\n   *\n   * @private\n   * @param {String} type - resource type on which subscribe or publish [exchange/queue]\n   * @param {String} channel - channel name on which you want to publish a message\n   * @return a string that represents the topic name for that channel\n   */\n  _destinationFor(type, channel) {\n    return `/${type}/${this.deviceId()}/${this.deviceId()}.${channel}`;\n  }\n\n}\n\nexport default StompClient;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}