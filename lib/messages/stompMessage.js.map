{"version":3,"sources":["messages/stompMessage.js"],"names":["require","CONFIG","StompMessage","opts","message","undefined","receiverId","subscriptionOpts","body","content","headers","destination","split","length","senderId","channelName","ex","console","error","_receiverId","_discardMine","discardMine","_discardFromApi","discardFromApi","fromApi","fromApiHeader","ack","nack"],"mappings":";;;;;;;;qjBAAA;;;;;AAKA;;;;eAEmBA,QAAQ,wBAAR,C;IAAXC,M,YAAAA,M;;IAEFC,Y;AACJ;;;;AAIA,0BAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAAA,wBAGjBA,IAHiB,CAEnBC,OAFmB;AAAA,QAEnBA,OAFmB,iCAETC,SAFS;AAAA,2BAGjBF,IAHiB,CAEEG,UAFF;AAAA,QAEEA,UAFF,oCAEeD,SAFf;AAAA,gCAGjBF,IAHiB,CAE0BI,gBAF1B;AAAA,QAE0BA,gBAF1B,yCAE6C,EAF7C;;AAIrB,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKI,IAAL,GAAY,yBAAaJ,QAAQI,IAArB,CAAZ;AACA,SAAKC,OAAL,GAAe,KAAKD,IAApB;AACA,SAAKE,OAAL,GAAeN,QAAQM,OAAvB;AACA,QAAI;AACF,UAAMC,cAAc,KAAKD,OAAL,CAAaC,WAAb,CAAyBC,KAAzB,CAA+B,GAA/B,CAApB;;AADE,+BAEkCD,YAAYA,YAAYE,MAAZ,GAAqB,CAAjC,EAAoCD,KAApC,CAA0C,GAA1C,CAFlC;;AAAA;;AAED,WAAKE,QAFJ;AAEc,WAAKC,WAFnB;AAGH,KAHD,CAGE,OAAOC,EAAP,EAAW;AACXC,cAAQC,KAAR,CAAc,0BAAd,EADW,CACgC;AAC5C;AACD,SAAKC,WAAL,GAAmBb,UAAnB;AACA,SAAKc,YAAL,GAAoBb,iBAAiBc,WAAjB,IAAgC,KAApD;AACA,SAAKC,eAAL,GAAuBf,iBAAiBgB,cAAjB,IAAmC,KAA1D;AACD;;AAED;;;;;;;;;kCAKc;AACZ,UAAI,KAAKH,YAAL,IAAqB,KAAKD,WAAL,KAAqB,KAAKL,QAA/C,IAA2D,CAAC,KAAKU,OAAL,EAAhE,EAAgF,OAAO,IAAP;AAChF,UAAI,KAAKF,eAAL,IAAwB,KAAKE,OAAL,EAA5B,EAA4C,OAAO,IAAP;AAC5C,aAAO,KAAP;AACD;;AAED;;;;;;;;;8BAMU;AACR,aAAQ,KAAKd,OAAL,IAAgB,KAAKA,OAAL,CAAaT,OAAOwB,aAApB,CAAxB;AACD;;;0BAEK;AACJ,WAAKrB,OAAL,CAAasB,GAAb;AACD;;;2BAEM;AACL,WAAKtB,OAAL,CAAauB,IAAb;AACD;;;;;;kBAGYzB,Y","file":"stompMessage.js","sourcesContent":["/**\n* A wrapper for the message object\n* @module Message\n*/\n\nimport { parseContent } from '../utils';\n\nconst { CONFIG } = require('../../config/constants');\n\nclass StompMessage {\n  /**\n  * @constructor\n  * @param {Object} opts - subscription options\n  */\n  constructor(opts = {}) {\n    const {\n      message = undefined, receiverId = undefined, subscriptionOpts = {}\n    } = opts;\n    this.message = message;\n    this.body = parseContent(message.body);\n    this.content = this.body;\n    this.headers = message.headers;\n    try {\n      const destination = this.headers.destination.split('/');\n      [this.senderId, this.channelName] = destination[destination.length - 1].split('.');\n    } catch (ex) {\n      console.error('Wrong routing key format'); // eslint-disable-line no-console\n    }\n    this._receiverId = receiverId;\n    this._discardMine = subscriptionOpts.discardMine || false;\n    this._discardFromApi = subscriptionOpts.discardFromApi || false;\n  }\n\n  /**\n  * Check if a message should be accepted of rejected\n  *\n  * @return Boolean - true if should be not considered, false otherwise\n  */\n  blackListed() {\n    if (this._discardMine && this._receiverId === this.senderId && !this.fromApi()) return true;\n    if (this._discardFromApi && this.fromApi()) return true;\n    return false;\n  }\n\n  /**\n  * Check if a message comes from API\n  * Check if it contains 'x-from-sb-api' header\n  *\n  * @return Boolean - true if it comes from API, false otherwise\n  */\n  fromApi() {\n    return (this.headers && this.headers[CONFIG.fromApiHeader]);\n  }\n\n  ack() {\n    this.message.ack();\n  }\n\n  nack() {\n    this.message.nack();\n  }\n}\n\nexport default StompMessage;\n"],"sourceRoot":"../src"}