{"version":3,"sources":["messages/stompMessage.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAKA,IAAM,SAAS,QAAQ,wBAAR,EAAkC,MAAjD;;IAEM,Y;;;;;;;;;AAQJ,WARI,YAQJ,CAAY,OAAZ,EAAqB,UAArB,EAA4C;AAAA,QAAX,IAAW,yDAAJ,EAAI;;AAAA,0BARxC,YAQwC;;AAC1C,SAAK,IAAL,GAAY,QAAQ,IAApB;AACA,SAAK,OAAL,GAAe,QAAQ,OAAvB;AACA,QAAI;AACF,UAAM,cAAc,KAAK,OAAL,CAAa,WAAb,CAAyB,KAAzB,CAA+B,GAA/B,CAApB;;AADE,+BAEkC,YAAY,YAAY,MAAZ,GAAqB,CAAjC,EAAoC,KAApC,CAA0C,GAA1C,CAFlC;;AAAA;;AAED,WAAK,QAFJ;AAEc,WAAK,WAFnB;AAGH,KAHD,CAGE,OAAO,EAAP,EAAW;AACX,cAAQ,KAAR,CAAc,0BAAd,E;AACD;AACD,SAAK,WAAL,GAAmB,UAAnB;AACA,SAAK,YAAL,GAAoB,KAAK,WAAL,IAAoB,KAAxC;AACA,SAAK,eAAL,GAAuB,KAAK,cAAL,IAAuB,KAA9C;AACD;;;;;;;;;eApBG,Y;;kCA2BU;AACZ,UAAI,KAAK,YAAL,IAAqB,KAAK,WAAL,KAAqB,KAAK,QAA/C,IAA2D,CAAC,KAAK,OAAL,EAAhE,EAAgF,OAAO,IAAP;AAChF,UAAI,KAAK,eAAL,IAAwB,KAAK,OAAL,EAA5B,EAA4C,OAAO,IAAP;AAC5C,aAAO,KAAP;AACD;;;;;;;;;;;8BAQS;AACR,aAAQ,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,OAAO,aAApB,CAAxB;AACD;;;SAzCG,Y;;;kBA4CS,Y","file":"messages/stompMessage.js","sourcesContent":["/**\n * A wrapper for the message object\n * @module Message\n */\n\nconst CONFIG = require('../../config/constants').CONFIG;\n\nclass StompMessage {\n\n  /**\n   * @constructor\n   * @param {Object} message - the message received from the channel\n   * @param {String} receiverId - the receiver id\n   * @param {Object} opts - subscription options\n   */\n  constructor(message, receiverId, opts = {}) {\n    this.body = message.body;\n    this.headers = message.headers;\n    try {\n      const destination = this.headers.destination.split('/');\n      [this.senderId, this.channelName] = destination[destination.length - 1].split('.');\n    } catch (ex) {\n      console.error('Wrong routing key format'); // eslint-disable-line no-console\n    }\n    this._receiverId = receiverId;\n    this._discardMine = opts.discardMine || false;\n    this._discardFromApi = opts.discardFromApi || false;\n  }\n\n  /**\n   * Check if a message should be accepted of rejected\n   *\n   * @return Boolean - true if should be not considered, false otherwise\n   */\n  blackListed() {\n    if (this._discardMine && this._receiverId === this.senderId && !this.fromApi()) return true;\n    if (this._discardFromApi && this.fromApi()) return true;\n    return false;\n  }\n\n  /**\n   * Check if a message comes from API\n   * Check if it contains 'x-from-sb-api' header\n   *\n   * @return Boolean - true if it comes from API, false otherwise\n   */\n  fromApi() {\n    return (this.headers && this.headers[CONFIG.fromApiHeader]);\n  }\n}\n\nexport default StompMessage;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}