{"version":3,"sources":["messages/stompMessage.js"],"names":["CONFIG","require","StompMessage","message","receiverId","opts","body","headers","destination","split","length","senderId","channelName","ex","console","error","_receiverId","_discardMine","discardMine","_discardFromApi","discardFromApi","fromApi","fromApiHeader"],"mappings":";;;;;;;;;;;;AAAA;;;;;AAKA,IAAMA,SAASC,QAAQ,wBAAR,EAAkCD,MAAjD;;IAEME,Y;;AAEJ;;;;;;AAMA,wBAAYC,OAAZ,EAAqBC,UAArB,EAA4C;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAC1C,SAAKC,IAAL,GAAYH,QAAQG,IAApB;AACA,SAAKC,OAAL,GAAeJ,QAAQI,OAAvB;AACA,QAAI;AACF,UAAMC,cAAc,KAAKD,OAAL,CAAaC,WAAb,CAAyBC,KAAzB,CAA+B,GAA/B,CAApB;;AADE,+BAEkCD,YAAYA,YAAYE,MAAZ,GAAqB,CAAjC,EAAoCD,KAApC,CAA0C,GAA1C,CAFlC;;AAAA;;AAED,WAAKE,QAFJ;AAEc,WAAKC,WAFnB;AAGH,KAHD,CAGE,OAAOC,EAAP,EAAW;AACXC,cAAQC,KAAR,CAAc,0BAAd,EADW,CACgC;AAC5C;AACD,SAAKC,WAAL,GAAmBZ,UAAnB;AACA,SAAKa,YAAL,GAAoBZ,KAAKa,WAAL,IAAoB,KAAxC;AACA,SAAKC,eAAL,GAAuBd,KAAKe,cAAL,IAAuB,KAA9C;AACD;;AAED;;;;;;;;;kCAKc;AACZ,UAAI,KAAKH,YAAL,IAAqB,KAAKD,WAAL,KAAqB,KAAKL,QAA/C,IAA2D,CAAC,KAAKU,OAAL,EAAhE,EAAgF,OAAO,IAAP;AAChF,UAAI,KAAKF,eAAL,IAAwB,KAAKE,OAAL,EAA5B,EAA4C,OAAO,IAAP;AAC5C,aAAO,KAAP;AACD;;AAED;;;;;;;;;8BAMU;AACR,aAAQ,KAAKd,OAAL,IAAgB,KAAKA,OAAL,CAAaP,OAAOsB,aAApB,CAAxB;AACD;;;;;;kBAGYpB,Y","file":"messages/stompMessage.js","sourcesContent":["/**\n * A wrapper for the message object\n * @module Message\n */\n\nconst CONFIG = require('../../config/constants').CONFIG;\n\nclass StompMessage {\n\n  /**\n   * @constructor\n   * @param {Object} message - the message received from the channel\n   * @param {String} receiverId - the receiver id\n   * @param {Object} opts - subscription options\n   */\n  constructor(message, receiverId, opts = {}) {\n    this.body = message.body;\n    this.headers = message.headers;\n    try {\n      const destination = this.headers.destination.split('/');\n      [this.senderId, this.channelName] = destination[destination.length - 1].split('.');\n    } catch (ex) {\n      console.error('Wrong routing key format'); // eslint-disable-line no-console\n    }\n    this._receiverId = receiverId;\n    this._discardMine = opts.discardMine || false;\n    this._discardFromApi = opts.discardFromApi || false;\n  }\n\n  /**\n   * Check if a message should be accepted of rejected\n   *\n   * @return Boolean - true if should be not considered, false otherwise\n   */\n  blackListed() {\n    if (this._discardMine && this._receiverId === this.senderId && !this.fromApi()) return true;\n    if (this._discardFromApi && this.fromApi()) return true;\n    return false;\n  }\n\n  /**\n   * Check if a message comes from API\n   * Check if it contains 'x-from-sb-api' header\n   *\n   * @return Boolean - true if it comes from API, false otherwise\n   */\n  fromApi() {\n    return (this.headers && this.headers[CONFIG.fromApiHeader]);\n  }\n}\n\nexport default StompMessage;\n"],"sourceRoot":"./src"}