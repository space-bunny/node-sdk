{"version":3,"sources":["messages/amqpMessage.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAKA,IAAM,SAAS,QAAQ,wBAAR,EAAkC,MAAlC;;IAET;;;;;;;;;AAQJ,WARI,WAQJ,CAAY,OAAZ,EAAqB,UAArB,EAA4C;QAAX,6DAAO,kBAAI;;0BARxC,aAQwC;;AAC1C,SAAK,OAAL,GAAe,QAAQ,OAAR,CAD2B;AAE1C,SAAK,MAAL,GAAc,QAAQ,MAAR,CAF4B;AAG1C,SAAK,UAAL,GAAkB,QAAQ,UAAR,CAHwB;AAI1C,QAAI;kCACkC,KAAK,MAAL,CAAY,UAAZ,CAAuB,KAAvB,CAA6B,GAA7B,EADlC;;;;AACD,WAAK,QAAL,6BADC;AACc,WAAK,WAAL,6BADd;KAAJ,CAEE,OAAO,EAAP,EAAW;AACX,cAAQ,KAAR,CAAc,0BAAd;AADW,KAAX;AAGF,SAAK,WAAL,GAAmB,UAAnB,CAT0C;AAU1C,SAAK,YAAL,GAAoB,KAAK,WAAL,IAAoB,KAApB,CAVsB;AAW1C,SAAK,eAAL,GAAuB,KAAK,cAAL,IAAuB,KAAvB,CAXmB;GAA5C;;;;;;;;;eARI;;kCA2BU;AACZ,UAAI,KAAK,YAAL,IAAqB,KAAK,WAAL,KAAqB,KAAK,QAAL,IAAiB,CAAC,KAAK,OAAL,EAAD,EAAiB,OAAO,IAAP,CAAhF;AACA,UAAI,KAAK,eAAL,IAAwB,KAAK,OAAL,EAAxB,EAAwC,OAAO,IAAP,CAA5C;AACA,aAAO,KAAP,CAHY;;;;;;;;;;;;8BAYJ;AACR,aAAQ,KAAK,UAAL,CAAgB,OAAhB,IAA2B,KAAK,UAAL,CAAgB,OAAhB,CAAwB,OAAO,aAAP,CAAnD,CADA;;;;SAvCN;;;kBA4CS","file":"messages/amqpMessage.js","sourcesContent":["/**\n * A wrapper for the message object\n * @module Message\n */\n\nconst CONFIG = require('../../config/constants').CONFIG;\n\nclass AmqpMessage {\n\n  /**\n   * @constructor\n   * @param {Object} message - the message received from the channel\n   * @param {String} receiverId - the receiver id\n   * @param {Object} opts - subscription options\n   */\n  constructor(message, receiverId, opts = {}) {\n    this.content = message.content;\n    this.fields = message.fields;\n    this.properties = message.properties;\n    try {\n      [this.senderId, this.channelName] = this.fields.routingKey.split('.');\n    } catch (ex) {\n      console.error('Wrong routing key format'); // eslint-disable-line no-console\n    }\n    this._receiverId = receiverId;\n    this._discardMine = opts.discardMine || false;\n    this._discardFromApi = opts.discardFromApi || false;\n  }\n\n  /**\n   * Check if a message should be accepted of rejected\n   *\n   * @return Boolean - true if should be not considered, false otherwise\n   */\n  blackListed() {\n    if (this._discardMine && this._receiverId === this.senderId && !this.fromApi()) return true;\n    if (this._discardFromApi && this.fromApi()) return true;\n    return false;\n  }\n\n  /**\n   * Check if a message comes from API\n   * Check if it contains 'x-from-sb-api' header\n   *\n   * @return Boolean - true if it comes from API, false otherwise\n   */\n  fromApi() {\n    return (this.properties.headers && this.properties.headers[CONFIG.fromApiHeader]);\n  }\n}\n\nexport default AmqpMessage;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}