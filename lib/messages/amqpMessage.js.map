{"version":3,"sources":["messages/amqpMessage.js"],"names":["CONFIG","require","AmqpMessage","message","receiverId","opts","content","fields","properties","routingKey","split","senderId","channelName","ex","console","error","_receiverId","_discardMine","discardMine","_discardFromApi","discardFromApi","fromApi","headers","fromApiHeader"],"mappings":";;;;;;;;;;;;AAAA;;;;;AAKA,IAAMA,SAASC,QAAQ,wBAAR,EAAkCD,MAAjD;;IAEME,W;;AAEJ;;;;;;AAMA,uBAAYC,OAAZ,EAAqBC,UAArB,EAA4C;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAC1C,SAAKC,OAAL,GAAeH,QAAQG,OAAvB;AACA,SAAKC,MAAL,GAAcJ,QAAQI,MAAtB;AACA,SAAKC,UAAL,GAAkBL,QAAQK,UAA1B;AACA,QAAI;AAAA,kCACkC,KAAKD,MAAL,CAAYE,UAAZ,CAAuBC,KAAvB,CAA6B,GAA7B,CADlC;;AAAA;;AACD,WAAKC,QADJ;AACc,WAAKC,WADnB;AAEH,KAFD,CAEE,OAAOC,EAAP,EAAW;AACXC,cAAQC,KAAR,CAAc,0BAAd,EADW,CACgC;AAC5C;AACD,SAAKC,WAAL,GAAmBZ,UAAnB;AACA,SAAKa,YAAL,GAAoBZ,KAAKa,WAAL,IAAoB,KAAxC;AACA,SAAKC,eAAL,GAAuBd,KAAKe,cAAL,IAAuB,KAA9C;AACD;;AAED;;;;;;;;;kCAKc;AACZ,UAAI,KAAKH,YAAL,IAAqB,KAAKD,WAAL,KAAqB,KAAKL,QAA/C,IAA2D,CAAC,KAAKU,OAAL,EAAhE,EAAgF,OAAO,IAAP;AAChF,UAAI,KAAKF,eAAL,IAAwB,KAAKE,OAAL,EAA5B,EAA4C,OAAO,IAAP;AAC5C,aAAO,KAAP;AACD;;AAED;;;;;;;;;8BAMU;AACR,aAAQ,KAAKb,UAAL,CAAgBc,OAAhB,IAA2B,KAAKd,UAAL,CAAgBc,OAAhB,CAAwBtB,OAAOuB,aAA/B,CAAnC;AACD;;;;;;kBAGYrB,W","file":"amqpMessage.js","sourcesContent":["/**\n * A wrapper for the message object\n * @module Message\n */\n\nconst CONFIG = require('../../config/constants').CONFIG;\n\nclass AmqpMessage {\n\n  /**\n   * @constructor\n   * @param {Object} message - the message received from the channel\n   * @param {String} receiverId - the receiver id\n   * @param {Object} opts - subscription options\n   */\n  constructor(message, receiverId, opts = {}) {\n    this.content = message.content;\n    this.fields = message.fields;\n    this.properties = message.properties;\n    try {\n      [this.senderId, this.channelName] = this.fields.routingKey.split('.');\n    } catch (ex) {\n      console.error('Wrong routing key format'); // eslint-disable-line no-console\n    }\n    this._receiverId = receiverId;\n    this._discardMine = opts.discardMine || false;\n    this._discardFromApi = opts.discardFromApi || false;\n  }\n\n  /**\n   * Check if a message should be accepted of rejected\n   *\n   * @return Boolean - true if should be not considered, false otherwise\n   */\n  blackListed() {\n    if (this._discardMine && this._receiverId === this.senderId && !this.fromApi()) return true;\n    if (this._discardFromApi && this.fromApi()) return true;\n    return false;\n  }\n\n  /**\n   * Check if a message comes from API\n   * Check if it contains 'x-from-sb-api' header\n   *\n   * @return Boolean - true if it comes from API, false otherwise\n   */\n  fromApi() {\n    return (this.properties.headers && this.properties.headers[CONFIG.fromApiHeader]);\n  }\n}\n\nexport default AmqpMessage;\n"],"sourceRoot":"../src"}