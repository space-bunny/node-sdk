{"version":3,"sources":["messages/amqpMessage.js"],"names":["require","CONFIG","AmqpMessage","opts","message","undefined","receiverId","channel","subscriptionOpts","content","fields","properties","routingKey","split","senderId","channelName","ex","console","error","_receiverId","_discardMine","discardMine","_discardFromApi","discardFromApi","fromApi","headers","fromApiHeader","allUpTo","nack","requeue"],"mappings":";;;;;;;;qjBAAA;;;;;;AAIA;;;;eAEmBA,QAAQ,wBAAR,C;IAAXC,M,YAAAA,M;;IAEFC,W;AACJ;;;;;;AAMA,yBAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAAA,wBAGjBA,IAHiB,CAEnBC,OAFmB;AAAA,QAEnBA,OAFmB,iCAETC,SAFS;AAAA,2BAGjBF,IAHiB,CAEEG,UAFF;AAAA,QAEEA,UAFF,oCAEeD,SAFf;AAAA,wBAGjBF,IAHiB,CAE0BI,OAF1B;AAAA,QAE0BA,OAF1B,iCAEoCF,SAFpC;AAAA,gCAGjBF,IAHiB,CAE+CK,gBAF/C;AAAA,QAE+CA,gBAF/C,yCAEkE,EAFlE;;AAIrB,SAAKJ,OAAL,GAAeA,OAAf;AACA,SAAKK,OAAL,GAAe,yBAAaL,QAAQK,OAArB,CAAf;AACA,SAAKC,MAAL,GAAcN,QAAQM,MAAtB;AACA,SAAKC,UAAL,GAAkBP,QAAQO,UAA1B;AACA,SAAKJ,OAAL,GAAeA,OAAf;AACA,QAAI;AAAA,kCACkC,KAAKG,MAAL,CAAYE,UAAZ,CAAuBC,KAAvB,CAA6B,GAA7B,CADlC;;AAAA;;AACD,WAAKC,QADJ;AACc,WAAKC,WADnB;AAEH,KAFD,CAEE,OAAOC,EAAP,EAAW;AACXC,cAAQC,KAAR,CAAc,0BAAd,EADW,CACgC;AAC5C;AACD,SAAKC,WAAL,GAAmBb,UAAnB;AACA,SAAKc,YAAL,GAAoBZ,iBAAiBa,WAAjB,IAAgC,KAApD;AACA,SAAKC,eAAL,GAAuBd,iBAAiBe,cAAjB,IAAmC,KAA1D;AACD;;AAED;;;;;;;;;kCAKc;AACZ,UAAI,KAAKH,YAAL,IAAqB,KAAKD,WAAL,KAAqB,KAAKL,QAA/C,IAA2D,CAAC,KAAKU,OAAL,EAAhE,EAAgF,OAAO,IAAP;AAChF,UAAI,KAAKF,eAAL,IAAwB,KAAKE,OAAL,EAA5B,EAA4C,OAAO,IAAP;AAC5C,aAAO,KAAP;AACD;;AAED;;;;;;;;;8BAMU;AACR,aAAQ,KAAKb,UAAL,CAAgBc,OAAhB,IAA2B,KAAKd,UAAL,CAAgBc,OAAhB,CAAwBxB,OAAOyB,aAA/B,CAAnC;AACD;;;0BAEc;AAAA,UAAXvB,IAAW,uEAAJ,EAAI;AAAA,0BACeA,IADf,CACLwB,OADK;AAAA,UACLA,OADK,iCACK,KADL;;AAEb,WAAKpB,OAAL,CAAaqB,IAAb,CAAkB,KAAKxB,OAAvB,EAAgCuB,OAAhC;AACD;;;2BAEe;AAAA,UAAXxB,IAAW,uEAAJ,EAAI;AAAA,2BAC8BA,IAD9B,CACNwB,OADM;AAAA,UACNA,OADM,kCACI,KADJ;AAAA,0BAC8BxB,IAD9B,CACW0B,OADX;AAAA,UACWA,OADX,iCACqB,IADrB;;AAEd,WAAKtB,OAAL,CAAaqB,IAAb,CAAkB,KAAKxB,OAAvB,EAAgCuB,OAAhC,EAAyCE,OAAzC;AACD;;;;;;kBAGY3B,W","file":"amqpMessage.js","sourcesContent":["/**\n * A wrapper for the message object\n * @module Message\n */\nimport { parseContent } from '../utils';\n\nconst { CONFIG } = require('../../config/constants');\n\nclass AmqpMessage {\n  /**\n   * @constructor\n   * @param {Object} message - the message received from the channel\n   * @param {String} receiverId - the receiver id\n   * @param {Object} opts - subscription options\n   */\n  constructor(opts = {}) {\n    const {\n      message = undefined, receiverId = undefined, channel = undefined, subscriptionOpts = {}\n    } = opts;\n    this.message = message;\n    this.content = parseContent(message.content);\n    this.fields = message.fields;\n    this.properties = message.properties;\n    this.channel = channel;\n    try {\n      [this.senderId, this.channelName] = this.fields.routingKey.split('.');\n    } catch (ex) {\n      console.error('Wrong routing key format'); // eslint-disable-line no-console\n    }\n    this._receiverId = receiverId;\n    this._discardMine = subscriptionOpts.discardMine || false;\n    this._discardFromApi = subscriptionOpts.discardFromApi || false;\n  }\n\n  /**\n   * Check if a message should be accepted of rejected\n   *\n   * @return Boolean - true if should be not considered, false otherwise\n   */\n  blackListed() {\n    if (this._discardMine && this._receiverId === this.senderId && !this.fromApi()) return true;\n    if (this._discardFromApi && this.fromApi()) return true;\n    return false;\n  }\n\n  /**\n   * Check if a message comes from API\n   * Check if it contains 'x-from-sb-api' header\n   *\n   * @return Boolean - true if it comes from API, false otherwise\n   */\n  fromApi() {\n    return (this.properties.headers && this.properties.headers[CONFIG.fromApiHeader]);\n  }\n\n  ack(opts = {}) {\n    const { allUpTo = false } = opts;\n    this.channel.nack(this.message, allUpTo);\n  }\n\n  nack(opts = {}) {\n    const { allUpTo = false, requeue = true } = opts;\n    this.channel.nack(this.message, allUpTo, requeue);\n  }\n}\n\nexport default AmqpMessage;\n"],"sourceRoot":"../src"}