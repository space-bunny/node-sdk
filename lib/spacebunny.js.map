{"version":3,"sources":["spacebunny.js"],"names":["CONFIG","require","SpaceBunny","opts","_connectionParams","camelizeKeys","_endpointConfigs","undefined","_endpointUrl","endpointUrl","_deviceKey","deviceKey","_channels","channels","_deviceId","deviceId","_client","client","_secret","secret","_host","host","_port","port","_vhost","vhost","_protocol","protocol","_inboxTopic","inputTopic","inboxTopic","_liveStreamSuffix","liveStreamSuffix","_tempQueueSuffix","tempQueueSuffix","_liveStreams","_tls","tls","_tlsOpts","cert","readFileSync","key","passphrase","ca","Array","isArray","map","element","pfx","disableCertCheck","rejectUnauthorized","secureProtocol","resolve","reject","endpoint","deviceEndpoint","hostname","_generateHostname","uri","api_version","path","options","url","method","responseType","headers","then","response","data","connection","catch","err","protocols","tlsPort","liveStreams","accessKeyEndpoint","obj","name","streamName","stream","length","id","prefix","suffix","currentTime","timestamp","Date","getTime","exchangeName","liveStreamByName","content","encapsulatedContent","JSON","stringify","ex","endpointProtocol","message","parsedMessage","Buffer","isBuffer","toString","res","parse"],"mappings":"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","file":"spacebunny.js","sourcesContent":["/**\n * A module that exports the base SpaceBunny client\n * @module SpaceBunny\n */\n\n// Import some helpers modules\nimport fs from 'fs';\nimport merge from 'merge';\nimport axios from 'axios';\nimport humps from 'humps';\nimport Promise from 'bluebird';\nimport { startsWith, filter } from 'lodash';\n\n// TODO validate enpointConfig object format with Joi\n// import Joi from 'joi';\n\nconst CONFIG = require('../config/constants').CONFIG;\n\n/**\n * @constructor\n * @param {Object} opts - constructor options may contain Device-Key or connection options\n */\nclass SpaceBunny {\n  constructor(opts = {}) {\n    this._connectionParams = merge({}, humps.camelizeKeys(opts));\n    this._endpointConfigs = undefined;\n    this._endpointUrl = this._connectionParams.endpointUrl;\n    this._deviceKey = this._connectionParams.deviceKey;\n    this._channels = this._connectionParams.channels;\n    this._deviceId = this._connectionParams.deviceId;\n    this._client = this._connectionParams.client;\n    this._secret = this._connectionParams.secret;\n    this._host = this._connectionParams.host;\n    this._port = this._connectionParams.port;\n    this._vhost = this._connectionParams.vhost;\n    this._protocol = CONFIG.protocol;\n    this._inboxTopic = this._connectionParams.inputTopic || CONFIG.inboxTopic;\n    this._liveStreamSuffix = CONFIG.liveStreamSuffix;\n    this._tempQueueSuffix = CONFIG.tempQueueSuffix;\n    this._liveStreams = [];\n    this._tls = this._connectionParams.tls || false;\n    this._tlsOpts = {};\n    if (this._connectionParams.cert) { this._tlsOpts.cert = fs.readFileSync(this._connectionParams.cert); }\n    if (this._connectionParams.key) { this._tlsOpts.key = fs.readFileSync(this._connectionParams.key); }\n    if (this._connectionParams.passphrase) { this._tlsOpts.passphrase = this._connectionParams.passphrase; }\n    if (this._connectionParams.ca) {\n      if (Array.isArray(this._connectionParams.ca)) {\n        this._tlsOpts.ca = this._connectionParams.ca.map((element) => {\n          return fs.readFileSync(element);\n        });\n      } else {\n        this._tlsOpts.ca = [fs.readFileSync(this._connectionParams.ca)];\n      }\n    }\n    if (this._connectionParams.pfx) { this._tlsOpts.pfx = fs.readFileSync(this._connectionParams.pfx); }\n    if (this._connectionParams.disableCertCheck) {\n      this._tlsOpts.rejectUnauthorized = false;\n    } else {\n      this._tlsOpts.rejectUnauthorized = true;\n    }\n    this._tlsOpts.secureProtocol = this._connectionParams.secureProtocol || CONFIG.tls.secureProtocol;\n  }\n\n  /**\n   * Check if Device-Key or connection parameters have already been passed\n   * If at least Device-Key is passed ask the endpoint for the configurations\n   * else if also connection parameters are not passed raise an exception\n   *\n   * @return an Object containing the connection parameters\n   */\n  getEndpointConfigs() {\n    return new Promise((resolve, reject) => {\n      // Resolve with configs if already retrieved\n      if (this._endpointConfigs !== undefined) {\n        resolve(this._endpointConfigs);\n      }\n      // Contact endpoint to retrieve configs\n      // Switch endpoint if you are using sdk as device or as access key stream\n      let endpoint = '';\n      if ((this._deviceId && this._secret) || this._deviceKey) { // Device credentials\n        endpoint = CONFIG.deviceEndpoint;\n        // uses endpoint passed from user, default endpoint otherwise\n        const hostname = this._generateHostname(endpoint);\n        const uri = `${hostname}${endpoint.api_version}${endpoint.path}`;\n        if (this._deviceKey) { // Get configs from endpoint\n          const options = {\n            url: uri,\n            method: 'get',\n            responseType: 'json',\n            headers: {\n              'Device-Key': this._deviceKey,\n              'Content-Type': 'application/json'\n            }\n          };\n          axios(options).then((response) => {\n            this._endpointConfigs = humps.camelizeKeys(response.data);\n            this._connectionParams = this._endpointConfigs.connection;\n            resolve(this._endpointConfigs);\n          }).catch((err) => {\n            reject(err);\n          });\n        } else if (this._deviceId && this._secret && this._host && this._port && this._vhost) {\n          // Manually provided configs\n          this._connectionParams.protocols = {};\n          if (this._tls) {\n            this._connectionParams.protocols[this._protocol] = { tlsPort: this._port };\n          } else {\n            this._connectionParams.protocols[this._protocol] = { port: this._port };\n          }\n          this._endpointConfigs = {\n            connection: this._connectionParams,\n            channels: []\n          };\n          resolve(this._endpointConfigs);\n        }\n      } else if (this._client && this._secret) { // Access key credentials\n        if (this._host && this._port && this._vhost) {\n          // Manually provided configs\n          this._connectionParams.protocols = {};\n          if (this._tls) {\n            this._connectionParams.protocols[this._protocol] = { tlsPort: this._port };\n          } else {\n            this._connectionParams.protocols[this._protocol] = { port: this._port };\n          }\n          this._endpointConfigs = {\n            connection: this._connectionParams,\n            liveStreams: []\n          };\n          resolve(this._endpointConfigs);\n        } else {\n          // Get configs from endpoint\n          endpoint = CONFIG.accessKeyEndpoint;\n          // uses endpoint passed from user, default endpoint otherwise\n          const hostname = this._generateHostname(endpoint);\n          const uri = `${hostname}${endpoint.api_version}${endpoint.path}`;\n          const options = {\n            url: uri,\n            method: 'get',\n            responseType: 'json',\n            headers: {\n              'Live-Stream-Key-Client': this._client,\n              'Live-Stream-Key-Secret': this._secret,\n              'Content-Type': 'application/json'\n            }\n          };\n          axios(options).then((response) => {\n            this._endpointConfigs = humps.camelizeKeys(response.data);\n            this._connectionParams = this._endpointConfigs.connection;\n            this._liveStreams = this._endpointConfigs.liveStreams || [];\n            resolve(this._endpointConfigs);\n          }).catch((err) => {\n            reject(err);\n          });\n        }\n      } else { // No configs or missing some info\n        reject('Missing Device Key or wrong connection parameters');\n      }\n    });\n  }\n\n  /**\n   * @return all channels configured for the current device\n   */\n  channels() {\n    if (this._endpointConfigs.channels) {\n      this._channels = this._endpointConfigs.channels.map((obj) => {\n        return obj.name;\n      });\n      return this._channels || [];\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * @return the device ID for the current device\n   */\n  deviceId() {\n    this._deviceId = this._deviceId || this._connectionParams.deviceId;\n    return this._deviceId;\n  }\n\n  /**\n   * Return a Stream ID from a stream name given in input\n   *\n   * @param {String} streamName - stream name\n   * @return the stream ID which corresponds to the input stream name\n   */\n  liveStreamByName(streamName) {\n    const liveStreams = filter(this._liveStreams, (stream) => { return stream.name === streamName; });\n    if (liveStreams.length > 0) {\n      return liveStreams[0].id || streamName;\n    } else {\n      return streamName;\n    }\n  }\n\n  /**\n   * Check if a stream exists\n   *\n   * @param {String} streamName - stream name\n   * @return true if stream exists, false otherwise\n   */\n  liveStreamExists(streamName) {\n    const liveStreams = filter(this._liveStreams, (stream) => { return stream.name === streamName; });\n    return (liveStreams.length > 0);\n  }\n\n  /**\n   * Generate a temporary queue name\n   *\n   * @private\n   * @param {String} prefix - client id or stream name\n   * @param {String} suffix - channel name or defaul live stream suffix\n   * @param {Numeric} currentTime - current timestamp\n   * @return a string that represents the topic name for that channel\n   */\n  tempQueue(prefix, suffix, currentTime) {\n    const timestamp = currentTime || new Date().getTime();\n    return `${timestamp}-${this._connectionParams.client}-` +\n      `${this.exchangeName(prefix, suffix)}.` +\n      `${this._tempQueueSuffix}`;\n  }\n\n  /**\n   * Generate the exchange name for a device's channel\n   *\n   * @private\n   * @param {String} prefix - It could be a device id or a stream name\n   * @param {String} suffix - It could be a channel name or a the default stream suffix (live_stream)\n   * @return a string that represents the complete exchange name\n   */\n  exchangeName(prefix, suffix) {\n    return (prefix && suffix) ? `${this.liveStreamByName(prefix)}.${suffix}` : `${suffix}`;\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Encapsulates contens for publishing messages.\n   * If the content is a valid JSON the function stringifies the content\n   *\n   * @private\n   * @param {Object} content - content to publish, could be a string or a JSON object\n   * @return the content encapsulated in the proper way\n   */\n  _encapsulateContent(content) {\n    let encapsulatedContent = content;\n    try {\n      encapsulatedContent = JSON.stringify(content);\n    } catch (ex) {\n      encapsulatedContent = content;\n    }\n    return encapsulatedContent;\n  }\n\n  /**\n   * Generate the complete hostname string for an endpoint\n   *\n   * @private\n   * @return the string representing the endpoint url\n   */\n  _generateHostname(endpoint) {\n    let hostname = `${(this._endpointUrl || endpoint.url)}`;\n    // const endpointProtocol = (this._tls) ? CONFIG.endpoint.secureProtocol : CONFIG.endpoint.protocol;\n    const endpointProtocol = CONFIG.endpoint.protocol;\n    if (!startsWith(hostname, endpointProtocol)) {\n      hostname = `${endpointProtocol}://${hostname}`;\n    }\n    return hostname;\n  }\n\n  /**\n   * Automatically parse message content\n   *\n   * @private\n   * @param {Object/String} message - the received message\n   * @return an object containing the input message with parsed content\n   */\n  _parseContent(message) {\n    let parsedMessage = message;\n    if (Buffer.isBuffer(parsedMessage)) {\n      parsedMessage = parsedMessage.toString('utf-8');\n    }\n    let res = undefined;\n    try {\n      res = JSON.parse(parsedMessage);\n    } catch (ex) {\n      res = parsedMessage;\n    }\n    return res;\n  }\n\n}\n\nexport default SpaceBunny;\n"],"sourceRoot":"src"}