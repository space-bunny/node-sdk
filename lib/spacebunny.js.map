{"version":3,"sources":["spacebunny.js"],"names":[],"mappings":"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","file":"spacebunny.js","sourcesContent":["/**\n * A module that exports the base SpaceBunny client\n * @module SpaceBunny\n */\n\n// Import some helpers modules\nimport fs from 'fs';\nimport merge from 'merge';\nimport axios from 'axios';\nimport humps from 'humps';\nimport Promise from 'bluebird';\nimport { startsWith, filter } from 'lodash';\n\nconst CONFIG = require('../config/constants').CONFIG;\n\n/**\n * @constructor\n * @param {Object} opts - constructor options may contain api-key or connection options\n */\nclass SpaceBunny {\n  constructor(opts = {}) {\n    this._connectionParams = merge({}, humps.camelizeKeys(opts));\n    this._endpointConfigs = {};\n    this._endpointUrl = this._connectionParams.endpointUrl;\n    this._apiKey = this._connectionParams.apiKey;\n    this._channels = this._connectionParams.channels;\n    this._deviceId = this._connectionParams.deviceId;\n    this._client = this._connectionParams.client;\n    this._secret = this._connectionParams.secret;\n    this._host = this._connectionParams.host;\n    this._port = this._connectionParams.port;\n    this._vhost = this._connectionParams.vhost;\n    this._protocol = 'amqp';\n    this._inputTopic = this._connectionParams.inputTopic || 'inbox';\n    this._liveStreamSuffix = 'live_stream';\n    this._liveStreams = [];\n    this._ssl = this._connectionParams.ssl || false;\n    this._sslOpts = {};\n    if (this._connectionParams.cert) { this._sslOpts.cert = fs.readFileSync(this._connectionParams.cert); }\n    if (this._connectionParams.key) { this._sslOpts.key = fs.readFileSync(this._connectionParams.key); }\n    if (this._connectionParams.passphrase) { this._sslOpts.passphrase = this._connectionParams.passphrase; }\n    if (this._connectionParams.ca) { this._sslOpts.ca = [fs.readFileSync(this._connectionParams.ca)];}\n    if (this._connectionParams.pfx) { this._sslOpts.pfx = fs.readFileSync(this._connectionParams.pfx); }\n    this._sslOpts.secureProtocol = this._connectionParams.secureProtocol || 'TLSv1_method';\n  }\n\n  // TODO this function should return a Promise!! Need to be async\n  /**\n   * Check if api-key or connection parameters have already been passed\n   * If at least api-key is passed ask the endpoint for the configurations\n   * else if also connection parameters are not passed raise an exception\n   *\n   * @return an Object containing the connection parameters\n   */\n  getConnectionParams() {\n    return new Promise((resolve, reject) => {\n      // Contact endpoint to retrieve configs\n      // Switch endpoint if you are using sdk as device or as access key stream\n      let endpoint = '';\n      if ((this._deviceId && this._secret) || this._apiKey) { // Device credentials\n        endpoint = CONFIG.deviceEndpoint;\n        // uses endpoint passed from user, default endpoint otherwise\n        const hostname = this._generateHostname(endpoint);\n        const uri = `${hostname}${endpoint.api_version}${endpoint.path}`;\n        if (this._apiKey) {\n          // Get configs from endpoint\n          const options = { url: uri, method: 'get', headers: { 'Api-Key': this._apiKey }, responseType: 'json' };\n          axios(options).then((response) => {\n            this._endpointConfigs = humps.camelizeKeys(response.data);\n            this._connectionParams = this._endpointConfigs.connection;\n            resolve(this._connectionParams);\n          }).catch((err) => {\n            reject(err);\n          });\n        } else if (this._deviceId && this._secret && this._host && this._port && this._vhost) {\n          // Manually provided configs\n          this._connectionParams.protocols = {};\n          if (this._ssl) {\n            this._connectionParams.protocols[this._protocol] = { sslPort: this._port };\n          } else {\n            this._connectionParams.protocols[this._protocol] = { port: this._port };\n          }\n          resolve(this._connectionParams);\n        }\n      } else if (this._client && this._secret) { // Access key credentials\n        if (this._host && this._port && this._vhost) {\n          // Manually provided configs\n          this._connectionParams.protocols = {};\n          if (this._ssl) {\n            this._connectionParams.protocols[this._protocol] = { sslPort: this._port };\n          } else {\n            this._connectionParams.protocols[this._protocol] = { port: this._port };\n          }\n          resolve(this._connectionParams);\n        } else {\n          // Get configs from endpoint\n          endpoint = CONFIG.accessKeyEndpoint;\n          // uses endpoint passed from user, default endpoint otherwise\n          const hostname = this._generateHostname(endpoint);\n          const uri = `${hostname}${endpoint.api_version}${endpoint.path}`;\n          const options = {\n            url: uri,\n            method: 'get',\n            headers: { 'Access-Key-Client': this._client, 'Access-Key-Secret': this._secret },\n            responseType: 'json'\n          };\n          axios(options).then((response) => {\n            this._endpointConfigs = humps.camelizeKeys(response.data);\n            this._connectionParams = this._endpointConfigs.connection;\n            this._liveStreams = this._endpointConfigs.liveStreams || [];\n            resolve(this._connectionParams);\n          }).catch((err) => {\n            reject(err);\n          });\n        }\n      } else { // No configs or missing some info\n        reject('Missing Api Key or wrong connection parameters');\n      }\n    });\n  }\n\n  /**\n   * @return all channels configured for the current device\n   */\n  channels() {\n    if (this._channels === undefined) {\n      this._channels = this._endpointConfigs.channels.map((obj) => {\n        return obj.name;\n      });\n    }\n    return this._channels || [];\n  }\n\n  /**\n   * @return the device ID for the current device\n   */\n  deviceId() {\n    this._deviceId = this._deviceId || this._connectionParams.deviceId;\n    return this._deviceId;\n  }\n\n  /**\n   * Return a Stream ID from a stream name given in input\n   *\n   * @param {String} streamName - stream name\n   * @return the stream ID which corresponds to the input stream name\n   */\n  liveStreamByName(streamName) {\n    const liveStream = filter(this._liveStreams, (stream) => { return stream.name === streamName; });\n    return liveStream[0].id || streamName;\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Generate the exchange name for a device's channel\n   *\n   * @private\n   * @param {String} deviceId - Device id from which you want to stream\n   * @param {String} channel - channel name from which you want to stream\n   * @return a string that represents the complete exchange name\n   */\n  _channelExchange(deviceId, channel) {\n    return (deviceId && channel) ? `${deviceId}.${channel}` : `${channel}`;\n  }\n\n  /**\n   * Encapsulates contens for publishing messages.\n   * If the content is a valid JSON the function stringifies the content\n   *\n   * @private\n   * @param {Object} content - content to publish, could be a string or a JSON object\n   * @return the content encapsulated in the proper way\n   */\n  _encapsulateContent(content) {\n    let encapsulatedContent = content;\n    try {\n      encapsulatedContent = JSON.stringify(content);\n    } catch (ex) {\n      encapsulatedContent = content;\n    }\n    return encapsulatedContent;\n  }\n\n  /**\n   * Check if the required parameters are present to open a secure connection\n   *\n   * @private\n   * @return true when a combination of valid parameters is present, false otherwise\n   */\n  _checkSslOptions() {\n    const sslOpts = this._sslOpts;\n    if (sslOpts.ca) {\n      if (sslOpts.cert && sslOpts.key) {\n        return true;\n      } else if (sslOpts.pfx) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  _generateHostname(endpoint) {\n    let hostname = `${(this._endpointUrl || endpoint.url)}`;\n    const endpointProtocol = (this._ssl) ? CONFIG.secureProtocol : CONFIG.protocol;\n    if (!startsWith(hostname, endpointProtocol)) {\n      hostname = `${endpointProtocol}://${hostname}`;\n    }\n    return hostname;\n  }\n\n}\n\nexport default SpaceBunny;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}