{"version":3,"sources":["spacebunny.js"],"names":[],"mappings":"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","file":"spacebunny.js","sourcesContent":["/**\n * A module that exports the base SpaceBunny client\n * @module SpaceBunny\n */\n\n// Import some helpers modules\nimport fs from 'fs';\nimport merge from 'merge';\nimport request from 'sync-request';\nimport humps from 'humps';\n\nconst CONFIG = require('../config/constants').CONFIG;\n\n// Import Space Bunny errors\nimport SpaceBunnyErrors from './spacebunny_errors';\n\n/**\n * @constructor\n * @param {Object} opts - constructor options may contain api-key or connection options\n */\nclass SpaceBunny {\n  constructor(opts) {\n    this._connectionParams = merge({}, opts);\n    this._endPointConfigs = {};\n    this._channels = this._connectionParams.channels;\n    this._apiKey = this._connectionParams.apiKey;\n    this._deviceId = this._connectionParams.deviceId;\n    this._client = this._connectionParams.client;\n    this._secret = this._connectionParams.secret;\n    this._host = this._connectionParams.host;\n    this._port = this._connectionParams.port;\n    this._vhost = this._connectionParams.vhost;\n    this._protocol = 'amqp';\n    this._inputTopic = this._connectionParams.inputTopic || 'inbox';\n    this._ssl = this._connectionParams.ssl || false;\n    this._sslOpts = {};\n    if (this._connectionParams.cert) { this._sslOpts.cert = fs.readFileSync(this._connectionParams.cert); }\n    if (this._connectionParams.key) { this._sslOpts.key = fs.readFileSync(this._connectionParams.key); }\n    if (this._connectionParams.passphrase) { this._sslOpts.passphrase = this._connectionParams.passphrase; }\n    if (this._connectionParams.ca) { this._sslOpts.ca = [fs.readFileSync(this._connectionParams.ca)];}\n    if (this._connectionParams.pfx) { this._sslOpts.pfx = fs.readFileSync(this._connectionParams.pfx); }\n    this._sslOpts.secureProtocol = this._connectionParams.secureProtocol || 'TLSv1_method';\n  }\n\n  /**\n   * Check if api-key or connection parameters have already been passed\n   * If at least api-key is passed ask the endpoint for the configurations\n   * else if also connection parameters are not passed raise an exception\n   *\n   * @return an Object containing the connection parameters\n   */\n  getConnectionParams() {\n    // Contact endpoint to retrieve configs\n    // Switch endpoint if you are using sdk as device or as access key stream\n    let endpoint = '';\n    if ((this._deviceId && this._secret) || this._apiKey) { // Device credentials\n      endpoint = CONFIG.deviceEndpoint;\n      const uri = `${endpoint.url}${endpoint.api_version}${endpoint.path}`;\n      if (this._apiKey) {\n        // Get configs from endpoint\n        try {\n          const args = { headers: { 'Api-Key': this._apiKey } };\n          const response = request('GET', uri, args);\n          this._endPointConfigs = JSON.parse(response.getBody());\n          this._connectionParams = humps.camelizeKeys(this._endPointConfigs.connection);\n        } catch (ex) {\n          throw new SpaceBunnyErrors.EndPointError(ex);\n        }\n      } else if (this._deviceId && this._secret && this._host && this._port && this._vhost) {\n        // Manually provided configs\n        this._connectionParams.protocols = {};\n        if (this._ssl) {\n          this._connectionParams.protocols[this._protocol] = { sslPort: this._port };\n        } else {\n          this._connectionParams.protocols[this._protocol] = { port: this._port };\n        }\n      }\n    } else if (this._client && this._secret) { // Access key credentials\n      if (this._host && this._port && this._vhost) {\n        // Manually provided configs\n        this._connectionParams.protocols = {};\n        if (this._ssl) {\n          this._connectionParams.protocols[this._protocol] = { sslPort: this._port };\n        } else {\n          this._connectionParams.protocols[this._protocol] = { port: this._port };\n        }\n      } else {\n        // Get configs from endpoint\n        try {\n          endpoint = CONFIG.accessKeyEndpoint;\n          const uri = `${endpoint.url}${endpoint.api_version}${endpoint.path}`;\n          const args = { headers: { 'Access-Key-Client': this._client, 'Access-Key-Secret': this._secret } };\n          const response = request('GET', uri, args);\n          this._endPointConfigs = JSON.parse(response.getBody());\n          this._connectionParams = humps.camelizeKeys(this._endPointConfigs.connection);\n        } catch (ex) {\n          throw new SpaceBunnyErrors.EndPointError(ex);\n        }\n      }\n    } else { // No configs or missing some info\n      throw new SpaceBunnyErrors.ApiKeyOrConfigurationsRequired('Missing Api Key or wrong connection parameters');\n    }\n  }\n\n  /**\n   * @return all channels configured for the current device\n   */\n  channels() {\n    if (this._channels === undefined) {\n      this._channels = this._endPointConfigs.channels.map(function(obj) {\n        return obj.name;\n      });\n    }\n    return this._channels || [];\n  }\n\n  /**\n   * @return the device ID for the current device\n   */\n  deviceId() {\n    this._deviceId = this._deviceId || this._connectionParams.deviceId;\n    return this._deviceId;\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * @private\n   * Generate the exchange name for a device's channel\n   *\n   * @param {String} deviceId - Device id from which you want to stream\n   * @param {String} channel - channel name from which you want to stream\n   * @return a string that represents the complete exchange name\n   */\n  _channelExchange(deviceId, channel) {\n    return `${deviceId}.${channel}`;\n  }\n\n  _encapsulateContent(content) {\n    let encapsulatedContent = content;\n    try {\n      encapsulatedContent = JSON.stringify(content);\n    } catch (ex) {\n      encapsulatedContent = content;\n    }\n    return encapsulatedContent;\n  }\n\n  _checkSslOptions() {\n    const sslOpts = this._sslOpts;\n    if (sslOpts.ca) {\n      if (sslOpts.cert && sslOpts.key) {\n        return true;\n      } else if (sslOpts.pfx) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n}\n\nexport default SpaceBunny;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk-node/src"}