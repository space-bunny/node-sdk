{"version":3,"sources":["spacebunny.js"],"names":[],"mappings":"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","file":"spacebunny.js","sourcesContent":["/**\n * A module that exports the base SpaceBunny client\n * @module SpaceBunny\n */\n\n// Import some helpers modules\nimport fs from 'fs';\nimport merge from 'merge';\nimport axios from 'axios';\nimport humps from 'humps';\nimport Promise from 'bluebird';\nimport { startsWith, filter } from 'lodash';\n\n// TODO validate enpointConfig object format with Joi\n// import Joi from 'joi';\n\nconst CONFIG = require('../config/constants').CONFIG;\n\n/**\n * @constructor\n * @param {Object} opts - constructor options may contain Device-Key or connection options\n */\nclass SpaceBunny {\n  constructor(opts = {}) {\n    this._connectionParams = merge({}, humps.camelizeKeys(opts));\n    this._endpointConfigs = undefined;\n    this._endpointUrl = this._connectionParams.endpointUrl;\n    this._deviceKey = this._connectionParams.deviceKey;\n    this._channels = this._connectionParams.channels;\n    this._deviceId = this._connectionParams.deviceId;\n    this._client = this._connectionParams.client;\n    this._secret = this._connectionParams.secret;\n    this._host = this._connectionParams.host;\n    this._port = this._connectionParams.port;\n    this._vhost = this._connectionParams.vhost;\n    this._protocol = CONFIG.protocol;\n    this._inboxTopic = this._connectionParams.inputTopic || CONFIG.inboxTopic;\n    this._liveStreamSuffix = CONFIG.liveStreamSuffix;\n    this._tempQueueSuffix = CONFIG.tempQueueSuffix;\n    this._liveStreams = [];\n    this._tls = this._connectionParams.tls || false;\n    this._tlsOpts = {};\n    if (this._connectionParams.cert) { this._tlsOpts.cert = fs.readFileSync(this._connectionParams.cert); }\n    if (this._connectionParams.key) { this._tlsOpts.key = fs.readFileSync(this._connectionParams.key); }\n    if (this._connectionParams.passphrase) { this._tlsOpts.passphrase = this._connectionParams.passphrase; }\n    if (this._connectionParams.ca) {\n      if (Array.isArray(this._connectionParams.ca)) {\n        this._tlsOpts.ca = this._connectionParams.ca.map((element) => {\n          return fs.readFileSync(element);\n        });\n      } else {\n        this._tlsOpts.ca = [fs.readFileSync(this._connectionParams.ca)];\n      }\n    }\n    if (this._connectionParams.pfx) { this._tlsOpts.pfx = fs.readFileSync(this._connectionParams.pfx); }\n    if (this._connectionParams.disableCertCheck) {\n      this._tlsOpts.rejectUnauthorized = false;\n    } else {\n      this._tlsOpts.rejectUnauthorized = true;\n    }\n    this._tlsOpts.secureProtocol = this._connectionParams.secureProtocol || CONFIG.tls.secureProtocol;\n  }\n\n  /**\n   * Check if Device-Key or connection parameters have already been passed\n   * If at least Device-Key is passed ask the endpoint for the configurations\n   * else if also connection parameters are not passed raise an exception\n   *\n   * @return an Object containing the connection parameters\n   */\n  getEndpointConfigs() {\n    return new Promise((resolve, reject) => {\n      // Resolve with configs if already retrieved\n      if (this._endpointConfigs !== undefined) {\n        resolve(this._endpointConfigs);\n      }\n      // Contact endpoint to retrieve configs\n      // Switch endpoint if you are using sdk as device or as access key stream\n      let endpoint = '';\n      if ((this._deviceId && this._secret) || this._deviceKey) { // Device credentials\n        endpoint = CONFIG.deviceEndpoint;\n        // uses endpoint passed from user, default endpoint otherwise\n        const hostname = this._generateHostname(endpoint);\n        const uri = `${hostname}${endpoint.api_version}${endpoint.path}`;\n        if (this._deviceKey) { // Get configs from endpoint\n          const options = {\n            url: uri,\n            method: 'get',\n            responseType: 'json',\n            headers: {\n              'Device-Key': this._deviceKey,\n              'Content-Type': 'application/json'\n            }\n          };\n          axios(options).then((response) => {\n            this._endpointConfigs = humps.camelizeKeys(response.data);\n            this._connectionParams = this._endpointConfigs.connection;\n            resolve(this._endpointConfigs);\n          }).catch((err) => {\n            reject(err);\n          });\n        } else if (this._deviceId && this._secret && this._host && this._port && this._vhost) {\n          // Manually provided configs\n          this._connectionParams.protocols = {};\n          if (this._tls) {\n            this._connectionParams.protocols[this._protocol] = { tlsPort: this._port };\n          } else {\n            this._connectionParams.protocols[this._protocol] = { port: this._port };\n          }\n          this._endpointConfigs = {\n            connection: this._connectionParams,\n            channels: []\n          };\n          resolve(this._endpointConfigs);\n        }\n      } else if (this._client && this._secret) { // Access key credentials\n        if (this._host && this._port && this._vhost) {\n          // Manually provided configs\n          this._connectionParams.protocols = {};\n          if (this._tls) {\n            this._connectionParams.protocols[this._protocol] = { tlsPort: this._port };\n          } else {\n            this._connectionParams.protocols[this._protocol] = { port: this._port };\n          }\n          this._endpointConfigs = {\n            connection: this._connectionParams,\n            liveStreams: []\n          };\n          resolve(this._endpointConfigs);\n        } else {\n          // Get configs from endpoint\n          endpoint = CONFIG.accessKeyEndpoint;\n          // uses endpoint passed from user, default endpoint otherwise\n          const hostname = this._generateHostname(endpoint);\n          const uri = `${hostname}${endpoint.api_version}${endpoint.path}`;\n          const options = {\n            url: uri,\n            method: 'get',\n            responseType: 'json',\n            headers: {\n              'Live-Stream-Key-Client': this._client,\n              'Live-Stream-Key-Secret': this._secret,\n              'Content-Type': 'application/json'\n            }\n          };\n          axios(options).then((response) => {\n            this._endpointConfigs = humps.camelizeKeys(response.data);\n            this._connectionParams = this._endpointConfigs.connection;\n            this._liveStreams = this._endpointConfigs.liveStreams || [];\n            resolve(this._endpointConfigs);\n          }).catch((err) => {\n            reject(err);\n          });\n        }\n      } else { // No configs or missing some info\n        reject('Missing Device Key or wrong connection parameters');\n      }\n    });\n  }\n\n  /**\n   * @return all channels configured for the current device\n   */\n  channels() {\n    if (this._endpointConfigs.channels) {\n      this._channels = this._endpointConfigs.channels.map((obj) => {\n        return obj.name;\n      });\n      return this._channels || [];\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * @return the device ID for the current device\n   */\n  deviceId() {\n    this._deviceId = this._deviceId || this._connectionParams.deviceId;\n    return this._deviceId;\n  }\n\n  /**\n   * Return a Stream ID from a stream name given in input\n   *\n   * @param {String} streamName - stream name\n   * @return the stream ID which corresponds to the input stream name\n   */\n  liveStreamByName(streamName) {\n    const liveStreams = filter(this._liveStreams, (stream) => { return stream.name === streamName; });\n    if (liveStreams.length > 0) {\n      return liveStreams[0].id || streamName;\n    } else {\n      return streamName;\n    }\n  }\n\n  /**\n   * Check if a stream exists\n   *\n   * @param {String} streamName - stream name\n   * @return true if stream exists, false otherwise\n   */\n  liveStreamExists(streamName) {\n    const liveStreams = filter(this._liveStreams, (stream) => { return stream.name === streamName; });\n    return (liveStreams.length > 0);\n  }\n\n  /**\n   * Generate a temporary queue name\n   *\n   * @private\n   * @param {String} prefix - client id or stream name\n   * @param {String} suffix - channel name or defaul live stream suffix\n   * @param {Numeric} currentTime - current timestamp\n   * @return a string that represents the topic name for that channel\n   */\n  tempQueue(prefix, suffix, currentTime) {\n    const timestamp = currentTime || new Date().getTime();\n    return `${timestamp}-${this._connectionParams.client}-` +\n      `${this.exchangeName(prefix, suffix)}.` +\n      `${this._tempQueueSuffix}`;\n  }\n\n  /**\n   * Generate the exchange name for a device's channel\n   *\n   * @private\n   * @param {String} prefix - It could be a device id or a stream name\n   * @param {String} suffix - It could be a channel name or a the default stream suffix (live_stream)\n   * @return a string that represents the complete exchange name\n   */\n  exchangeName(prefix, suffix) {\n    return (prefix && suffix) ? `${this.liveStreamByName(prefix)}.${suffix}` : `${suffix}`;\n  }\n\n  // ------------ PRIVATE METHODS -------------------\n\n  /**\n   * Encapsulates contens for publishing messages.\n   * If the content is a valid JSON the function stringifies the content\n   *\n   * @private\n   * @param {Object} content - content to publish, could be a string or a JSON object\n   * @return the content encapsulated in the proper way\n   */\n  _encapsulateContent(content) {\n    let encapsulatedContent = content;\n    try {\n      encapsulatedContent = JSON.stringify(content);\n    } catch (ex) {\n      encapsulatedContent = content;\n    }\n    return encapsulatedContent;\n  }\n\n  /**\n   * Generate the complete hostname string for an endpoint\n   *\n   * @private\n   * @return the string representing the endpoint url\n   */\n  _generateHostname(endpoint) {\n    let hostname = `${(this._endpointUrl || endpoint.url)}`;\n    // const endpointProtocol = (this._tls) ? CONFIG.endpoint.secureProtocol : CONFIG.endpoint.protocol;\n    const endpointProtocol = CONFIG.endpoint.protocol;\n    if (!startsWith(hostname, endpointProtocol)) {\n      hostname = `${endpointProtocol}://${hostname}`;\n    }\n    return hostname;\n  }\n\n  /**\n   * Automatically parse message content\n   *\n   * @private\n   * @param {Object/String} message - the received message\n   * @return an object containing the input message with parsed content\n   */\n  _parseContent(message) {\n    let parsedMessage = message;\n    if (Buffer.isBuffer(parsedMessage)) {\n      const content = parsedMessage.toString('utf-8');\n      try {\n        parsedMessage = JSON.parse(content);\n      } catch (ex) {\n        parsedMessage = content;\n      }\n    }\n    return parsedMessage;\n  }\n\n}\n\nexport default SpaceBunny;\n"],"sourceRoot":"/Users/gfoiani/Dev/work/spacebunny/sdk/node/src"}